{"ast":null,"code":"/**\n * The abstract operation ComputeExponentForMagnitude computes an exponent by which to scale a\n * number of the given magnitude (power of ten of the most significant digit) according to the\n * locale and the desired notation (scientific, engineering, or compact).\n */\nexport function ComputeExponentForMagnitude(numberFormat, magnitude, _a) {\n  var getInternalSlots = _a.getInternalSlots;\n  var internalSlots = getInternalSlots(numberFormat);\n  var notation = internalSlots.notation,\n      dataLocaleData = internalSlots.dataLocaleData,\n      numberingSystem = internalSlots.numberingSystem;\n\n  switch (notation) {\n    case 'standard':\n      return 0;\n\n    case 'scientific':\n      return magnitude;\n\n    case 'engineering':\n      return Math.floor(magnitude / 3) * 3;\n\n    default:\n      {\n        // Let exponent be an implementation- and locale-dependent (ILD) integer by which to scale a\n        // number of the given magnitude in compact notation for the current locale.\n        var compactDisplay = internalSlots.compactDisplay,\n            style = internalSlots.style,\n            currencyDisplay = internalSlots.currencyDisplay;\n        var thresholdMap = void 0;\n\n        if (style === 'currency' && currencyDisplay !== 'name') {\n          var currency = dataLocaleData.numbers.currency[numberingSystem] || dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];\n          thresholdMap = currency.short;\n        } else {\n          var decimal = dataLocaleData.numbers.decimal[numberingSystem] || dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];\n          thresholdMap = compactDisplay === 'long' ? decimal.long : decimal.short;\n        }\n\n        if (!thresholdMap) {\n          return 0;\n        }\n\n        var num = String(Math.pow(10, magnitude));\n        var thresholds = Object.keys(thresholdMap); // TODO: this can be pre-processed\n\n        if (num < thresholds[0]) {\n          return 0;\n        }\n\n        if (num > thresholds[thresholds.length - 1]) {\n          return thresholds[thresholds.length - 1].length - 1;\n        }\n\n        var i = thresholds.indexOf(num);\n\n        if (i === -1) {\n          return 0;\n        } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats\n        // Special handling if the pattern is precisely `0`.\n\n\n        var magnitudeKey = thresholds[i]; // TODO: do we need to handle plural here?\n\n        var compactPattern = thresholdMap[magnitudeKey].other;\n\n        if (compactPattern === '0') {\n          return 0;\n        } // Example: in zh-TW, `10000000` maps to `0000萬`. So we need to return 8 - 4 = 4 here.\n\n\n        return magnitudeKey.length - thresholdMap[magnitudeKey].other.match(/0+/)[0].length;\n      }\n  }\n}","map":{"version":3,"names":["ComputeExponentForMagnitude","numberFormat","magnitude","_a","getInternalSlots","internalSlots","notation","dataLocaleData","numberingSystem","Math","floor","compactDisplay","style","currencyDisplay","thresholdMap","currency","numbers","nu","short","decimal","long","num","String","pow","thresholds","Object","keys","length","i","indexOf","magnitudeKey","compactPattern","other","match"],"sources":["C:/Users/KT2/Desktop/ssc.fe.cheatview-main/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ComputeExponentForMagnitude.js"],"sourcesContent":["/**\n * The abstract operation ComputeExponentForMagnitude computes an exponent by which to scale a\n * number of the given magnitude (power of ten of the most significant digit) according to the\n * locale and the desired notation (scientific, engineering, or compact).\n */\nexport function ComputeExponentForMagnitude(numberFormat, magnitude, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    var internalSlots = getInternalSlots(numberFormat);\n    var notation = internalSlots.notation, dataLocaleData = internalSlots.dataLocaleData, numberingSystem = internalSlots.numberingSystem;\n    switch (notation) {\n        case 'standard':\n            return 0;\n        case 'scientific':\n            return magnitude;\n        case 'engineering':\n            return Math.floor(magnitude / 3) * 3;\n        default: {\n            // Let exponent be an implementation- and locale-dependent (ILD) integer by which to scale a\n            // number of the given magnitude in compact notation for the current locale.\n            var compactDisplay = internalSlots.compactDisplay, style = internalSlots.style, currencyDisplay = internalSlots.currencyDisplay;\n            var thresholdMap = void 0;\n            if (style === 'currency' && currencyDisplay !== 'name') {\n                var currency = dataLocaleData.numbers.currency[numberingSystem] ||\n                    dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];\n                thresholdMap = currency.short;\n            }\n            else {\n                var decimal = dataLocaleData.numbers.decimal[numberingSystem] ||\n                    dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];\n                thresholdMap = compactDisplay === 'long' ? decimal.long : decimal.short;\n            }\n            if (!thresholdMap) {\n                return 0;\n            }\n            var num = String(Math.pow(10, magnitude));\n            var thresholds = Object.keys(thresholdMap); // TODO: this can be pre-processed\n            if (num < thresholds[0]) {\n                return 0;\n            }\n            if (num > thresholds[thresholds.length - 1]) {\n                return thresholds[thresholds.length - 1].length - 1;\n            }\n            var i = thresholds.indexOf(num);\n            if (i === -1) {\n                return 0;\n            }\n            // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats\n            // Special handling if the pattern is precisely `0`.\n            var magnitudeKey = thresholds[i];\n            // TODO: do we need to handle plural here?\n            var compactPattern = thresholdMap[magnitudeKey].other;\n            if (compactPattern === '0') {\n                return 0;\n            }\n            // Example: in zh-TW, `10000000` maps to `0000萬`. So we need to return 8 - 4 = 4 here.\n            return (magnitudeKey.length -\n                thresholdMap[magnitudeKey].other.match(/0+/)[0].length);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}