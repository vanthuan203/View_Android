{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KT2\\\\OneDrive\\\\Documents\\\\Buffh\\\\ssc.fe.cheatview-main\\\\src\\\\_metronic\\\\layout\\\\core\\\\LayoutProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { DefaultLayoutConfig } from './DefaultLayoutConfig';\nimport { getEmptyCssClasses, getEmptyCSSVariables, getEmptyHTMLAttributes, LayoutSetup } from './LayoutSetup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LayoutContext = /*#__PURE__*/createContext({\n  config: DefaultLayoutConfig,\n  classes: getEmptyCssClasses(),\n  attributes: getEmptyHTMLAttributes(),\n  cssVariables: getEmptyCSSVariables(),\n  setLayout: config => {}\n});\n\nconst enableSplashScreen = () => {\n  const splashScreen = document.getElementById('splash-screen');\n\n  if (splashScreen) {\n    splashScreen.style.setProperty('display', 'flex');\n  }\n};\n\nconst disableSplashScreen = () => {\n  const splashScreen = document.getElementById('splash-screen');\n\n  if (splashScreen) {\n    splashScreen.style.setProperty('display', 'none');\n  }\n};\n\nconst LayoutProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [config, setConfig] = useState(LayoutSetup.config);\n  const [classes, setClasses] = useState(LayoutSetup.classes);\n  const [attributes, setAttributes] = useState(LayoutSetup.attributes);\n  const [cssVariables, setCSSVariables] = useState(LayoutSetup.cssVariables);\n\n  const setLayout = _themeConfig => {\n    enableSplashScreen();\n    const bodyClasses = Array.from(document.body.classList);\n    bodyClasses.forEach(cl => document.body.classList.remove(cl));\n    LayoutSetup.updatePartialConfig(_themeConfig);\n    setConfig(Object.assign({}, LayoutSetup.config));\n    setClasses(LayoutSetup.classes);\n    setAttributes(LayoutSetup.attributes);\n    setCSSVariables(LayoutSetup.cssVariables);\n    setTimeout(() => {\n      disableSplashScreen();\n    }, 500);\n  };\n\n  const value = {\n    config,\n    classes,\n    attributes,\n    cssVariables,\n    setLayout\n  };\n  useEffect(() => {\n    disableSplashScreen();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LayoutContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n};\n\n_s(LayoutProvider, \"v9W/VJPDsgTcdQRHrWCbNvCfFmk=\");\n\n_c = LayoutProvider;\nexport { LayoutContext, LayoutProvider };\nexport function useLayout() {\n  _s2();\n\n  return useContext(LayoutContext);\n}\n\n_s2(useLayout, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"LayoutProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","DefaultLayoutConfig","getEmptyCssClasses","getEmptyCSSVariables","getEmptyHTMLAttributes","LayoutSetup","LayoutContext","config","classes","attributes","cssVariables","setLayout","enableSplashScreen","splashScreen","document","getElementById","style","setProperty","disableSplashScreen","LayoutProvider","children","setConfig","setClasses","setAttributes","setCSSVariables","_themeConfig","bodyClasses","Array","from","body","classList","forEach","cl","remove","updatePartialConfig","Object","assign","setTimeout","value","useLayout"],"sources":["C:/Users/KT2/OneDrive/Documents/Buffh/ssc.fe.cheatview-main/src/_metronic/layout/core/LayoutProvider.tsx"],"sourcesContent":["import React, {createContext, useContext, useState, useEffect} from 'react'\nimport {DefaultLayoutConfig} from './DefaultLayoutConfig'\nimport {\n  getEmptyCssClasses,\n  getEmptyCSSVariables,\n  getEmptyHTMLAttributes,\n  LayoutSetup,\n} from './LayoutSetup'\nimport {\n  ILayout,\n  ILayoutCSSVariables,\n  ILayoutCSSClasses,\n  ILayoutHTMLAttributes,\n} from './LayoutModels'\n\nexport interface LayoutContextModel {\n  config: ILayout\n  classes: ILayoutCSSClasses\n  attributes: ILayoutHTMLAttributes\n  cssVariables: ILayoutCSSVariables\n  setLayout: (config: LayoutSetup) => void\n}\n\nconst LayoutContext = createContext<LayoutContextModel>({\n  config: DefaultLayoutConfig,\n  classes: getEmptyCssClasses(),\n  attributes: getEmptyHTMLAttributes(),\n  cssVariables: getEmptyCSSVariables(),\n  setLayout: (config: LayoutSetup) => {},\n})\n\nconst enableSplashScreen = () => {\n  const splashScreen = document.getElementById('splash-screen')\n  if (splashScreen) {\n    splashScreen.style.setProperty('display', 'flex')\n  }\n}\n\nconst disableSplashScreen = () => {\n  const splashScreen = document.getElementById('splash-screen')\n  if (splashScreen) {\n    splashScreen.style.setProperty('display', 'none')\n  }\n}\n\nconst LayoutProvider: React.FC = ({children}) => {\n  const [config, setConfig] = useState(LayoutSetup.config)\n  const [classes, setClasses] = useState(LayoutSetup.classes)\n  const [attributes, setAttributes] = useState(LayoutSetup.attributes)\n  const [cssVariables, setCSSVariables] = useState(LayoutSetup.cssVariables)\n  const setLayout = (_themeConfig: Partial<ILayout>) => {\n    enableSplashScreen()\n    const bodyClasses = Array.from(document.body.classList)\n    bodyClasses.forEach((cl) => document.body.classList.remove(cl))\n    LayoutSetup.updatePartialConfig(_themeConfig)\n    setConfig(Object.assign({}, LayoutSetup.config))\n    setClasses(LayoutSetup.classes)\n    setAttributes(LayoutSetup.attributes)\n    setCSSVariables(LayoutSetup.cssVariables)\n    setTimeout(() => {\n      disableSplashScreen()\n    }, 500)\n  }\n  const value: LayoutContextModel = {\n    config,\n    classes,\n    attributes,\n    cssVariables,\n    setLayout,\n  }\n\n  useEffect(() => {\n    disableSplashScreen()\n  }, [])\n\n  return <LayoutContext.Provider value={value}>{children}</LayoutContext.Provider>\n}\n\nexport {LayoutContext, LayoutProvider}\n\nexport function useLayout() {\n  return useContext(LayoutContext)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}