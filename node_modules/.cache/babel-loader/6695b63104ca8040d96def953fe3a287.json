{"ast":null,"code":"import { FormatNumericToString } from './FormatNumericToString';\nimport { SameValue } from '../262';\nimport { ComputeExponent } from './ComputeExponent';\nimport formatToParts from './format_to_parts';\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n */\n\nexport function PartitionNumberPattern(numberFormat, x, _a) {\n  var _b;\n\n  var getInternalSlots = _a.getInternalSlots;\n  var internalSlots = getInternalSlots(numberFormat);\n  var pl = internalSlots.pl,\n      dataLocaleData = internalSlots.dataLocaleData,\n      numberingSystem = internalSlots.numberingSystem;\n  var symbols = dataLocaleData.numbers.symbols[numberingSystem] || dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];\n  var magnitude = 0;\n  var exponent = 0;\n  var n;\n\n  if (isNaN(x)) {\n    n = symbols.nan;\n  } else if (!isFinite(x)) {\n    n = symbols.infinity;\n  } else {\n    if (internalSlots.style === 'percent') {\n      x *= 100;\n    }\n\n    ;\n    _b = ComputeExponent(numberFormat, x, {\n      getInternalSlots: getInternalSlots\n    }), exponent = _b[0], magnitude = _b[1]; // Preserve more precision by doing multiplication when exponent is negative.\n\n    x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);\n    var formatNumberResult = FormatNumericToString(internalSlots, x);\n    n = formatNumberResult.formattedString;\n    x = formatNumberResult.roundedNumber;\n  } // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern\n  // We need to do this before `x` is rounded.\n\n\n  var sign;\n  var signDisplay = internalSlots.signDisplay;\n\n  switch (signDisplay) {\n    case 'never':\n      sign = 0;\n      break;\n\n    case 'auto':\n      if (SameValue(x, 0) || x > 0 || isNaN(x)) {\n        sign = 0;\n      } else {\n        sign = -1;\n      }\n\n      break;\n\n    case 'always':\n      if (SameValue(x, 0) || x > 0 || isNaN(x)) {\n        sign = 1;\n      } else {\n        sign = -1;\n      }\n\n      break;\n\n    default:\n      // x === 0 -> x is 0 or x is -0\n      if (x === 0 || isNaN(x)) {\n        sign = 0;\n      } else if (x > 0) {\n        sign = 1;\n      } else {\n        sign = -1;\n      }\n\n  }\n\n  return formatToParts({\n    roundedNumber: x,\n    formattedString: n,\n    exponent: exponent,\n    magnitude: magnitude,\n    sign: sign\n  }, internalSlots.dataLocaleData, pl, internalSlots);\n}","map":{"version":3,"names":["FormatNumericToString","SameValue","ComputeExponent","formatToParts","PartitionNumberPattern","numberFormat","x","_a","_b","getInternalSlots","internalSlots","pl","dataLocaleData","numberingSystem","symbols","numbers","nu","magnitude","exponent","n","isNaN","nan","isFinite","infinity","style","Math","pow","formatNumberResult","formattedString","roundedNumber","sign","signDisplay"],"sources":["C:/Users/KT2/OneDrive/Documents/Buffh/ssc.fe.cheatview-main/node_modules/@formatjs/intl-relativetimeformat/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/PartitionNumberPattern.js"],"sourcesContent":["import { FormatNumericToString } from './FormatNumericToString';\nimport { SameValue } from '../262';\nimport { ComputeExponent } from './ComputeExponent';\nimport formatToParts from './format_to_parts';\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n */\nexport function PartitionNumberPattern(numberFormat, x, _a) {\n    var _b;\n    var getInternalSlots = _a.getInternalSlots;\n    var internalSlots = getInternalSlots(numberFormat);\n    var pl = internalSlots.pl, dataLocaleData = internalSlots.dataLocaleData, numberingSystem = internalSlots.numberingSystem;\n    var symbols = dataLocaleData.numbers.symbols[numberingSystem] ||\n        dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];\n    var magnitude = 0;\n    var exponent = 0;\n    var n;\n    if (isNaN(x)) {\n        n = symbols.nan;\n    }\n    else if (!isFinite(x)) {\n        n = symbols.infinity;\n    }\n    else {\n        if (internalSlots.style === 'percent') {\n            x *= 100;\n        }\n        ;\n        _b = ComputeExponent(numberFormat, x, {\n            getInternalSlots: getInternalSlots,\n        }), exponent = _b[0], magnitude = _b[1];\n        // Preserve more precision by doing multiplication when exponent is negative.\n        x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);\n        var formatNumberResult = FormatNumericToString(internalSlots, x);\n        n = formatNumberResult.formattedString;\n        x = formatNumberResult.roundedNumber;\n    }\n    // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern\n    // We need to do this before `x` is rounded.\n    var sign;\n    var signDisplay = internalSlots.signDisplay;\n    switch (signDisplay) {\n        case 'never':\n            sign = 0;\n            break;\n        case 'auto':\n            if (SameValue(x, 0) || x > 0 || isNaN(x)) {\n                sign = 0;\n            }\n            else {\n                sign = -1;\n            }\n            break;\n        case 'always':\n            if (SameValue(x, 0) || x > 0 || isNaN(x)) {\n                sign = 1;\n            }\n            else {\n                sign = -1;\n            }\n            break;\n        default:\n            // x === 0 -> x is 0 or x is -0\n            if (x === 0 || isNaN(x)) {\n                sign = 0;\n            }\n            else if (x > 0) {\n                sign = 1;\n            }\n            else {\n                sign = -1;\n            }\n    }\n    return formatToParts({ roundedNumber: x, formattedString: n, exponent: exponent, magnitude: magnitude, sign: sign }, internalSlots.dataLocaleData, pl, internalSlots);\n}\n"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,yBAAtC;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA;AACA;AACA;;AACA,OAAO,SAASC,sBAAT,CAAgCC,YAAhC,EAA8CC,CAA9C,EAAiDC,EAAjD,EAAqD;EACxD,IAAIC,EAAJ;;EACA,IAAIC,gBAAgB,GAAGF,EAAE,CAACE,gBAA1B;EACA,IAAIC,aAAa,GAAGD,gBAAgB,CAACJ,YAAD,CAApC;EACA,IAAIM,EAAE,GAAGD,aAAa,CAACC,EAAvB;EAAA,IAA2BC,cAAc,GAAGF,aAAa,CAACE,cAA1D;EAAA,IAA0EC,eAAe,GAAGH,aAAa,CAACG,eAA1G;EACA,IAAIC,OAAO,GAAGF,cAAc,CAACG,OAAf,CAAuBD,OAAvB,CAA+BD,eAA/B,KACVD,cAAc,CAACG,OAAf,CAAuBD,OAAvB,CAA+BF,cAAc,CAACG,OAAf,CAAuBC,EAAvB,CAA0B,CAA1B,CAA/B,CADJ;EAEA,IAAIC,SAAS,GAAG,CAAhB;EACA,IAAIC,QAAQ,GAAG,CAAf;EACA,IAAIC,CAAJ;;EACA,IAAIC,KAAK,CAACd,CAAD,CAAT,EAAc;IACVa,CAAC,GAAGL,OAAO,CAACO,GAAZ;EACH,CAFD,MAGK,IAAI,CAACC,QAAQ,CAAChB,CAAD,CAAb,EAAkB;IACnBa,CAAC,GAAGL,OAAO,CAACS,QAAZ;EACH,CAFI,MAGA;IACD,IAAIb,aAAa,CAACc,KAAd,KAAwB,SAA5B,EAAuC;MACnClB,CAAC,IAAI,GAAL;IACH;;IACD;IACAE,EAAE,GAAGN,eAAe,CAACG,YAAD,EAAeC,CAAf,EAAkB;MAClCG,gBAAgB,EAAEA;IADgB,CAAlB,CAApB,EAEIS,QAAQ,GAAGV,EAAE,CAAC,CAAD,CAFjB,EAEsBS,SAAS,GAAGT,EAAE,CAAC,CAAD,CAFpC,CALC,CAQD;;IACAF,CAAC,GAAGY,QAAQ,GAAG,CAAX,GAAeZ,CAAC,GAAGmB,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAACR,QAAd,CAAnB,GAA6CZ,CAAC,GAAGmB,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaR,QAAb,CAArD;IACA,IAAIS,kBAAkB,GAAG3B,qBAAqB,CAACU,aAAD,EAAgBJ,CAAhB,CAA9C;IACAa,CAAC,GAAGQ,kBAAkB,CAACC,eAAvB;IACAtB,CAAC,GAAGqB,kBAAkB,CAACE,aAAvB;EACH,CA7BuD,CA8BxD;EACA;;;EACA,IAAIC,IAAJ;EACA,IAAIC,WAAW,GAAGrB,aAAa,CAACqB,WAAhC;;EACA,QAAQA,WAAR;IACI,KAAK,OAAL;MACID,IAAI,GAAG,CAAP;MACA;;IACJ,KAAK,MAAL;MACI,IAAI7B,SAAS,CAACK,CAAD,EAAI,CAAJ,CAAT,IAAmBA,CAAC,GAAG,CAAvB,IAA4Bc,KAAK,CAACd,CAAD,CAArC,EAA0C;QACtCwB,IAAI,GAAG,CAAP;MACH,CAFD,MAGK;QACDA,IAAI,GAAG,CAAC,CAAR;MACH;;MACD;;IACJ,KAAK,QAAL;MACI,IAAI7B,SAAS,CAACK,CAAD,EAAI,CAAJ,CAAT,IAAmBA,CAAC,GAAG,CAAvB,IAA4Bc,KAAK,CAACd,CAAD,CAArC,EAA0C;QACtCwB,IAAI,GAAG,CAAP;MACH,CAFD,MAGK;QACDA,IAAI,GAAG,CAAC,CAAR;MACH;;MACD;;IACJ;MACI;MACA,IAAIxB,CAAC,KAAK,CAAN,IAAWc,KAAK,CAACd,CAAD,CAApB,EAAyB;QACrBwB,IAAI,GAAG,CAAP;MACH,CAFD,MAGK,IAAIxB,CAAC,GAAG,CAAR,EAAW;QACZwB,IAAI,GAAG,CAAP;MACH,CAFI,MAGA;QACDA,IAAI,GAAG,CAAC,CAAR;MACH;;EA9BT;;EAgCA,OAAO3B,aAAa,CAAC;IAAE0B,aAAa,EAAEvB,CAAjB;IAAoBsB,eAAe,EAAET,CAArC;IAAwCD,QAAQ,EAAEA,QAAlD;IAA4DD,SAAS,EAAEA,SAAvE;IAAkFa,IAAI,EAAEA;EAAxF,CAAD,EAAiGpB,aAAa,CAACE,cAA/G,EAA+HD,EAA/H,EAAmID,aAAnI,CAApB;AACH"},"metadata":{},"sourceType":"module"}