{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KT2\\\\Desktop\\\\ssc.fe.cheatview-main\\\\src\\\\_metronic\\\\layout\\\\core\\\\MetronicSplashScreen.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MetronicSplashScreenContext = /*#__PURE__*/createContext(undefined);\n\nconst MetronicSplashScreenProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [count, setCount] = useState(0);\n  let visible = count > 0;\n  useEffect(() => {\n    const splashScreen = document.getElementById('splash-screen'); // Show SplashScreen\n\n    if (splashScreen && visible) {\n      splashScreen.classList.remove('hidden');\n      return () => {\n        splashScreen.classList.add('hidden');\n      };\n    } // Hide SplashScreen\n\n\n    let timeout;\n\n    if (splashScreen && !visible) {\n      timeout = window.setTimeout(() => {\n        splashScreen.classList.add('hidden');\n      }, 3000);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [visible]);\n  return /*#__PURE__*/_jsxDEV(MetronicSplashScreenContext.Provider, {\n    value: setCount,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MetronicSplashScreenProvider, \"/xL7qdScToREtqzbt5GZ1kHtYjQ=\");\n\n_c = MetronicSplashScreenProvider;\n\nconst LayoutSplashScreen = _ref2 => {\n  _s2();\n\n  let {\n    visible = true\n  } = _ref2;\n  // Everything are ready - remove splashscreen\n  const setCount = useContext(MetronicSplashScreenContext);\n  useEffect(() => {\n    if (!visible) {\n      return;\n    }\n\n    if (setCount) {\n      setCount(prev => {\n        return prev + 1;\n      });\n    }\n\n    return () => {\n      if (setCount) {\n        setCount(prev => {\n          return prev - 1;\n        });\n      }\n    };\n  }, [setCount, visible]);\n  return null;\n};\n\n_s2(LayoutSplashScreen, \"7vsTmQ5v/VbQFP1+FvIbjUJDPow=\");\n\n_c2 = LayoutSplashScreen;\nexport { MetronicSplashScreenProvider, LayoutSplashScreen };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MetronicSplashScreenProvider\");\n$RefreshReg$(_c2, \"LayoutSplashScreen\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","MetronicSplashScreenContext","undefined","MetronicSplashScreenProvider","children","count","setCount","visible","splashScreen","document","getElementById","classList","remove","add","timeout","window","setTimeout","clearTimeout","LayoutSplashScreen","prev"],"sources":["C:/Users/KT2/Desktop/ssc.fe.cheatview-main/src/_metronic/layout/core/MetronicSplashScreen.tsx"],"sourcesContent":["import React, {\n  FC,\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  SetStateAction,\n  Dispatch,\n} from 'react'\n\nconst MetronicSplashScreenContext = createContext<Dispatch<SetStateAction<number>> | undefined>(\n  undefined\n)\n\nconst MetronicSplashScreenProvider: FC = ({children}) => {\n  const [count, setCount] = useState(0)\n  let visible = count > 0\n\n  useEffect(() => {\n    const splashScreen = document.getElementById('splash-screen')\n\n    // Show SplashScreen\n    if (splashScreen && visible) {\n      splashScreen.classList.remove('hidden')\n\n      return () => {\n        splashScreen.classList.add('hidden')\n      }\n    }\n\n    // Hide SplashScreen\n    let timeout: number\n    if (splashScreen && !visible) {\n      timeout = window.setTimeout(() => {\n        splashScreen.classList.add('hidden')\n      }, 3000)\n    }\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [visible])\n\n  return (\n    <MetronicSplashScreenContext.Provider value={setCount}>\n      {children}\n    </MetronicSplashScreenContext.Provider>\n  )\n}\n\nconst LayoutSplashScreen: FC<{visible?: boolean}> = ({visible = true}) => {\n  // Everything are ready - remove splashscreen\n  const setCount = useContext(MetronicSplashScreenContext)\n\n  useEffect(() => {\n    if (!visible) {\n      return\n    }\n\n    if (setCount) {\n      setCount((prev) => {\n        return prev + 1\n      })\n    }\n\n    return () => {\n      if (setCount) {\n        setCount((prev) => {\n          return prev - 1\n        })\n      }\n    }\n  }, [setCount, visible])\n\n  return null\n}\n\nexport {MetronicSplashScreenProvider, LayoutSplashScreen}\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAEEC,aAFF,EAGEC,UAHF,EAIEC,QAJF,EAKEC,SALF,QAQO,OARP;;AAUA,MAAMC,2BAA2B,gBAAGJ,aAAa,CAC/CK,SAD+C,CAAjD;;AAIA,MAAMC,4BAAgC,GAAG,QAAgB;EAAA;;EAAA,IAAf;IAACC;EAAD,CAAe;EACvD,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;EACA,IAAIQ,OAAO,GAAGF,KAAK,GAAG,CAAtB;EAEAL,SAAS,CAAC,MAAM;IACd,MAAMQ,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAArB,CADc,CAGd;;IACA,IAAIF,YAAY,IAAID,OAApB,EAA6B;MAC3BC,YAAY,CAACG,SAAb,CAAuBC,MAAvB,CAA8B,QAA9B;MAEA,OAAO,MAAM;QACXJ,YAAY,CAACG,SAAb,CAAuBE,GAAvB,CAA2B,QAA3B;MACD,CAFD;IAGD,CAVa,CAYd;;;IACA,IAAIC,OAAJ;;IACA,IAAIN,YAAY,IAAI,CAACD,OAArB,EAA8B;MAC5BO,OAAO,GAAGC,MAAM,CAACC,UAAP,CAAkB,MAAM;QAChCR,YAAY,CAACG,SAAb,CAAuBE,GAAvB,CAA2B,QAA3B;MACD,CAFS,EAEP,IAFO,CAAV;IAGD;;IAED,OAAO,MAAM;MACXI,YAAY,CAACH,OAAD,CAAZ;IACD,CAFD;EAGD,CAvBQ,EAuBN,CAACP,OAAD,CAvBM,CAAT;EAyBA,oBACE,QAAC,2BAAD,CAA6B,QAA7B;IAAsC,KAAK,EAAED,QAA7C;IAAA,UACGF;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAlCD;;GAAMD,4B;;KAAAA,4B;;AAoCN,MAAMe,kBAA2C,GAAG,SAAsB;EAAA;;EAAA,IAArB;IAACX,OAAO,GAAG;EAAX,CAAqB;EACxE;EACA,MAAMD,QAAQ,GAAGR,UAAU,CAACG,2BAAD,CAA3B;EAEAD,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,OAAL,EAAc;MACZ;IACD;;IAED,IAAID,QAAJ,EAAc;MACZA,QAAQ,CAAEa,IAAD,IAAU;QACjB,OAAOA,IAAI,GAAG,CAAd;MACD,CAFO,CAAR;IAGD;;IAED,OAAO,MAAM;MACX,IAAIb,QAAJ,EAAc;QACZA,QAAQ,CAAEa,IAAD,IAAU;UACjB,OAAOA,IAAI,GAAG,CAAd;QACD,CAFO,CAAR;MAGD;IACF,CAND;EAOD,CAlBQ,EAkBN,CAACb,QAAD,EAAWC,OAAX,CAlBM,CAAT;EAoBA,OAAO,IAAP;AACD,CAzBD;;IAAMW,kB;;MAAAA,kB;AA2BN,SAAQf,4BAAR,EAAsCe,kBAAtC"},"metadata":{},"sourceType":"module"}