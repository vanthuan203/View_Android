{"ast":null,"code":"import { invariant } from './utils';\n/**\n * https://tc39.es/ecma402/#sec-partitionpattern\n * @param pattern\n */\n\nexport function PartitionPattern(pattern) {\n  var result = [];\n  var beginIndex = pattern.indexOf('{');\n  var endIndex = 0;\n  var nextIndex = 0;\n  var length = pattern.length;\n\n  while (beginIndex < pattern.length && beginIndex > -1) {\n    endIndex = pattern.indexOf('}', beginIndex);\n    invariant(endIndex > beginIndex, \"Invalid pattern \".concat(pattern));\n\n    if (beginIndex > nextIndex) {\n      result.push({\n        type: 'literal',\n        value: pattern.substring(nextIndex, beginIndex)\n      });\n    }\n\n    result.push({\n      type: pattern.substring(beginIndex + 1, endIndex),\n      value: undefined\n    });\n    nextIndex = endIndex + 1;\n    beginIndex = pattern.indexOf('{', nextIndex);\n  }\n\n  if (nextIndex < length) {\n    result.push({\n      type: 'literal',\n      value: pattern.substring(nextIndex, length)\n    });\n  }\n\n  return result;\n}","map":{"version":3,"names":["invariant","PartitionPattern","pattern","result","beginIndex","indexOf","endIndex","nextIndex","length","concat","push","type","value","substring","undefined"],"sources":["C:/Users/KT2/Desktop/ssc.fe.cheatview-main/node_modules/@formatjs/ecma402-abstract/lib/PartitionPattern.js"],"sourcesContent":["import { invariant } from './utils';\n/**\n * https://tc39.es/ecma402/#sec-partitionpattern\n * @param pattern\n */\nexport function PartitionPattern(pattern) {\n    var result = [];\n    var beginIndex = pattern.indexOf('{');\n    var endIndex = 0;\n    var nextIndex = 0;\n    var length = pattern.length;\n    while (beginIndex < pattern.length && beginIndex > -1) {\n        endIndex = pattern.indexOf('}', beginIndex);\n        invariant(endIndex > beginIndex, \"Invalid pattern \".concat(pattern));\n        if (beginIndex > nextIndex) {\n            result.push({\n                type: 'literal',\n                value: pattern.substring(nextIndex, beginIndex),\n            });\n        }\n        result.push({\n            type: pattern.substring(beginIndex + 1, endIndex),\n            value: undefined,\n        });\n        nextIndex = endIndex + 1;\n        beginIndex = pattern.indexOf('{', nextIndex);\n    }\n    if (nextIndex < length) {\n        result.push({\n            type: 'literal',\n            value: pattern.substring(nextIndex, length),\n        });\n    }\n    return result;\n}\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,SAA1B;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;EACtC,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIC,UAAU,GAAGF,OAAO,CAACG,OAAR,CAAgB,GAAhB,CAAjB;EACA,IAAIC,QAAQ,GAAG,CAAf;EACA,IAAIC,SAAS,GAAG,CAAhB;EACA,IAAIC,MAAM,GAAGN,OAAO,CAACM,MAArB;;EACA,OAAOJ,UAAU,GAAGF,OAAO,CAACM,MAArB,IAA+BJ,UAAU,GAAG,CAAC,CAApD,EAAuD;IACnDE,QAAQ,GAAGJ,OAAO,CAACG,OAAR,CAAgB,GAAhB,EAAqBD,UAArB,CAAX;IACAJ,SAAS,CAACM,QAAQ,GAAGF,UAAZ,EAAwB,mBAAmBK,MAAnB,CAA0BP,OAA1B,CAAxB,CAAT;;IACA,IAAIE,UAAU,GAAGG,SAAjB,EAA4B;MACxBJ,MAAM,CAACO,IAAP,CAAY;QACRC,IAAI,EAAE,SADE;QAERC,KAAK,EAAEV,OAAO,CAACW,SAAR,CAAkBN,SAAlB,EAA6BH,UAA7B;MAFC,CAAZ;IAIH;;IACDD,MAAM,CAACO,IAAP,CAAY;MACRC,IAAI,EAAET,OAAO,CAACW,SAAR,CAAkBT,UAAU,GAAG,CAA/B,EAAkCE,QAAlC,CADE;MAERM,KAAK,EAAEE;IAFC,CAAZ;IAIAP,SAAS,GAAGD,QAAQ,GAAG,CAAvB;IACAF,UAAU,GAAGF,OAAO,CAACG,OAAR,CAAgB,GAAhB,EAAqBE,SAArB,CAAb;EACH;;EACD,IAAIA,SAAS,GAAGC,MAAhB,EAAwB;IACpBL,MAAM,CAACO,IAAP,CAAY;MACRC,IAAI,EAAE,SADE;MAERC,KAAK,EAAEV,OAAO,CAACW,SAAR,CAAkBN,SAAlB,EAA6BC,MAA7B;IAFC,CAAZ;EAIH;;EACD,OAAOL,MAAP;AACH"},"metadata":{},"sourceType":"module"}