{"ast":null,"code":"import { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { getList, getComputer, getStatics, getProxy } from './AccountCRUD';\nexport const actionTypes = {\n  RequestHistories: '[Histories] Requested',\n  HistoryLoadedSuccess: '[Histories] Loaded succcess',\n  HistoryLoadedFail: '[Histories] load fail',\n  ProxyLoadedFail: '[Proxy] load fail',\n  RequestComputers: '[Computers] Requested',\n  ComputersLoadedSuccess: '[Computers] Loaded succcess',\n  ProxyLoadedSuccess: '[Proxy] Loaded succcess',\n  RequestStatic: '[Static] Requested',\n  RequestProxy: '[Proxy] Requested',\n  StaticLoadedSuccess: '[Static] Loaded succcess'\n};\nconst initialAccountState = {\n  histories: [],\n  loading: false,\n  computers: [],\n  statics: [],\n  proxies: []\n};\nexport const reducer = persistReducer({\n  storage,\n  key: 'v1-histories',\n  whitelist: []\n}, function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialAccountState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.RequestHistories:\n      {\n        return { ...state,\n          histories: [],\n          loading: true\n        };\n      }\n\n    case actionTypes.RequestProxy:\n      {\n        return { ...state,\n          proxies: [],\n          loading: true\n        };\n      }\n\n    case actionTypes.RequestComputers:\n      {\n        return { ...state,\n          computers: []\n        };\n      }\n\n    case actionTypes.ComputersLoadedSuccess:\n      {\n        var _action$payload;\n\n        return { ...state,\n          computers: ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.computers) || []\n        };\n      }\n\n    case actionTypes.RequestStatic:\n      {\n        return { ...state,\n          statics: []\n        };\n      }\n\n    case actionTypes.StaticLoadedSuccess:\n      {\n        var _action$payload2;\n\n        return { ...state,\n          statics: ((_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.statics) || []\n        };\n      }\n\n    case actionTypes.ProxyLoadedSuccess:\n      {\n        var _action$payload3;\n\n        return { ...state,\n          proxies: ((_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.proxies) || []\n        };\n      }\n\n    case actionTypes.HistoryLoadedSuccess:\n      {\n        var _action$payload4;\n\n        return { ...state,\n          histories: ((_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : _action$payload4.histories) || [],\n          loading: false\n        };\n      }\n\n    case actionTypes.HistoryLoadedFail:\n      {\n        return { ...state,\n          histories: [],\n          loading: false\n        };\n      }\n\n    case actionTypes.ProxyLoadedFail:\n      {\n        return { ...state,\n          proxies: [],\n          loading: false\n        };\n      }\n\n    default:\n      return state;\n  }\n});\nexport const actions = {\n  requestHistories: user_id => ({\n    type: actionTypes.RequestHistories,\n    payload: {\n      user_id\n    }\n  }),\n  fulfillHistories: histories => ({\n    type: actionTypes.HistoryLoadedSuccess,\n    payload: {\n      histories\n    }\n  }),\n  fulfillProxy: proxies => ({\n    type: actionTypes.ProxyLoadedSuccess,\n    payload: {\n      proxies\n    }\n  }),\n  loadAccountsFail: message => ({\n    type: actionTypes.HistoryLoadedFail,\n    payload: {\n      message\n    }\n  }),\n  requestComputers: () => ({\n    type: actionTypes.RequestComputers\n  }),\n  requestProxies: () => ({\n    type: actionTypes.RequestProxy\n  }),\n  fulfillComputers: computers => ({\n    type: actionTypes.ComputersLoadedSuccess,\n    payload: {\n      computers\n    }\n  }),\n  requestStatics: user => ({\n    type: actionTypes.RequestStatic,\n    payload: {\n      user\n    }\n  }),\n  fulfillStatics: statics => ({\n    type: actionTypes.StaticLoadedSuccess,\n    payload: {\n      statics\n    }\n  })\n};\nexport function* saga() {\n  yield takeLatest(actionTypes.RequestHistories, function* userRequested(param) {\n    const {\n      data: resutl\n    } = yield getList();\n    console.log(resutl);\n    yield put(actions.fulfillHistories(resutl.histories));\n  });\n  yield takeLatest(actionTypes.RequestProxy, function* userRequested(param) {\n    const {\n      data: resutl\n    } = yield getProxy();\n    console.log(resutl);\n    yield put(actions.fulfillProxy(resutl.proxies));\n  });\n  yield takeLatest(actionTypes.RequestComputers, function* userRequested(param) {\n    const {\n      data: resutl\n    } = yield getComputer();\n    console.log(resutl);\n    yield put(actions.fulfillComputers(resutl.computers));\n  });\n  yield takeLatest(actionTypes.RequestStatic, function* userRequested(param) {\n    const payload = param.payload.user;\n    const {\n      data: resutl\n    } = yield getStatics(payload);\n    console.log(resutl);\n    yield put(actions.fulfillStatics(resutl.time7day));\n  });\n}","map":{"version":3,"names":["persistReducer","storage","put","takeLatest","getList","getComputer","getStatics","getProxy","actionTypes","RequestHistories","HistoryLoadedSuccess","HistoryLoadedFail","ProxyLoadedFail","RequestComputers","ComputersLoadedSuccess","ProxyLoadedSuccess","RequestStatic","RequestProxy","StaticLoadedSuccess","initialAccountState","histories","loading","computers","statics","proxies","reducer","key","whitelist","state","action","type","payload","actions","requestHistories","user_id","fulfillHistories","fulfillProxy","loadAccountsFail","message","requestComputers","requestProxies","fulfillComputers","requestStatics","user","fulfillStatics","saga","userRequested","param","data","resutl","console","log","time7day"],"sources":["C:/Users/KT2/OneDrive/Documents/Buffh/ssc.fe.cheatview-main/src/app/modules/history/redux/AccountRedux.ts"],"sourcesContent":["import { Action } from '@reduxjs/toolkit'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { put, takeLatest } from 'redux-saga/effects'\nimport {ComputerModel, HistoryModel, ChannelStaticModel, ProxyModel} from '../models/Account'\nimport { getList,getComputer,getStatics,getProxy} from './AccountCRUD'\nexport interface ActionWithPayload<T> extends Action {\n  payload?: T\n}\n\nexport const actionTypes = {\n  RequestHistories: '[Histories] Requested',\n  HistoryLoadedSuccess: '[Histories] Loaded succcess',\n  HistoryLoadedFail: '[Histories] load fail',\n  ProxyLoadedFail: '[Proxy] load fail',\n  RequestComputers: '[Computers] Requested',\n  ComputersLoadedSuccess: '[Computers] Loaded succcess',\n  ProxyLoadedSuccess: '[Proxy] Loaded succcess',\n  RequestStatic: '[Static] Requested',\n  RequestProxy: '[Proxy] Requested',\n  StaticLoadedSuccess: '[Static] Loaded succcess',\n}\n\n\nconst initialAccountState: IAccountState = {\n  histories: [],\n  loading: false,\n  computers:[],\n  statics:[],\n  proxies:[],\n}\n\nexport interface IAccountState {\n  histories: HistoryModel[]\n  loading: boolean\n  computers : ComputerModel[],\n  statics : ChannelStaticModel[]\n  proxies:ProxyModel[]\n}\n\nexport const reducer = persistReducer(\n  { storage, key: 'v1-histories', whitelist: [] },\n  (state: IAccountState = initialAccountState, action: ActionWithPayload<IAccountState>) => {\n    switch (action.type) {\n      case actionTypes.RequestHistories: {\n        return {\n          ...state,\n          histories: [],\n          loading: true\n        }\n      }\n      case actionTypes.RequestProxy: {\n        return {\n          ...state,\n          proxies: [],\n          loading: true\n        }\n      }\n      case actionTypes.RequestComputers: {\n        return {\n          ...state,\n          computers: []\n        }\n      }\n      case actionTypes.ComputersLoadedSuccess: {\n        return {\n          ...state,\n          computers: action.payload?.computers || [],\n        }\n      }\n      case actionTypes.RequestStatic: {\n        return {\n          ...state,\n          statics: []\n        }\n      }\n      case actionTypes.StaticLoadedSuccess: {\n        return {\n          ...state,\n          statics: action.payload?.statics || [],\n        }\n      }\n      case actionTypes.ProxyLoadedSuccess: {\n        return {\n          ...state,\n          proxies: action.payload?.proxies || [],\n        }\n      }\n\n      case actionTypes.HistoryLoadedSuccess: {\n        return {\n          ...state,\n          histories: action.payload?.histories || [],\n          loading: false\n        }\n      }\n      case actionTypes.HistoryLoadedFail: {\n        return {\n          ...state,\n          histories: [],\n          loading: false\n        }\n      }\n      case actionTypes.ProxyLoadedFail: {\n        return {\n          ...state,\n          proxies: [],\n          loading: false\n        }\n      }\n      default:\n        return state\n    }\n  }\n)\n\nexport const actions = {\n  requestHistories: (user_id: number) => ({ type: actionTypes.RequestHistories, payload: { user_id } }),\n  fulfillHistories: (histories: HistoryModel[]) => ({ type: actionTypes.HistoryLoadedSuccess, payload: { histories } }),\n  fulfillProxy: (proxies: ProxyModel[]) => ({ type: actionTypes.ProxyLoadedSuccess, payload: { proxies } }),\n  loadAccountsFail: (message: string) => ({ type: actionTypes.HistoryLoadedFail, payload: { message } }),\n  requestComputers: () => ({ type: actionTypes.RequestComputers}),\n  requestProxies: () => ({ type: actionTypes.RequestProxy}),\n  fulfillComputers: (computers: ComputerModel[]) => ({ type: actionTypes.ComputersLoadedSuccess, payload: { computers } }),\n  requestStatics: (user:string) => ({ type: actionTypes.RequestStatic,payload:{user}}),\n  fulfillStatics: (statics: ChannelStaticModel[]) => ({ type: actionTypes.StaticLoadedSuccess, payload: { statics } }),\n}\n\nexport function* saga() {\n  yield takeLatest(actionTypes.RequestHistories, function* userRequested(param: any) {\n    const {data: resutl} = yield getList()\n    console.log(resutl)\n    yield put(actions.fulfillHistories(resutl.histories))\n  })\n  yield takeLatest(actionTypes.RequestProxy, function* userRequested(param: any) {\n    const {data: resutl} = yield getProxy()\n    console.log(resutl)\n    yield put(actions.fulfillProxy(resutl.proxies))\n  })\n  yield takeLatest(actionTypes.RequestComputers, function* userRequested(param: any) {\n    const {data: resutl} = yield getComputer()\n    console.log(resutl)\n    yield put(actions.fulfillComputers(resutl.computers))\n  })\n  yield takeLatest(actionTypes.RequestStatic, function* userRequested(param: any) {\n    const payload = param.payload.user\n    const {data: resutl} = yield getStatics(payload)\n    console.log(resutl)\n    yield put(actions.fulfillStatics(resutl.time7day))\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}