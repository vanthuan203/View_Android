{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KT2\\\\Desktop\\\\ssc.fe.cheatview-main\\\\src\\\\_metronic\\\\i18n\\\\Metronici18n.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst I18N_CONFIG_KEY = process.env.REACT_APP_I18N_CONFIG_KEY || 'i18nConfig';\nconst initialState = {\n  selectedLang: 'en'\n};\n\nfunction getConfig() {\n  const ls = localStorage.getItem(I18N_CONFIG_KEY);\n\n  if (ls) {\n    try {\n      return JSON.parse(ls);\n    } catch (er) {\n      console.error(er);\n    }\n  }\n\n  return initialState;\n} // Side effect\n\n\nexport function setLanguage(lang) {\n  localStorage.setItem(I18N_CONFIG_KEY, JSON.stringify({\n    selectedLang: lang\n  }));\n  window.location.reload();\n}\nconst I18nContext = /*#__PURE__*/createContext(initialState);\n\nconst useLang = () => {\n  _s();\n\n  return useContext(I18nContext).selectedLang;\n};\n\n_s(useLang, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nconst MetronicI18nProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const lang = getConfig();\n  return /*#__PURE__*/_jsxDEV(I18nContext.Provider, {\n    value: lang,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 10\n  }, this);\n};\n\n_c = MetronicI18nProvider;\nexport { MetronicI18nProvider, useLang };\n\nvar _c;\n\n$RefreshReg$(_c, \"MetronicI18nProvider\");","map":{"version":3,"names":["React","createContext","useContext","I18N_CONFIG_KEY","process","env","REACT_APP_I18N_CONFIG_KEY","initialState","selectedLang","getConfig","ls","localStorage","getItem","JSON","parse","er","console","error","setLanguage","lang","setItem","stringify","window","location","reload","I18nContext","useLang","MetronicI18nProvider","children"],"sources":["C:/Users/KT2/Desktop/ssc.fe.cheatview-main/src/_metronic/i18n/Metronici18n.tsx"],"sourcesContent":["import React, {FC, createContext, useContext} from 'react'\n\nconst I18N_CONFIG_KEY = process.env.REACT_APP_I18N_CONFIG_KEY || 'i18nConfig'\n\ntype Props = {\n  selectedLang: 'de' | 'en' | 'es' | 'fr' | 'ja' | 'zh'\n}\nconst initialState: Props = {\n  selectedLang: 'en',\n}\n\nfunction getConfig(): Props {\n  const ls = localStorage.getItem(I18N_CONFIG_KEY)\n  if (ls) {\n    try {\n      return JSON.parse(ls) as Props\n    } catch (er) {\n      console.error(er)\n    }\n  }\n  return initialState\n}\n\n// Side effect\nexport function setLanguage(lang: string) {\n  localStorage.setItem(I18N_CONFIG_KEY, JSON.stringify({selectedLang: lang}))\n  window.location.reload()\n}\n\nconst I18nContext = createContext<Props>(initialState)\n\nconst useLang = () => {\n  return useContext(I18nContext).selectedLang\n}\n\nconst MetronicI18nProvider: FC = ({children}) => {\n  const lang = getConfig()\n  return <I18nContext.Provider value={lang}>{children}</I18nContext.Provider>\n}\n\nexport {MetronicI18nProvider, useLang}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAmBC,aAAnB,EAAkCC,UAAlC,QAAmD,OAAnD;;AAEA,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAAZ,IAAyC,YAAjE;AAKA,MAAMC,YAAmB,GAAG;EAC1BC,YAAY,EAAE;AADY,CAA5B;;AAIA,SAASC,SAAT,GAA4B;EAC1B,MAAMC,EAAE,GAAGC,YAAY,CAACC,OAAb,CAAqBT,eAArB,CAAX;;EACA,IAAIO,EAAJ,EAAQ;IACN,IAAI;MACF,OAAOG,IAAI,CAACC,KAAL,CAAWJ,EAAX,CAAP;IACD,CAFD,CAEE,OAAOK,EAAP,EAAW;MACXC,OAAO,CAACC,KAAR,CAAcF,EAAd;IACD;EACF;;EACD,OAAOR,YAAP;AACD,C,CAED;;;AACA,OAAO,SAASW,WAAT,CAAqBC,IAArB,EAAmC;EACxCR,YAAY,CAACS,OAAb,CAAqBjB,eAArB,EAAsCU,IAAI,CAACQ,SAAL,CAAe;IAACb,YAAY,EAAEW;EAAf,CAAf,CAAtC;EACAG,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;AAED,MAAMC,WAAW,gBAAGxB,aAAa,CAAQM,YAAR,CAAjC;;AAEA,MAAMmB,OAAO,GAAG,MAAM;EAAA;;EACpB,OAAOxB,UAAU,CAACuB,WAAD,CAAV,CAAwBjB,YAA/B;AACD,CAFD;;GAAMkB,O;;AAIN,MAAMC,oBAAwB,GAAG,QAAgB;EAAA,IAAf;IAACC;EAAD,CAAe;EAC/C,MAAMT,IAAI,GAAGV,SAAS,EAAtB;EACA,oBAAO,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEU,IAA7B;IAAA,UAAoCS;EAApC;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAHD;;KAAMD,oB;AAKN,SAAQA,oBAAR,EAA8BD,OAA9B"},"metadata":{},"sourceType":"module"}