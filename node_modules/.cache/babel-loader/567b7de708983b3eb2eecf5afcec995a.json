{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose'; // Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\nvar now = hasNativePerformanceNow ? function () {\n  return performance.now();\n} : function () {\n  return Date.now();\n};\n\nfunction cancelTimeout(timeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nfunction requestTimeout(callback, delay) {\n  var start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  var timeoutID = {\n    id: requestAnimationFrame(tick)\n  };\n  return timeoutID;\n}\n\nvar size = -1; // This utility copied from \"dom-helpers\" package.\n\nfunction getScrollbarSize(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n\n  if (size === -1 || recalculate) {\n    var div = document.createElement('div');\n    var style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n    document.body.appendChild(div);\n    size = div.offsetWidth - div.clientWidth;\n    document.body.removeChild(div);\n  }\n\n  return size;\n}\n\nvar cachedRTLResult = null; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\n\nfunction getRTLOffsetType(recalculate) {\n  if (recalculate === void 0) {\n    recalculate = false;\n  }\n\n  if (cachedRTLResult === null || recalculate) {\n    var outerDiv = document.createElement('div');\n    var outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n    var innerDiv = document.createElement('div');\n    var innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n    outerDiv.appendChild(innerDiv);\n    document.body.appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    document.body.removeChild(outerDiv);\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n\nvar IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nvar defaultItemKey = function defaultItemKey(_ref) {\n  var columnIndex = _ref.columnIndex,\n      data = _ref.data,\n      rowIndex = _ref.rowIndex;\n  return rowIndex + \":\" + columnIndex;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\n\nvar devWarningsOverscanCount = null;\nvar devWarningsOverscanRowsColumnsCount = null;\nvar devWarningsTagName = null;\n\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = /*#__PURE__*/new WeakSet();\n    devWarningsOverscanRowsColumnsCount = /*#__PURE__*/new WeakSet();\n    devWarningsTagName = /*#__PURE__*/new WeakSet();\n  }\n}\n\nfunction createGridComponent(_ref2) {\n  var _class;\n\n  var getColumnOffset = _ref2.getColumnOffset,\n      getColumnStartIndexForOffset = _ref2.getColumnStartIndexForOffset,\n      getColumnStopIndexForStartIndex = _ref2.getColumnStopIndexForStartIndex,\n      getColumnWidth = _ref2.getColumnWidth,\n      getEstimatedTotalHeight = _ref2.getEstimatedTotalHeight,\n      getEstimatedTotalWidth = _ref2.getEstimatedTotalWidth,\n      getOffsetForColumnAndAlignment = _ref2.getOffsetForColumnAndAlignment,\n      getOffsetForRowAndAlignment = _ref2.getOffsetForRowAndAlignment,\n      getRowHeight = _ref2.getRowHeight,\n      getRowOffset = _ref2.getRowOffset,\n      getRowStartIndexForOffset = _ref2.getRowStartIndexForOffset,\n      getRowStopIndexForStartIndex = _ref2.getRowStopIndexForStartIndex,\n      initInstanceProps = _ref2.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref2.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref2.validateProps;\n  return _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(Grid, _PureComponent); // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n\n\n    function Grid(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));\n      _this._resetIsScrollingTimeoutId = null;\n      _this._outerRef = void 0;\n      _this.state = {\n        instance: _assertThisInitialized(_this),\n        isScrolling: false,\n        horizontalScrollDirection: 'forward',\n        scrollLeft: typeof _this.props.initialScrollLeft === 'number' ? _this.props.initialScrollLeft : 0,\n        scrollTop: typeof _this.props.initialScrollTop === 'number' ? _this.props.initialScrollTop : 0,\n        scrollUpdateWasRequested: false,\n        verticalScrollDirection: 'forward'\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanColumnStartIndex, overscanColumnStopIndex, overscanRowStartIndex, overscanRowStopIndex, visibleColumnStartIndex, visibleColumnStopIndex, visibleRowStartIndex, visibleRowStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanColumnStartIndex: overscanColumnStartIndex,\n          overscanColumnStopIndex: overscanColumnStopIndex,\n          overscanRowStartIndex: overscanRowStartIndex,\n          overscanRowStopIndex: overscanRowStopIndex,\n          visibleColumnStartIndex: visibleColumnStartIndex,\n          visibleColumnStopIndex: visibleColumnStopIndex,\n          visibleRowStartIndex: visibleRowStartIndex,\n          visibleRowStopIndex: visibleRowStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          horizontalScrollDirection: horizontalScrollDirection,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          verticalScrollDirection: verticalScrollDirection,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (rowIndex, columnIndex) {\n        var _this$props = _this.props,\n            columnWidth = _this$props.columnWidth,\n            direction = _this$props.direction,\n            rowHeight = _this$props.rowHeight;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && columnWidth, shouldResetStyleCacheOnItemSizeChange && direction, shouldResetStyleCacheOnItemSizeChange && rowHeight);\n\n        var key = rowIndex + \":\" + columnIndex;\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(key)) {\n          style = itemStyleCache[key];\n        } else {\n          var _offset = getColumnOffset(_this.props, columnIndex, _this._instanceProps);\n\n          var isRtl = direction === 'rtl';\n          itemStyleCache[key] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : _offset,\n            right: isRtl ? _offset : undefined,\n            top: getRowOffset(_this.props, rowIndex, _this._instanceProps),\n            height: getRowHeight(_this.props, rowIndex, _this._instanceProps),\n            width: getColumnWidth(_this.props, columnIndex, _this._instanceProps)\n          };\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n\n      _this._onScroll = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            clientHeight = _event$currentTarget.clientHeight,\n            clientWidth = _event$currentTarget.clientWidth,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollTop = _event$currentTarget.scrollTop,\n            scrollHeight = _event$currentTarget.scrollHeight,\n            scrollWidth = _event$currentTarget.scrollWidth;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          var direction = _this.props.direction; // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n\n          var calculatedScrollLeft = scrollLeft;\n\n          if (direction === 'rtl') {\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                calculatedScrollLeft = -scrollLeft;\n                break;\n\n              case 'positive-descending':\n                calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          calculatedScrollLeft = Math.max(0, Math.min(calculatedScrollLeft, scrollWidth - clientWidth));\n          var calculatedScrollTop = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n            scrollLeft: calculatedScrollLeft,\n            scrollTop: calculatedScrollTop,\n            verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1);\n        });\n      };\n\n      return _this;\n    }\n\n    Grid.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = Grid.prototype;\n\n    _proto.scrollTo = function scrollTo(_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n          scrollTop = _ref3.scrollTop;\n\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(function (prevState) {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (prevState.scrollLeft === scrollLeft && prevState.scrollTop === scrollTop) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection: prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection: prevState.scrollTop < scrollTop ? 'forward' : 'backward'\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(_ref4) {\n      var _ref4$align = _ref4.align,\n          align = _ref4$align === void 0 ? 'auto' : _ref4$align,\n          columnIndex = _ref4.columnIndex,\n          rowIndex = _ref4.rowIndex;\n      var _this$props2 = this.props,\n          columnCount = _this$props2.columnCount,\n          height = _this$props2.height,\n          rowCount = _this$props2.rowCount,\n          width = _this$props2.width;\n      var _this$state = this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollTop = _this$state.scrollTop;\n      var scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps); // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n\n      var horizontalScrollbarSize = estimatedTotalWidth > width ? scrollbarSize : 0;\n      var verticalScrollbarSize = estimatedTotalHeight > height ? scrollbarSize : 0;\n      this.scrollTo({\n        scrollLeft: columnIndex !== undefined ? getOffsetForColumnAndAlignment(this.props, columnIndex, align, scrollLeft, this._instanceProps, verticalScrollbarSize) : scrollLeft,\n        scrollTop: rowIndex !== undefined ? getOffsetForRowAndAlignment(this.props, rowIndex, align, scrollTop, this._instanceProps, horizontalScrollbarSize) : scrollTop\n      });\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n          initialScrollLeft = _this$props3.initialScrollLeft,\n          initialScrollTop = _this$props3.initialScrollTop;\n\n      if (this._outerRef != null) {\n        var outerRef = this._outerRef;\n\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var direction = this.props.direction;\n      var _this$state2 = this.state,\n          scrollLeft = _this$state2.scrollLeft,\n          scrollTop = _this$state2.scrollTop,\n          scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        var outerRef = this._outerRef;\n\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n\n            default:\n              var clientWidth = outerRef.clientWidth,\n                  scrollWidth = outerRef.scrollWidth;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          className = _this$props4.className,\n          columnCount = _this$props4.columnCount,\n          direction = _this$props4.direction,\n          height = _this$props4.height,\n          innerRef = _this$props4.innerRef,\n          innerElementType = _this$props4.innerElementType,\n          innerTagName = _this$props4.innerTagName,\n          itemData = _this$props4.itemData,\n          _this$props4$itemKey = _this$props4.itemKey,\n          itemKey = _this$props4$itemKey === void 0 ? defaultItemKey : _this$props4$itemKey,\n          outerElementType = _this$props4.outerElementType,\n          outerTagName = _this$props4.outerTagName,\n          rowCount = _this$props4.rowCount,\n          style = _this$props4.style,\n          useIsScrolling = _this$props4.useIsScrolling,\n          width = _this$props4.width;\n      var isScrolling = this.state.isScrolling;\n\n      var _this$_getHorizontalR = this._getHorizontalRangeToRender(),\n          columnStartIndex = _this$_getHorizontalR[0],\n          columnStopIndex = _this$_getHorizontalR[1];\n\n      var _this$_getVerticalRan = this._getVerticalRangeToRender(),\n          rowStartIndex = _this$_getVerticalRan[0],\n          rowStopIndex = _this$_getVerticalRan[1];\n\n      var items = [];\n\n      if (columnCount > 0 && rowCount) {\n        for (var _rowIndex = rowStartIndex; _rowIndex <= rowStopIndex; _rowIndex++) {\n          for (var _columnIndex = columnStartIndex; _columnIndex <= columnStopIndex; _columnIndex++) {\n            items.push(createElement(children, {\n              columnIndex: _columnIndex,\n              data: itemData,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              key: itemKey({\n                columnIndex: _columnIndex,\n                data: itemData,\n                rowIndex: _rowIndex\n              }),\n              rowIndex: _rowIndex,\n              style: this._getItemStyle(_rowIndex, _columnIndex)\n            }));\n          }\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalHeight = getEstimatedTotalHeight(this.props, this._instanceProps);\n      var estimatedTotalWidth = getEstimatedTotalWidth(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: this._onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: estimatedTotalHeight,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: estimatedTotalWidth\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      var _this$props5 = this.props,\n          columnCount = _this$props5.columnCount,\n          onItemsRendered = _this$props5.onItemsRendered,\n          onScroll = _this$props5.onScroll,\n          rowCount = _this$props5.rowCount;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          var _this$_getHorizontalR2 = this._getHorizontalRangeToRender(),\n              _overscanColumnStartIndex = _this$_getHorizontalR2[0],\n              _overscanColumnStopIndex = _this$_getHorizontalR2[1],\n              _visibleColumnStartIndex = _this$_getHorizontalR2[2],\n              _visibleColumnStopIndex = _this$_getHorizontalR2[3];\n\n          var _this$_getVerticalRan2 = this._getVerticalRangeToRender(),\n              _overscanRowStartIndex = _this$_getVerticalRan2[0],\n              _overscanRowStopIndex = _this$_getVerticalRan2[1],\n              _visibleRowStartIndex = _this$_getVerticalRan2[2],\n              _visibleRowStopIndex = _this$_getVerticalRan2[3];\n\n          this._callOnItemsRendered(_overscanColumnStartIndex, _overscanColumnStopIndex, _overscanRowStartIndex, _overscanRowStopIndex, _visibleColumnStartIndex, _visibleColumnStopIndex, _visibleRowStartIndex, _visibleRowStopIndex);\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        var _this$state3 = this.state,\n            _horizontalScrollDirection = _this$state3.horizontalScrollDirection,\n            _scrollLeft = _this$state3.scrollLeft,\n            _scrollTop = _this$state3.scrollTop,\n            _scrollUpdateWasRequested = _this$state3.scrollUpdateWasRequested,\n            _verticalScrollDirection = _this$state3.verticalScrollDirection;\n\n        this._callOnScroll(_scrollLeft, _scrollTop, _horizontalScrollDirection, _verticalScrollDirection, _scrollUpdateWasRequested);\n      }\n    } // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    ;\n\n    _proto._getHorizontalRangeToRender = function _getHorizontalRangeToRender() {\n      var _this$props6 = this.props,\n          columnCount = _this$props6.columnCount,\n          overscanColumnCount = _this$props6.overscanColumnCount,\n          overscanColumnsCount = _this$props6.overscanColumnsCount,\n          overscanCount = _this$props6.overscanCount,\n          rowCount = _this$props6.rowCount;\n      var _this$state4 = this.state,\n          horizontalScrollDirection = _this$state4.horizontalScrollDirection,\n          isScrolling = _this$state4.isScrolling,\n          scrollLeft = _this$state4.scrollLeft;\n      var overscanCountResolved = overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getColumnStartIndexForOffset(this.props, scrollLeft, this._instanceProps);\n      var stopIndex = getColumnStopIndexForStartIndex(this.props, startIndex, scrollLeft, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || horizontalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || horizontalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    _proto._getVerticalRangeToRender = function _getVerticalRangeToRender() {\n      var _this$props7 = this.props,\n          columnCount = _this$props7.columnCount,\n          overscanCount = _this$props7.overscanCount,\n          overscanRowCount = _this$props7.overscanRowCount,\n          overscanRowsCount = _this$props7.overscanRowsCount,\n          rowCount = _this$props7.rowCount;\n      var _this$state5 = this.state,\n          isScrolling = _this$state5.isScrolling,\n          verticalScrollDirection = _this$state5.verticalScrollDirection,\n          scrollTop = _this$state5.scrollTop;\n      var overscanCountResolved = overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getRowStartIndexForOffset(this.props, scrollTop, this._instanceProps);\n      var stopIndex = getRowStopIndexForStartIndex(this.props, startIndex, scrollTop, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || verticalScrollDirection === 'backward' ? Math.max(1, overscanCountResolved) : 1;\n      var overscanForward = !isScrolling || verticalScrollDirection === 'forward' ? Math.max(1, overscanCountResolved) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return Grid;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    useIsScrolling: false\n  }, _class;\n}\n\nvar validateSharedProps = function validateSharedProps(_ref5, _ref6) {\n  var children = _ref5.children,\n      direction = _ref5.direction,\n      height = _ref5.height,\n      innerTagName = _ref5.innerTagName,\n      outerTagName = _ref5.outerTagName,\n      overscanColumnsCount = _ref5.overscanColumnsCount,\n      overscanCount = _ref5.overscanCount,\n      overscanRowsCount = _ref5.overscanRowsCount,\n      width = _ref5.width;\n  var instance = _ref6.instance;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn('The overscanCount prop has been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n\n    if (typeof overscanColumnsCount === 'number' || typeof overscanRowsCount === 'number') {\n      if (devWarningsOverscanRowsColumnsCount && !devWarningsOverscanRowsColumnsCount.has(instance)) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn('The overscanColumnsCount and overscanRowsCount props have been deprecated. ' + 'Please use the overscanColumnCount and overscanRowCount props instead.');\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    if (typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Grids must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    }\n\n    if (typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Grids must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\nvar getEstimatedTotalHeight = function getEstimatedTotalHeight(_ref, _ref2) {\n  var rowCount = _ref.rowCount;\n  var rowMetadataMap = _ref2.rowMetadataMap,\n      estimatedRowHeight = _ref2.estimatedRowHeight,\n      lastMeasuredRowIndex = _ref2.lastMeasuredRowIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    var itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getEstimatedTotalWidth = function getEstimatedTotalWidth(_ref3, _ref4) {\n  var columnCount = _ref3.columnCount;\n  var columnMetadataMap = _ref4.columnMetadataMap,\n      estimatedColumnWidth = _ref4.estimatedColumnWidth,\n      lastMeasuredColumnIndex = _ref4.lastMeasuredColumnIndex;\n  var totalSizeOfMeasuredRows = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    var itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nvar getItemMetadata = function getItemMetadata(itemType, props, index, instanceProps) {\n  var itemMetadataMap, itemSize, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = props.columnWidth;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = props.rowHeight;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem = function findNearestItem(itemType, props, instanceProps, offset) {\n  var itemMetadataMap, lastMeasuredIndex;\n\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(itemType, props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(itemType, props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch = function findNearestItemBinarySearch(itemType, props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata(itemType, props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch = function findNearestItemExponentialSearch(itemType, props, instanceProps, index, offset) {\n  var itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata(itemType, props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(itemType, props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getOffsetForIndexAndAlignment = function getOffsetForIndexAndAlignment(itemType, props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n  var size = itemType === 'column' ? props.width : props.height;\n  var itemMetadata = getItemMetadata(itemType, props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n\n  var estimatedTotalSize = itemType === 'column' ? getEstimatedTotalWidth(props, instanceProps) : getEstimatedTotalHeight(props, instanceProps);\n  var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n  var minOffset = Math.max(0, itemMetadata.offset - size + scrollbarSize + itemMetadata.size);\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n\n    case 'end':\n      return minOffset;\n\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n\n  }\n};\n\nvar VariableSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(props, index, instanceProps) {\n    return getItemMetadata('column', props, index, instanceProps).offset;\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(props, scrollLeft, instanceProps) {\n    return findNearestItem('column', props, instanceProps, scrollLeft);\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, instanceProps) {\n    var columnCount = props.columnCount,\n        width = props.width;\n    var itemMetadata = getItemMetadata('column', props, startIndex, instanceProps);\n    var maxOffset = scrollLeft + width;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  getColumnWidth: function getColumnWidth(props, index, instanceProps) {\n    return instanceProps.columnMetadataMap[index].size;\n  },\n  getEstimatedTotalHeight: getEstimatedTotalHeight,\n  getEstimatedTotalWidth: getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('column', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    return getOffsetForIndexAndAlignment('row', props, index, align, scrollOffset, instanceProps, scrollbarSize);\n  },\n  getRowOffset: function getRowOffset(props, index, instanceProps) {\n    return getItemMetadata('row', props, index, instanceProps).offset;\n  },\n  getRowHeight: function getRowHeight(props, index, instanceProps) {\n    return instanceProps.rowMetadataMap[index].size;\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(props, scrollTop, instanceProps) {\n    return findNearestItem('row', props, instanceProps, scrollTop);\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(props, startIndex, scrollTop, instanceProps) {\n    var rowCount = props.rowCount,\n        height = props.height;\n    var itemMetadata = getItemMetadata('row', props, startIndex, instanceProps);\n    var maxOffset = scrollTop + height;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref5 = props,\n        estimatedColumnWidth = _ref5.estimatedColumnWidth,\n        estimatedRowHeight = _ref5.estimatedRowHeight;\n    var instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {}\n    };\n\n    instance.resetAfterColumnIndex = function (columnIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        columnIndex: columnIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterRowIndex = function (rowIndex, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instance.resetAfterIndices({\n        rowIndex: rowIndex,\n        shouldForceUpdate: shouldForceUpdate\n      });\n    };\n\n    instance.resetAfterIndices = function (_ref6) {\n      var columnIndex = _ref6.columnIndex,\n          rowIndex = _ref6.rowIndex,\n          _ref6$shouldForceUpda = _ref6.shouldForceUpdate,\n          shouldForceUpdate = _ref6$shouldForceUpda === void 0 ? true : _ref6$shouldForceUpda;\n\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(instanceProps.lastMeasuredColumnIndex, columnIndex - 1);\n      }\n\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(instanceProps.lastMeasuredRowIndex, rowIndex - 1);\n      } // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref7) {\n    var columnWidth = _ref7.columnWidth,\n        rowHeight = _ref7.rowHeight;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      } else if (typeof rowHeight !== 'function') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;\n\nvar defaultItemKey$1 = function defaultItemKey(index, data) {\n  return index;\n}; // In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\n\n\nvar devWarningsDirection = null;\nvar devWarningsTagName$1 = null;\n\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = /*#__PURE__*/new WeakSet();\n    devWarningsTagName$1 = /*#__PURE__*/new WeakSet();\n  }\n}\n\nfunction createListComponent(_ref) {\n  var _class;\n\n  var getItemOffset = _ref.getItemOffset,\n      getEstimatedTotalSize = _ref.getEstimatedTotalSize,\n      getItemSize = _ref.getItemSize,\n      getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment,\n      getStartIndexForOffset = _ref.getStartIndexForOffset,\n      getStopIndexForStartIndex = _ref.getStopIndexForStartIndex,\n      initInstanceProps = _ref.initInstanceProps,\n      shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange,\n      validateProps = _ref.validateProps;\n  return _class = /*#__PURE__*/function (_PureComponent) {\n    _inheritsLoose(List, _PureComponent); // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n\n\n    function List(props) {\n      var _this;\n\n      _this = _PureComponent.call(this, props) || this;\n      _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));\n      _this._outerRef = void 0;\n      _this._resetIsScrollingTimeoutId = null;\n      _this.state = {\n        instance: _assertThisInitialized(_this),\n        isScrolling: false,\n        scrollDirection: 'forward',\n        scrollOffset: typeof _this.props.initialScrollOffset === 'number' ? _this.props.initialScrollOffset : 0,\n        scrollUpdateWasRequested: false\n      };\n      _this._callOnItemsRendered = void 0;\n      _this._callOnItemsRendered = memoizeOne(function (overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {\n        return _this.props.onItemsRendered({\n          overscanStartIndex: overscanStartIndex,\n          overscanStopIndex: overscanStopIndex,\n          visibleStartIndex: visibleStartIndex,\n          visibleStopIndex: visibleStopIndex\n        });\n      });\n      _this._callOnScroll = void 0;\n      _this._callOnScroll = memoizeOne(function (scrollDirection, scrollOffset, scrollUpdateWasRequested) {\n        return _this.props.onScroll({\n          scrollDirection: scrollDirection,\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: scrollUpdateWasRequested\n        });\n      });\n      _this._getItemStyle = void 0;\n\n      _this._getItemStyle = function (index) {\n        var _this$props = _this.props,\n            direction = _this$props.direction,\n            itemSize = _this$props.itemSize,\n            layout = _this$props.layout;\n\n        var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);\n\n        var style;\n\n        if (itemStyleCache.hasOwnProperty(index)) {\n          style = itemStyleCache[index];\n        } else {\n          var _offset = getItemOffset(_this.props, index, _this._instanceProps);\n\n          var size = getItemSize(_this.props, index, _this._instanceProps); // TODO Deprecate direction \"horizontal\"\n\n          var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n          var isRtl = direction === 'rtl';\n          var offsetHorizontal = isHorizontal ? _offset : 0;\n          itemStyleCache[index] = style = {\n            position: 'absolute',\n            left: isRtl ? undefined : offsetHorizontal,\n            right: isRtl ? offsetHorizontal : undefined,\n            top: !isHorizontal ? _offset : 0,\n            height: !isHorizontal ? size : '100%',\n            width: isHorizontal ? size : '100%'\n          };\n        }\n\n        return style;\n      };\n\n      _this._getItemStyleCache = void 0;\n      _this._getItemStyleCache = memoizeOne(function (_, __, ___) {\n        return {};\n      });\n\n      _this._onScrollHorizontal = function (event) {\n        var _event$currentTarget = event.currentTarget,\n            clientWidth = _event$currentTarget.clientWidth,\n            scrollLeft = _event$currentTarget.scrollLeft,\n            scrollWidth = _event$currentTarget.scrollWidth;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollLeft) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          }\n\n          var direction = _this.props.direction;\n          var scrollOffset = scrollLeft;\n\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n            // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                scrollOffset = -scrollLeft;\n                break;\n\n              case 'positive-descending':\n                scrollOffset = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._onScrollVertical = function (event) {\n        var _event$currentTarget2 = event.currentTarget,\n            clientHeight = _event$currentTarget2.clientHeight,\n            scrollHeight = _event$currentTarget2.scrollHeight,\n            scrollTop = _event$currentTarget2.scrollTop;\n\n        _this.setState(function (prevState) {\n          if (prevState.scrollOffset === scrollTop) {\n            // Scroll position may have been updated by cDM/cDU,\n            // In which case we don't need to trigger another render,\n            // And we don't want to update state.isScrolling.\n            return null;\n          } // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n\n\n          var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));\n          return {\n            isScrolling: true,\n            scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n            scrollOffset: scrollOffset,\n            scrollUpdateWasRequested: false\n          };\n        }, _this._resetIsScrollingDebounced);\n      };\n\n      _this._outerRefSetter = function (ref) {\n        var outerRef = _this.props.outerRef;\n        _this._outerRef = ref;\n\n        if (typeof outerRef === 'function') {\n          outerRef(ref);\n        } else if (outerRef != null && typeof outerRef === 'object' && outerRef.hasOwnProperty('current')) {\n          outerRef.current = ref;\n        }\n      };\n\n      _this._resetIsScrollingDebounced = function () {\n        if (_this._resetIsScrollingTimeoutId !== null) {\n          cancelTimeout(_this._resetIsScrollingTimeoutId);\n        }\n\n        _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);\n      };\n\n      _this._resetIsScrolling = function () {\n        _this._resetIsScrollingTimeoutId = null;\n\n        _this.setState({\n          isScrolling: false\n        }, function () {\n          // Clear style cache after state update has been committed.\n          // This way we don't break pure sCU for items that don't use isScrolling param.\n          _this._getItemStyleCache(-1, null);\n        });\n      };\n\n      return _this;\n    }\n\n    List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      validateSharedProps$1(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    };\n\n    var _proto = List.prototype;\n\n    _proto.scrollTo = function scrollTo(scrollOffset) {\n      scrollOffset = Math.max(0, scrollOffset);\n      this.setState(function (prevState) {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n\n        return {\n          scrollDirection: prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _proto.scrollToItem = function scrollToItem(index, align) {\n      if (align === void 0) {\n        align = 'auto';\n      }\n\n      var _this$props2 = this.props,\n          itemCount = _this$props2.itemCount,\n          layout = _this$props2.layout;\n      var scrollOffset = this.state.scrollOffset;\n      index = Math.max(0, Math.min(index, itemCount - 1)); // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\n\n      var scrollbarSize = 0;\n\n      if (this._outerRef) {\n        var outerRef = this._outerRef;\n\n        if (layout === 'vertical') {\n          scrollbarSize = outerRef.scrollWidth > outerRef.clientWidth ? getScrollbarSize() : 0;\n        } else {\n          scrollbarSize = outerRef.scrollHeight > outerRef.clientHeight ? getScrollbarSize() : 0;\n        }\n      }\n\n      this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps, scrollbarSize));\n    };\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this$props3 = this.props,\n          direction = _this$props3.direction,\n          initialScrollOffset = _this$props3.initialScrollOffset,\n          layout = _this$props3.layout;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate() {\n      var _this$props4 = this.props,\n          direction = _this$props4.direction,\n          layout = _this$props4.layout;\n      var _this$state = this.state,\n          scrollOffset = _this$state.scrollOffset,\n          scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        var outerRef = this._outerRef; // TODO Deprecate direction \"horizontal\"\n\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n\n              default:\n                var clientWidth = outerRef.clientWidth,\n                    scrollWidth = outerRef.scrollWidth;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    };\n\n    _proto.render = function render() {\n      var _this$props5 = this.props,\n          children = _this$props5.children,\n          className = _this$props5.className,\n          direction = _this$props5.direction,\n          height = _this$props5.height,\n          innerRef = _this$props5.innerRef,\n          innerElementType = _this$props5.innerElementType,\n          innerTagName = _this$props5.innerTagName,\n          itemCount = _this$props5.itemCount,\n          itemData = _this$props5.itemData,\n          _this$props5$itemKey = _this$props5.itemKey,\n          itemKey = _this$props5$itemKey === void 0 ? defaultItemKey$1 : _this$props5$itemKey,\n          layout = _this$props5.layout,\n          outerElementType = _this$props5.outerElementType,\n          outerTagName = _this$props5.outerTagName,\n          style = _this$props5.style,\n          useIsScrolling = _this$props5.useIsScrolling,\n          width = _this$props5.width;\n      var isScrolling = this.state.isScrolling; // TODO Deprecate direction \"horizontal\"\n\n      var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n      var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;\n\n      var _this$_getRangeToRend = this._getRangeToRender(),\n          startIndex = _this$_getRangeToRend[0],\n          stopIndex = _this$_getRangeToRend[1];\n\n      var items = [];\n\n      if (itemCount > 0) {\n        for (var _index = startIndex; _index <= stopIndex; _index++) {\n          items.push(createElement(children, {\n            data: itemData,\n            key: itemKey(_index, itemData),\n            index: _index,\n            isScrolling: useIsScrolling ? isScrolling : undefined,\n            style: this._getItemStyle(_index)\n          }));\n        }\n      } // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n\n\n      var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);\n      return createElement(outerElementType || outerTagName || 'div', {\n        className: className,\n        onScroll: onScroll,\n        ref: this._outerRefSetter,\n        style: _extends({\n          position: 'relative',\n          height: height,\n          width: width,\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n          direction: direction\n        }, style)\n      }, createElement(innerElementType || innerTagName || 'div', {\n        children: items,\n        ref: innerRef,\n        style: {\n          height: isHorizontal ? '100%' : estimatedTotalSize,\n          pointerEvents: isScrolling ? 'none' : undefined,\n          width: isHorizontal ? estimatedTotalSize : '100%'\n        }\n      }));\n    };\n\n    _proto._callPropsCallbacks = function _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        var itemCount = this.props.itemCount;\n\n        if (itemCount > 0) {\n          var _this$_getRangeToRend2 = this._getRangeToRender(),\n              _overscanStartIndex = _this$_getRangeToRend2[0],\n              _overscanStopIndex = _this$_getRangeToRend2[1],\n              _visibleStartIndex = _this$_getRangeToRend2[2],\n              _visibleStopIndex = _this$_getRangeToRend2[3];\n\n          this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        var _this$state2 = this.state,\n            _scrollDirection = _this$state2.scrollDirection,\n            _scrollOffset = _this$state2.scrollOffset,\n            _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;\n\n        this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);\n      }\n    } // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    ;\n\n    _proto._getRangeToRender = function _getRangeToRender() {\n      var _this$props6 = this.props,\n          itemCount = _this$props6.itemCount,\n          overscanCount = _this$props6.overscanCount;\n      var _this$state3 = this.state,\n          isScrolling = _this$state3.isScrolling,\n          scrollDirection = _this$state3.scrollDirection,\n          scrollOffset = _this$state3.scrollOffset;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);\n      var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps); // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n\n      var overscanBackward = !isScrolling || scrollDirection === 'backward' ? Math.max(1, overscanCount) : 1;\n      var overscanForward = !isScrolling || scrollDirection === 'forward' ? Math.max(1, overscanCount) : 1;\n      return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];\n    };\n\n    return List;\n  }(PureComponent), _class.defaultProps = {\n    direction: 'ltr',\n    itemData: undefined,\n    layout: 'vertical',\n    overscanCount: 2,\n    useIsScrolling: false\n  }, _class;\n} // NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\n\nvar validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {\n  var children = _ref2.children,\n      direction = _ref2.direction,\n      height = _ref2.height,\n      layout = _ref2.layout,\n      innerTagName = _ref2.innerTagName,\n      outerTagName = _ref2.outerTagName,\n      width = _ref2.width;\n  var instance = _ref3.instance;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {\n        devWarningsTagName$1.add(instance);\n        console.warn('The innerTagName and outerTagName props have been deprecated. ' + 'Please use the innerElementType and outerElementType props instead.');\n      }\n    } // TODO Deprecate direction \"horizontal\"\n\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn('The direction prop should be either \"ltr\" (default) or \"rtl\". ' + 'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.');\n        }\n\n        break;\n\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"direction\" prop has been specified. ' + 'Value should be either \"ltr\" or \"rtl\". ' + (\"\\\"\" + direction + \"\\\" was specified.\"));\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n\n      default:\n        throw Error('An invalid \"layout\" prop has been specified. ' + 'Value should be either \"horizontal\" or \"vertical\". ' + (\"\\\"\" + layout + \"\\\" was specified.\"));\n    }\n\n    if (children == null) {\n      throw Error('An invalid \"children\" prop has been specified. ' + 'Value should be a React component. ' + (\"\\\"\" + (children === null ? 'null' : typeof children) + \"\\\" was specified.\"));\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error('An invalid \"width\" prop has been specified. ' + 'Horizontal lists must specify a number for width. ' + (\"\\\"\" + (width === null ? 'null' : typeof width) + \"\\\" was specified.\"));\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error('An invalid \"height\" prop has been specified. ' + 'Vertical lists must specify a number for height. ' + (\"\\\"\" + (height === null ? 'null' : typeof height) + \"\\\" was specified.\"));\n    }\n  }\n};\n\nvar DEFAULT_ESTIMATED_ITEM_SIZE$1 = 50;\n\nvar getItemMetadata$1 = function getItemMetadata(props, index, instanceProps) {\n  var _ref = props,\n      itemSize = _ref.itemSize;\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n\n  if (index > lastMeasuredIndex) {\n    var offset = 0;\n\n    if (lastMeasuredIndex >= 0) {\n      var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (var i = lastMeasuredIndex + 1; i <= index; i++) {\n      var size = itemSize(i);\n      itemMetadataMap[i] = {\n        offset: offset,\n        size: size\n      };\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nvar findNearestItem$1 = function findNearestItem(props, instanceProps, offset) {\n  var itemMetadataMap = instanceProps.itemMetadataMap,\n      lastMeasuredIndex = instanceProps.lastMeasuredIndex;\n  var lastMeasuredItemOffset = lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch$1(props, instanceProps, lastMeasuredIndex, 0, offset);\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch$1(props, instanceProps, Math.max(0, lastMeasuredIndex), offset);\n  }\n};\n\nvar findNearestItemBinarySearch$1 = function findNearestItemBinarySearch(props, instanceProps, high, low, offset) {\n  while (low <= high) {\n    var middle = low + Math.floor((high - low) / 2);\n    var currentOffset = getItemMetadata$1(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nvar findNearestItemExponentialSearch$1 = function findNearestItemExponentialSearch(props, instanceProps, index, offset) {\n  var itemCount = props.itemCount;\n  var interval = 1;\n\n  while (index < itemCount && getItemMetadata$1(props, index, instanceProps).offset < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch$1(props, instanceProps, Math.min(index, itemCount - 1), Math.floor(index / 2), offset);\n};\n\nvar getEstimatedTotalSize = function getEstimatedTotalSize(_ref2, _ref3) {\n  var itemCount = _ref2.itemCount;\n  var itemMetadataMap = _ref3.itemMetadataMap,\n      estimatedItemSize = _ref3.estimatedItemSize,\n      lastMeasuredIndex = _ref3.lastMeasuredIndex;\n  var totalSizeOfMeasuredItems = 0; // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    var itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  var numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  var totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nvar VariableSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(props, index, instanceProps) {\n    return getItemMetadata$1(props, index, instanceProps).offset;\n  },\n  getItemSize: function getItemSize(props, index, instanceProps) {\n    return instanceProps.itemMetadataMap[index].size;\n  },\n  getEstimatedTotalSize: getEstimatedTotalSize,\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(props, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    var direction = props.direction,\n        height = props.height,\n        layout = props.layout,\n        width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, index, instanceProps); // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n\n    var estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n    var maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, itemMetadata.offset));\n    var minOffset = Math.max(0, itemMetadata.offset - size + itemMetadata.size + scrollbarSize);\n\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(props, offset, instanceProps) {\n    return findNearestItem$1(props, instanceProps, offset);\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(props, startIndex, scrollOffset, instanceProps) {\n    var direction = props.direction,\n        height = props.height,\n        itemCount = props.itemCount,\n        layout = props.layout,\n        width = props.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var itemMetadata = getItemMetadata$1(props, startIndex, instanceProps);\n    var maxOffset = scrollOffset + size;\n    var offset = itemMetadata.offset + itemMetadata.size;\n    var stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata$1(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n  initInstanceProps: function initInstanceProps(props, instance) {\n    var _ref4 = props,\n        estimatedItemSize = _ref4.estimatedItemSize;\n    var instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE$1,\n      lastMeasuredIndex: -1\n    };\n\n    instance.resetAfterIndex = function (index, shouldForceUpdate) {\n      if (shouldForceUpdate === void 0) {\n        shouldForceUpdate = true;\n      }\n\n      instanceProps.lastMeasuredIndex = Math.min(instanceProps.lastMeasuredIndex, index - 1); // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n  shouldResetStyleCacheOnItemSizeChange: false,\n  validateProps: function validateProps(_ref5) {\n    var itemSize = _ref5.itemSize;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a function. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeGrid = /*#__PURE__*/createGridComponent({\n  getColumnOffset: function getColumnOffset(_ref, index) {\n    var columnWidth = _ref.columnWidth;\n    return index * columnWidth;\n  },\n  getColumnWidth: function getColumnWidth(_ref2, index) {\n    var columnWidth = _ref2.columnWidth;\n    return columnWidth;\n  },\n  getRowOffset: function getRowOffset(_ref3, index) {\n    var rowHeight = _ref3.rowHeight;\n    return index * rowHeight;\n  },\n  getRowHeight: function getRowHeight(_ref4, index) {\n    var rowHeight = _ref4.rowHeight;\n    return rowHeight;\n  },\n  getEstimatedTotalHeight: function getEstimatedTotalHeight(_ref5) {\n    var rowCount = _ref5.rowCount,\n        rowHeight = _ref5.rowHeight;\n    return rowHeight * rowCount;\n  },\n  getEstimatedTotalWidth: function getEstimatedTotalWidth(_ref6) {\n    var columnCount = _ref6.columnCount,\n        columnWidth = _ref6.columnWidth;\n    return columnWidth * columnCount;\n  },\n  getOffsetForColumnAndAlignment: function getOffsetForColumnAndAlignment(_ref7, columnIndex, align, scrollLeft, instanceProps, scrollbarSize) {\n    var columnCount = _ref7.columnCount,\n        columnWidth = _ref7.columnWidth,\n        width = _ref7.width;\n    var lastColumnOffset = Math.max(0, columnCount * columnWidth - width);\n    var maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);\n    var minOffset = Math.max(0, columnIndex * columnWidth - width + scrollbarSize + columnWidth);\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getOffsetForRowAndAlignment: function getOffsetForRowAndAlignment(_ref8, rowIndex, align, scrollTop, instanceProps, scrollbarSize) {\n    var rowHeight = _ref8.rowHeight,\n        height = _ref8.height,\n        rowCount = _ref8.rowCount;\n    var lastRowOffset = Math.max(0, rowCount * rowHeight - height);\n    var maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);\n    var minOffset = Math.max(0, rowIndex * rowHeight - height + scrollbarSize + rowHeight);\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getColumnStartIndexForOffset: function getColumnStartIndexForOffset(_ref9, scrollLeft) {\n    var columnWidth = _ref9.columnWidth,\n        columnCount = _ref9.columnCount;\n    return Math.max(0, Math.min(columnCount - 1, Math.floor(scrollLeft / columnWidth)));\n  },\n  getColumnStopIndexForStartIndex: function getColumnStopIndexForStartIndex(_ref10, startIndex, scrollLeft) {\n    var columnWidth = _ref10.columnWidth,\n        columnCount = _ref10.columnCount,\n        width = _ref10.width;\n    var left = startIndex * columnWidth;\n    var numVisibleColumns = Math.ceil((width + scrollLeft - left) / columnWidth);\n    return Math.max(0, Math.min(columnCount - 1, startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  getRowStartIndexForOffset: function getRowStartIndexForOffset(_ref11, scrollTop) {\n    var rowHeight = _ref11.rowHeight,\n        rowCount = _ref11.rowCount;\n    return Math.max(0, Math.min(rowCount - 1, Math.floor(scrollTop / rowHeight)));\n  },\n  getRowStopIndexForStartIndex: function getRowStopIndexForStartIndex(_ref12, startIndex, scrollTop) {\n    var rowHeight = _ref12.rowHeight,\n        rowCount = _ref12.rowCount,\n        height = _ref12.height;\n    var top = startIndex * rowHeight;\n    var numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);\n    return Math.max(0, Math.min(rowCount - 1, startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref13) {\n    var columnWidth = _ref13.columnWidth,\n        rowHeight = _ref13.rowHeight;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error('An invalid \"columnWidth\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (columnWidth === null ? 'null' : typeof columnWidth) + \"\\\" was specified.\"));\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error('An invalid \"rowHeight\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (rowHeight === null ? 'null' : typeof rowHeight) + \"\\\" was specified.\"));\n      }\n    }\n  }\n});\nvar FixedSizeList = /*#__PURE__*/createListComponent({\n  getItemOffset: function getItemOffset(_ref, index) {\n    var itemSize = _ref.itemSize;\n    return index * itemSize;\n  },\n  getItemSize: function getItemSize(_ref2, index) {\n    var itemSize = _ref2.itemSize;\n    return itemSize;\n  },\n  getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {\n    var itemCount = _ref3.itemCount,\n        itemSize = _ref3.itemSize;\n    return itemSize * itemCount;\n  },\n  getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset, instanceProps, scrollbarSize) {\n    var direction = _ref4.direction,\n        height = _ref4.height,\n        itemCount = _ref4.itemCount,\n        itemSize = _ref4.itemSize,\n        layout = _ref4.layout,\n        width = _ref4.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var size = isHorizontal ? width : height;\n    var lastItemOffset = Math.max(0, itemCount * itemSize - size);\n    var maxOffset = Math.min(lastItemOffset, index * itemSize);\n    var minOffset = Math.max(0, index * itemSize - size + itemSize + scrollbarSize);\n\n    if (align === 'smart') {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n\n      case 'end':\n        return minOffset;\n\n      case 'center':\n        {\n          // \"Centered\" offset is usually the average of the min and max.\n          // But near the edges of the list, this doesn't hold true.\n          var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);\n\n          if (middleOffset < Math.ceil(size / 2)) {\n            return 0; // near the beginning\n          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n            return lastItemOffset; // near the end\n          } else {\n            return middleOffset;\n          }\n        }\n\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n\n    }\n  },\n  getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {\n    var itemCount = _ref5.itemCount,\n        itemSize = _ref5.itemSize;\n    return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));\n  },\n  getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {\n    var direction = _ref6.direction,\n        height = _ref6.height,\n        itemCount = _ref6.itemCount,\n        itemSize = _ref6.itemSize,\n        layout = _ref6.layout,\n        width = _ref6.width; // TODO Deprecate direction \"horizontal\"\n\n    var isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    var offset = startIndex * itemSize;\n    var size = isHorizontal ? width : height;\n    var numVisibleItems = Math.ceil((size + scrollOffset - offset) / itemSize);\n    return Math.max(0, Math.min(itemCount - 1, startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n    ));\n  },\n  initInstanceProps: function initInstanceProps(props) {// Noop\n  },\n  shouldResetStyleCacheOnItemSizeChange: true,\n  validateProps: function validateProps(_ref7) {\n    var itemSize = _ref7.itemSize;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error('An invalid \"itemSize\" prop has been specified. ' + 'Value should be a number. ' + (\"\\\"\" + (itemSize === null ? 'null' : typeof itemSize) + \"\\\" was specified.\"));\n      }\n    }\n  }\n}); // Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\n\nfunction shallowDiffers(prev, next) {\n  for (var attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n\n  for (var _attribute in next) {\n    if (prev[_attribute] !== next[_attribute]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar _excluded = [\"style\"],\n    _excluded2 = [\"style\"]; // It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\n\nfunction areEqual(prevProps, nextProps) {\n  var prevStyle = prevProps.style,\n      prevRest = _objectWithoutPropertiesLoose(prevProps, _excluded);\n\n  var nextStyle = nextProps.style,\n      nextRest = _objectWithoutPropertiesLoose(nextProps, _excluded2);\n\n  return !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest);\n} // It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\n\n\nfunction shouldComponentUpdate(nextProps, nextState) {\n  return !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState);\n}\n\nexport { FixedSizeGrid, FixedSizeList, VariableSizeGrid, VariableSizeList, areEqual, shouldComponentUpdate };","map":{"version":3,"sources":["../src/timer.js","../src/domHelpers.js","../src/createGridComponent.js","../src/VariableSizeGrid.js","../src/createListComponent.js","../src/VariableSizeList.js","../src/FixedSizeGrid.js","../src/FixedSizeList.js","../src/shallowDiffers.js","../src/areEqual.js","../src/shouldComponentUpdate.js"],"names":["hasNativePerformanceNow","performance","now","Date","cancelAnimationFrame","timeoutID","start","callback","requestAnimationFrame","id","size","recalculate","div","document","style","cachedRTLResult","outerDiv","outerStyle","innerDiv","innerStyle","IS_SCROLLING_DEBOUNCE_INTERVAL","defaultItemKey","columnIndex","data","rowIndex","devWarningsOverscanCount","devWarningsOverscanRowsColumnsCount","devWarningsTagName","process","window","getColumnOffset","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getColumnWidth","getEstimatedTotalHeight","getEstimatedTotalWidth","getOffsetForColumnAndAlignment","getOffsetForRowAndAlignment","getRowHeight","getRowOffset","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initInstanceProps","shouldResetStyleCacheOnItemSizeChange","validateProps","_instanceProps","_resetIsScrollingTimeoutId","_outerRef","direction","itemData","useIsScrolling","state","instance","isScrolling","horizontalScrollDirection","scrollLeft","scrollTop","scrollUpdateWasRequested","verticalScrollDirection","validateSharedProps","scrollTo","Math","prevState","scrollToItem","align","columnCount","height","rowCount","width","scrollbarSize","getScrollbarSize","estimatedTotalHeight","estimatedTotalWidth","horizontalScrollbarSize","verticalScrollbarSize","componentDidMount","initialScrollLeft","initialScrollTop","outerRef","componentDidUpdate","getRTLOffsetType","clientWidth","scrollWidth","componentWillUnmount","cancelTimeout","render","children","className","innerRef","innerElementType","innerTagName","itemKey","outerElementType","outerTagName","columnStartIndex","columnStopIndex","rowStartIndex","rowStopIndex","items","createElement","key","onScroll","ref","position","overflow","WebkitOverflowScrolling","willChange","pointerEvents","memoizeOne","overscanColumnStartIndex","overscanColumnStopIndex","overscanRowStartIndex","overscanRowStopIndex","visibleColumnStartIndex","visibleColumnStopIndex","visibleRowStartIndex","visibleRowStopIndex","_callPropsCallbacks","onItemsRendered","columnWidth","rowHeight","itemStyleCache","offset","isRtl","left","right","top","_getHorizontalRangeToRender","overscanColumnCount","overscanColumnsCount","overscanCount","overscanCountResolved","startIndex","stopIndex","overscanBackward","overscanForward","_getVerticalRangeToRender","overscanRowCount","overscanRowsCount","clientHeight","scrollHeight","event","calculatedScrollLeft","calculatedScrollTop","requestTimeout","console","Error","DEFAULT_ESTIMATED_ITEM_SIZE","rowMetadataMap","estimatedRowHeight","lastMeasuredRowIndex","totalSizeOfMeasuredRows","itemMetadata","numUnmeasuredItems","totalSizeOfUnmeasuredItems","columnMetadataMap","estimatedColumnWidth","lastMeasuredColumnIndex","getItemMetadata","itemType","itemMetadataMap","instanceProps","itemSize","props","lastMeasuredIndex","index","i","findNearestItem","lastMeasuredItemOffset","findNearestItemBinarySearch","findNearestItemExponentialSearch","low","middle","high","currentOffset","itemCount","interval","getOffsetForIndexAndAlignment","estimatedTotalSize","maxOffset","minOffset","scrollOffset","VariableSizeGrid","createGridComponent","shouldForceUpdate","devWarningsDirection","getItemOffset","getEstimatedTotalSize","getItemSize","getStartIndexForOffset","getStopIndexForStartIndex","layout","scrollDirection","initialScrollOffset","isHorizontal","overscanStartIndex","overscanStopIndex","visibleStartIndex","visibleStopIndex","offsetHorizontal","_getRangeToRender","estimatedItemSize","totalSizeOfMeasuredItems","VariableSizeList","createListComponent","FixedSizeGrid","lastColumnOffset","middleOffset","lastRowOffset","numVisibleColumns","numVisibleRows","FixedSizeList","lastItemOffset","numVisibleItems","attribute","prev","next","prevStyle","prevRest","prevProps","nextStyle","nextRest","nextProps","shallowDiffers","areEqual"],"mappings":"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","sourcesContent":["// @flow\n\n// Animation frame based implementation of setTimeout.\n// Inspired by Joe Lambert, https://gist.github.com/joelambert/1002116#file-requesttimeout-js\n\nconst hasNativePerformanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nconst now = hasNativePerformanceNow\n  ? () => performance.now()\n  : () => Date.now();\n\nexport type TimeoutID = {|\n  id: AnimationFrameID,\n|};\n\nexport function cancelTimeout(timeoutID: TimeoutID) {\n  cancelAnimationFrame(timeoutID.id);\n}\n\nexport function requestTimeout(callback: Function, delay: number): TimeoutID {\n  const start = now();\n\n  function tick() {\n    if (now() - start >= delay) {\n      callback.call(null);\n    } else {\n      timeoutID.id = requestAnimationFrame(tick);\n    }\n  }\n\n  const timeoutID: TimeoutID = {\n    id: requestAnimationFrame(tick),\n  };\n\n  return timeoutID;\n}\n","// @flow\n\nlet size: number = -1;\n\n// This utility copied from \"dom-helpers\" package.\nexport function getScrollbarSize(recalculate?: boolean = false): number {\n  if (size === -1 || recalculate) {\n    const div = document.createElement('div');\n    const style = div.style;\n    style.width = '50px';\n    style.height = '50px';\n    style.overflow = 'scroll';\n\n    ((document.body: any): HTMLBodyElement).appendChild(div);\n\n    size = div.offsetWidth - div.clientWidth;\n\n    ((document.body: any): HTMLBodyElement).removeChild(div);\n  }\n\n  return size;\n}\n\nexport type RTLOffsetType =\n  | 'negative'\n  | 'positive-descending'\n  | 'positive-ascending';\n\nlet cachedRTLResult: RTLOffsetType | null = null;\n\n// TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n// Chrome does not seem to adhere; its scrollLeft values are positive (measured relative to the left).\n// Safari's elastic bounce makes detecting this even more complicated wrt potential false positives.\n// The safest way to check this is to intentionally set a negative offset,\n// and then verify that the subsequent \"scroll\" event matches the negative offset.\n// If it does not match, then we can assume a non-standard RTL scroll implementation.\nexport function getRTLOffsetType(recalculate?: boolean = false): RTLOffsetType {\n  if (cachedRTLResult === null || recalculate) {\n    const outerDiv = document.createElement('div');\n    const outerStyle = outerDiv.style;\n    outerStyle.width = '50px';\n    outerStyle.height = '50px';\n    outerStyle.overflow = 'scroll';\n    outerStyle.direction = 'rtl';\n\n    const innerDiv = document.createElement('div');\n    const innerStyle = innerDiv.style;\n    innerStyle.width = '100px';\n    innerStyle.height = '100px';\n\n    outerDiv.appendChild(innerDiv);\n\n    ((document.body: any): HTMLBodyElement).appendChild(outerDiv);\n\n    if (outerDiv.scrollLeft > 0) {\n      cachedRTLResult = 'positive-descending';\n    } else {\n      outerDiv.scrollLeft = 1;\n      if (outerDiv.scrollLeft === 0) {\n        cachedRTLResult = 'negative';\n      } else {\n        cachedRTLResult = 'positive-ascending';\n      }\n    }\n\n    ((document.body: any): HTMLBodyElement).removeChild(outerDiv);\n\n    return cachedRTLResult;\n  }\n\n  return cachedRTLResult;\n}\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\ntype Direction = 'ltr' | 'rtl';\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n\ntype RenderComponentProps<T> = {|\n  columnIndex: number,\n  data: T,\n  isScrolling?: boolean,\n  rowIndex: number,\n  style: Object,\n|};\nexport type RenderComponent<T> = React$ComponentType<\n  $Shape<RenderComponentProps<T>>\n>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype OnItemsRenderedCallback = ({\n  overscanColumnStartIndex: number,\n  overscanColumnStopIndex: number,\n  overscanRowStartIndex: number,\n  overscanRowStopIndex: number,\n  visibleColumnStartIndex: number,\n  visibleColumnStopIndex: number,\n  visibleRowStartIndex: number,\n  visibleRowStopIndex: number,\n}) => void;\ntype OnScrollCallback = ({\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [key: string]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  columnCount: number,\n  columnWidth: itemSize,\n  direction: Direction,\n  height: number,\n  initialScrollLeft?: number,\n  initialScrollTop?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemData: T,\n  itemKey?: (params: {|\n    columnIndex: number,\n    data: T,\n    rowIndex: number,\n  |}) => any,\n  onItemsRendered?: OnItemsRenderedCallback,\n  onScroll?: OnScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanColumnCount?: number,\n  overscanColumnsCount?: number, // deprecated\n  overscanCount?: number, // deprecated\n  overscanRowCount?: number,\n  overscanRowsCount?: number, // deprecated\n  rowCount: number,\n  rowHeight: itemSize,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  horizontalScrollDirection: ScrollDirection,\n  scrollLeft: number,\n  scrollTop: number,\n  scrollUpdateWasRequested: boolean,\n  verticalScrollDirection: ScrollDirection,\n|};\n\ntype getItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype getEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForItemAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any,\n  scrollbarSize: number\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = ({ columnIndex, data, rowIndex }) =>\n  `${rowIndex}:${columnIndex}`;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsOverscanCount = null;\nlet devWarningsOverscanRowsColumnsCount = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsOverscanCount = new WeakSet();\n    devWarningsOverscanRowsColumnsCount = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createGridComponent({\n  getColumnOffset,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getColumnWidth,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getOffsetForColumnAndAlignment,\n  getOffsetForRowAndAlignment,\n  getRowHeight,\n  getRowOffset,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getColumnOffset: getItemOffset,\n  getColumnStartIndexForOffset: GetStartIndexForOffset,\n  getColumnStopIndexForStartIndex: GetStopIndexForStartIndex,\n  getColumnWidth: getItemSize,\n  getEstimatedTotalHeight: getEstimatedTotalSize,\n  getEstimatedTotalWidth: getEstimatedTotalSize,\n  getOffsetForColumnAndAlignment: GetOffsetForItemAndAlignment,\n  getOffsetForRowAndAlignment: GetOffsetForItemAndAlignment,\n  getRowOffset: getItemOffset,\n  getRowHeight: getItemSize,\n  getRowStartIndexForOffset: GetStartIndexForOffset,\n  getRowStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class Grid<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n    _outerRef: ?HTMLDivElement;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      horizontalScrollDirection: 'forward',\n      scrollLeft:\n        typeof this.props.initialScrollLeft === 'number'\n          ? this.props.initialScrollLeft\n          : 0,\n      scrollTop:\n        typeof this.props.initialScrollTop === 'number'\n          ? this.props.initialScrollTop\n          : 0,\n      scrollUpdateWasRequested: false,\n      verticalScrollDirection: 'forward',\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo({\n      scrollLeft,\n      scrollTop,\n    }: {\n      scrollLeft: number,\n      scrollTop: number,\n    }): void {\n      if (scrollLeft !== undefined) {\n        scrollLeft = Math.max(0, scrollLeft);\n      }\n      if (scrollTop !== undefined) {\n        scrollTop = Math.max(0, scrollTop);\n      }\n\n      this.setState(prevState => {\n        if (scrollLeft === undefined) {\n          scrollLeft = prevState.scrollLeft;\n        }\n        if (scrollTop === undefined) {\n          scrollTop = prevState.scrollTop;\n        }\n\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          return null;\n        }\n\n        return {\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          scrollUpdateWasRequested: true,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem({\n      align = 'auto',\n      columnIndex,\n      rowIndex,\n    }: {\n      align: ScrollToAlign,\n      columnIndex?: number,\n      rowIndex?: number,\n    }): void {\n      const { columnCount, height, rowCount, width } = this.props;\n      const { scrollLeft, scrollTop } = this.state;\n      const scrollbarSize = getScrollbarSize();\n\n      if (columnIndex !== undefined) {\n        columnIndex = Math.max(0, Math.min(columnIndex, columnCount - 1));\n      }\n      if (rowIndex !== undefined) {\n        rowIndex = Math.max(0, Math.min(rowIndex, rowCount - 1));\n      }\n\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      // The scrollbar size should be considered when scrolling an item into view,\n      // to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      const horizontalScrollbarSize =\n        estimatedTotalWidth > width ? scrollbarSize : 0;\n      const verticalScrollbarSize =\n        estimatedTotalHeight > height ? scrollbarSize : 0;\n\n      this.scrollTo({\n        scrollLeft:\n          columnIndex !== undefined\n            ? getOffsetForColumnAndAlignment(\n                this.props,\n                columnIndex,\n                align,\n                scrollLeft,\n                this._instanceProps,\n                verticalScrollbarSize\n              )\n            : scrollLeft,\n        scrollTop:\n          rowIndex !== undefined\n            ? getOffsetForRowAndAlignment(\n                this.props,\n                rowIndex,\n                align,\n                scrollTop,\n                this._instanceProps,\n                horizontalScrollbarSize\n              )\n            : scrollTop,\n      });\n    }\n\n    componentDidMount() {\n      const { initialScrollLeft, initialScrollTop } = this.props;\n\n      if (this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (typeof initialScrollLeft === 'number') {\n          outerRef.scrollLeft = initialScrollLeft;\n        }\n        if (typeof initialScrollTop === 'number') {\n          outerRef.scrollTop = initialScrollTop;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction } = this.props;\n      const { scrollLeft, scrollTop, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // So we need to determine which browser behavior we're dealing with, and mimic it.\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              outerRef.scrollLeft = -scrollLeft;\n              break;\n            case 'positive-ascending':\n              outerRef.scrollLeft = scrollLeft;\n              break;\n            default:\n              const { clientWidth, scrollWidth } = outerRef;\n              outerRef.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        } else {\n          outerRef.scrollLeft = Math.max(0, scrollLeft);\n        }\n\n        outerRef.scrollTop = Math.max(0, scrollTop);\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        columnCount,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemData,\n        itemKey = defaultItemKey,\n        outerElementType,\n        outerTagName,\n        rowCount,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      const [\n        columnStartIndex,\n        columnStopIndex,\n      ] = this._getHorizontalRangeToRender();\n      const [rowStartIndex, rowStopIndex] = this._getVerticalRangeToRender();\n\n      const items = [];\n      if (columnCount > 0 && rowCount) {\n        for (\n          let rowIndex = rowStartIndex;\n          rowIndex <= rowStopIndex;\n          rowIndex++\n        ) {\n          for (\n            let columnIndex = columnStartIndex;\n            columnIndex <= columnStopIndex;\n            columnIndex++\n          ) {\n            items.push(\n              createElement(children, {\n                columnIndex,\n                data: itemData,\n                isScrolling: useIsScrolling ? isScrolling : undefined,\n                key: itemKey({ columnIndex, data: itemData, rowIndex }),\n                rowIndex,\n                style: this._getItemStyle(rowIndex, columnIndex),\n              })\n            );\n          }\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalHeight = getEstimatedTotalHeight(\n        this.props,\n        this._instanceProps\n      );\n      const estimatedTotalWidth = getEstimatedTotalWidth(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll: this._onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: estimatedTotalHeight,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: estimatedTotalWidth,\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanColumnStartIndex: number,\n      overscanColumnStopIndex: number,\n      overscanRowStartIndex: number,\n      overscanRowStopIndex: number,\n      visibleColumnStartIndex: number,\n      visibleColumnStopIndex: number,\n      visibleRowStartIndex: number,\n      visibleRowStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanColumnStartIndex: number,\n        overscanColumnStopIndex: number,\n        overscanRowStartIndex: number,\n        overscanRowStopIndex: number,\n        visibleColumnStartIndex: number,\n        visibleColumnStopIndex: number,\n        visibleRowStartIndex: number,\n        visibleRowStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): OnItemsRenderedCallback)({\n          overscanColumnStartIndex,\n          overscanColumnStopIndex,\n          overscanRowStartIndex,\n          overscanRowStopIndex,\n          visibleColumnStartIndex,\n          visibleColumnStopIndex,\n          visibleRowStartIndex,\n          visibleRowStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollLeft: number,\n      scrollTop: number,\n      horizontalScrollDirection: ScrollDirection,\n      verticalScrollDirection: ScrollDirection,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollLeft: number,\n        scrollTop: number,\n        horizontalScrollDirection: ScrollDirection,\n        verticalScrollDirection: ScrollDirection,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): OnScrollCallback)({\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          verticalScrollDirection,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      const { columnCount, onItemsRendered, onScroll, rowCount } = this.props;\n\n      if (typeof onItemsRendered === 'function') {\n        if (columnCount > 0 && rowCount > 0) {\n          const [\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n          ] = this._getHorizontalRangeToRender();\n          const [\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex,\n          ] = this._getVerticalRangeToRender();\n          this._callOnItemsRendered(\n            overscanColumnStartIndex,\n            overscanColumnStopIndex,\n            overscanRowStartIndex,\n            overscanRowStopIndex,\n            visibleColumnStartIndex,\n            visibleColumnStopIndex,\n            visibleRowStartIndex,\n            visibleRowStopIndex\n          );\n        }\n      }\n\n      if (typeof onScroll === 'function') {\n        const {\n          horizontalScrollDirection,\n          scrollLeft,\n          scrollTop,\n          scrollUpdateWasRequested,\n          verticalScrollDirection,\n        } = this.state;\n        this._callOnScroll(\n          scrollLeft,\n          scrollTop,\n          horizontalScrollDirection,\n          verticalScrollDirection,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (rowIndex: number, columnIndex: number) => Object;\n    _getItemStyle = (rowIndex: number, columnIndex: number): Object => {\n      const { columnWidth, direction, rowHeight } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && columnWidth,\n        shouldResetStyleCacheOnItemSizeChange && direction,\n        shouldResetStyleCacheOnItemSizeChange && rowHeight\n      );\n\n      const key = `${rowIndex}:${columnIndex}`;\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(key)) {\n        style = itemStyleCache[key];\n      } else {\n        const offset = getColumnOffset(\n          this.props,\n          columnIndex,\n          this._instanceProps\n        );\n        const isRtl = direction === 'rtl';\n        itemStyleCache[key] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offset,\n          right: isRtl ? offset : undefined,\n          top: getRowOffset(this.props, rowIndex, this._instanceProps),\n          height: getRowHeight(this.props, rowIndex, this._instanceProps),\n          width: getColumnWidth(this.props, columnIndex, this._instanceProps),\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getHorizontalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanColumnCount,\n        overscanColumnsCount,\n        overscanCount,\n        rowCount,\n      } = this.props;\n      const { horizontalScrollDirection, isScrolling, scrollLeft } = this.state;\n\n      const overscanCountResolved: number =\n        overscanColumnCount || overscanColumnsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getColumnStartIndexForOffset(\n        this.props,\n        scrollLeft,\n        this._instanceProps\n      );\n      const stopIndex = getColumnStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollLeft,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || horizontalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || horizontalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(columnCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _getVerticalRangeToRender(): [number, number, number, number] {\n      const {\n        columnCount,\n        overscanCount,\n        overscanRowCount,\n        overscanRowsCount,\n        rowCount,\n      } = this.props;\n      const { isScrolling, verticalScrollDirection, scrollTop } = this.state;\n\n      const overscanCountResolved: number =\n        overscanRowCount || overscanRowsCount || overscanCount || 1;\n\n      if (columnCount === 0 || rowCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getRowStartIndexForOffset(\n        this.props,\n        scrollTop,\n        this._instanceProps\n      );\n      const stopIndex = getRowStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollTop,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || verticalScrollDirection === 'backward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n      const overscanForward =\n        !isScrolling || verticalScrollDirection === 'forward'\n          ? Math.max(1, overscanCountResolved)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(rowCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScroll = (event: ScrollEvent): void => {\n      const {\n        clientHeight,\n        clientWidth,\n        scrollLeft,\n        scrollTop,\n        scrollHeight,\n        scrollWidth,\n      } = event.currentTarget;\n      this.setState(prevState => {\n        if (\n          prevState.scrollLeft === scrollLeft &&\n          prevState.scrollTop === scrollTop\n        ) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n        // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n        // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n        // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n        let calculatedScrollLeft = scrollLeft;\n        if (direction === 'rtl') {\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              calculatedScrollLeft = -scrollLeft;\n              break;\n            case 'positive-descending':\n              calculatedScrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        calculatedScrollLeft = Math.max(\n          0,\n          Math.min(calculatedScrollLeft, scrollWidth - clientWidth)\n        );\n        const calculatedScrollTop = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          horizontalScrollDirection:\n            prevState.scrollLeft < scrollLeft ? 'forward' : 'backward',\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: calculatedScrollTop,\n          verticalScrollDirection:\n            prevState.scrollTop < scrollTop ? 'forward' : 'backward',\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1);\n      });\n    };\n  };\n}\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    innerTagName,\n    outerTagName,\n    overscanColumnsCount,\n    overscanCount,\n    overscanRowsCount,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof overscanCount === 'number') {\n      if (devWarningsOverscanCount && !devWarningsOverscanCount.has(instance)) {\n        devWarningsOverscanCount.add(instance);\n        console.warn(\n          'The overscanCount prop has been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (\n      typeof overscanColumnsCount === 'number' ||\n      typeof overscanRowsCount === 'number'\n    ) {\n      if (\n        devWarningsOverscanRowsColumnsCount &&\n        !devWarningsOverscanRowsColumnsCount.has(instance)\n      ) {\n        devWarningsOverscanRowsColumnsCount.add(instance);\n        console.warn(\n          'The overscanColumnsCount and overscanRowsCount props have been deprecated. ' +\n            'Please use the overscanColumnCount and overscanRowCount props instead.'\n        );\n      }\n    }\n\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    switch (direction) {\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    if (typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Grids must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    }\n\n    if (typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Grids must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\ntype ItemType = 'column' | 'row';\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype ItemMetadataMap = { [index: number]: ItemMetadata };\ntype InstanceProps = {|\n  columnMetadataMap: ItemMetadataMap,\n  estimatedColumnWidth: number,\n  estimatedRowHeight: number,\n  lastMeasuredColumnIndex: number,\n  lastMeasuredRowIndex: number,\n  rowMetadataMap: ItemMetadataMap,\n|};\n\nconst getEstimatedTotalHeight = (\n  { rowCount }: Props<any>,\n  { rowMetadataMap, estimatedRowHeight, lastMeasuredRowIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredRowIndex >= rowCount) {\n    lastMeasuredRowIndex = rowCount - 1;\n  }\n\n  if (lastMeasuredRowIndex >= 0) {\n    const itemMetadata = rowMetadataMap[lastMeasuredRowIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = rowCount - lastMeasuredRowIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedRowHeight;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getEstimatedTotalWidth = (\n  { columnCount }: Props<any>,\n  {\n    columnMetadataMap,\n    estimatedColumnWidth,\n    lastMeasuredColumnIndex,\n  }: InstanceProps\n) => {\n  let totalSizeOfMeasuredRows = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredColumnIndex >= columnCount) {\n    lastMeasuredColumnIndex = columnCount - 1;\n  }\n\n  if (lastMeasuredColumnIndex >= 0) {\n    const itemMetadata = columnMetadataMap[lastMeasuredColumnIndex];\n    totalSizeOfMeasuredRows = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = columnCount - lastMeasuredColumnIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedColumnWidth;\n\n  return totalSizeOfMeasuredRows + totalSizeOfUnmeasuredItems;\n};\n\nconst getItemMetadata = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  let itemMetadataMap, itemSize, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    itemSize = ((props.columnWidth: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    itemSize = ((props.rowHeight: any): itemSizeGetter);\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = itemSize(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    if (itemType === 'column') {\n      instanceProps.lastMeasuredColumnIndex = index;\n    } else {\n      instanceProps.lastMeasuredRowIndex = index;\n    }\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  let itemMetadataMap, lastMeasuredIndex;\n  if (itemType === 'column') {\n    itemMetadataMap = instanceProps.columnMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredColumnIndex;\n  } else {\n    itemMetadataMap = instanceProps.rowMetadataMap;\n    lastMeasuredIndex = instanceProps.lastMeasuredRowIndex;\n  }\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      itemType,\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      itemType,\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(\n      itemType,\n      props,\n      middle,\n      instanceProps\n    ).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  itemType: ItemType,\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const itemCount = itemType === 'column' ? props.columnCount : props.rowCount;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(itemType, props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    itemType,\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getOffsetForIndexAndAlignment = (\n  itemType: ItemType,\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: InstanceProps,\n  scrollbarSize: number\n): number => {\n  const size = itemType === 'column' ? props.width : props.height;\n  const itemMetadata = getItemMetadata(itemType, props, index, instanceProps);\n\n  // Get estimated total size after ItemMetadata is computed,\n  // To ensure it reflects actual measurements instead of just estimates.\n  const estimatedTotalSize =\n    itemType === 'column'\n      ? getEstimatedTotalWidth(props, instanceProps)\n      : getEstimatedTotalHeight(props, instanceProps);\n\n  const maxOffset = Math.max(\n    0,\n    Math.min(estimatedTotalSize - size, itemMetadata.offset)\n  );\n  const minOffset = Math.max(\n    0,\n    itemMetadata.offset - size + scrollbarSize + itemMetadata.size\n  );\n\n  if (align === 'smart') {\n    if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n      align = 'auto';\n    } else {\n      align = 'center';\n    }\n  }\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return Math.round(minOffset + (maxOffset - minOffset) / 2);\n    case 'auto':\n    default:\n      if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n        return scrollOffset;\n      } else if (minOffset > maxOffset) {\n        // Because we only take into account the scrollbar size when calculating minOffset\n        // this value can be larger than maxOffset when at the end of the list\n        return minOffset;\n      } else if (scrollOffset < minOffset) {\n        return minOffset;\n      } else {\n        return maxOffset;\n      }\n  }\n};\n\nconst VariableSizeGrid = createGridComponent({\n  getColumnOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('column', props, index, instanceProps).offset,\n\n  getColumnStartIndexForOffset: (\n    props: Props<any>,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('column', props, instanceProps, scrollLeft),\n\n  getColumnStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollLeft: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { columnCount, width } = props;\n\n    const itemMetadata = getItemMetadata(\n      'column',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollLeft + width;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < columnCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('column', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  getColumnWidth: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.columnMetadataMap[index].size,\n\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n\n  getOffsetForColumnAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'column',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getOffsetForRowAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number =>\n    getOffsetForIndexAndAlignment(\n      'row',\n      props,\n      index,\n      align,\n      scrollOffset,\n      instanceProps,\n      scrollbarSize\n    ),\n\n  getRowOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata('row', props, index, instanceProps).offset,\n\n  getRowHeight: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.rowMetadataMap[index].size,\n\n  getRowStartIndexForOffset: (\n    props: Props<any>,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem('row', props, instanceProps, scrollTop),\n\n  getRowStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollTop: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { rowCount, height } = props;\n\n    const itemMetadata = getItemMetadata(\n      'row',\n      props,\n      startIndex,\n      instanceProps\n    );\n    const maxOffset = scrollTop + height;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < rowCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata('row', props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const {\n      estimatedColumnWidth,\n      estimatedRowHeight,\n    } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      columnMetadataMap: {},\n      estimatedColumnWidth: estimatedColumnWidth || DEFAULT_ESTIMATED_ITEM_SIZE,\n      estimatedRowHeight: estimatedRowHeight || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredColumnIndex: -1,\n      lastMeasuredRowIndex: -1,\n      rowMetadataMap: {},\n    };\n\n    instance.resetAfterColumnIndex = (\n      columnIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ columnIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterRowIndex = (\n      rowIndex: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instance.resetAfterIndices({ rowIndex, shouldForceUpdate });\n    };\n\n    instance.resetAfterIndices = ({\n      columnIndex,\n      rowIndex,\n      shouldForceUpdate = true,\n    }: {\n      columnIndex?: number,\n      rowIndex?: number,\n      shouldForceUpdate: boolean,\n    }) => {\n      if (typeof columnIndex === 'number') {\n        instanceProps.lastMeasuredColumnIndex = Math.min(\n          instanceProps.lastMeasuredColumnIndex,\n          columnIndex - 1\n        );\n      }\n      if (typeof rowIndex === 'number') {\n        instanceProps.lastMeasuredRowIndex = Math.min(\n          instanceProps.lastMeasuredRowIndex,\n          rowIndex - 1\n        );\n      }\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'function') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      } else if (typeof rowHeight !== 'function') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeGrid;\n","// @flow\n\nimport memoizeOne from 'memoize-one';\nimport { createElement, PureComponent } from 'react';\nimport { cancelTimeout, requestTimeout } from './timer';\nimport { getScrollbarSize, getRTLOffsetType } from './domHelpers';\n\nimport type { TimeoutID } from './timer';\n\nexport type ScrollToAlign = 'auto' | 'smart' | 'center' | 'start' | 'end';\n\ntype itemSize = number | ((index: number) => number);\n// TODO Deprecate directions \"horizontal\" and \"vertical\"\ntype Direction = 'ltr' | 'rtl' | 'horizontal' | 'vertical';\ntype Layout = 'horizontal' | 'vertical';\n\ntype RenderComponentProps<T> = {|\n  data: T,\n  index: number,\n  isScrolling?: boolean,\n  style: Object,\n|};\ntype RenderComponent<T> = React$ComponentType<$Shape<RenderComponentProps<T>>>;\n\ntype ScrollDirection = 'forward' | 'backward';\n\ntype onItemsRenderedCallback = ({\n  overscanStartIndex: number,\n  overscanStopIndex: number,\n  visibleStartIndex: number,\n  visibleStopIndex: number,\n}) => void;\ntype onScrollCallback = ({\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n}) => void;\n\ntype ScrollEvent = SyntheticEvent<HTMLDivElement>;\ntype ItemStyleCache = { [index: number]: Object };\n\ntype OuterProps = {|\n  children: React$Node,\n  className: string | void,\n  onScroll: ScrollEvent => void,\n  style: {\n    [string]: mixed,\n  },\n|};\n\ntype InnerProps = {|\n  children: React$Node,\n  style: {\n    [string]: mixed,\n  },\n|};\n\nexport type Props<T> = {|\n  children: RenderComponent<T>,\n  className?: string,\n  direction: Direction,\n  height: number | string,\n  initialScrollOffset?: number,\n  innerRef?: any,\n  innerElementType?: string | React$AbstractComponent<InnerProps, any>,\n  innerTagName?: string, // deprecated\n  itemCount: number,\n  itemData: T,\n  itemKey?: (index: number, data: T) => any,\n  itemSize: itemSize,\n  layout: Layout,\n  onItemsRendered?: onItemsRenderedCallback,\n  onScroll?: onScrollCallback,\n  outerRef?: any,\n  outerElementType?: string | React$AbstractComponent<OuterProps, any>,\n  outerTagName?: string, // deprecated\n  overscanCount: number,\n  style?: Object,\n  useIsScrolling: boolean,\n  width: number | string,\n|};\n\ntype State = {|\n  instance: any,\n  isScrolling: boolean,\n  scrollDirection: ScrollDirection,\n  scrollOffset: number,\n  scrollUpdateWasRequested: boolean,\n|};\n\ntype GetItemOffset = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetItemSize = (\n  props: Props<any>,\n  index: number,\n  instanceProps: any\n) => number;\ntype GetEstimatedTotalSize = (props: Props<any>, instanceProps: any) => number;\ntype GetOffsetForIndexAndAlignment = (\n  props: Props<any>,\n  index: number,\n  align: ScrollToAlign,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype GetStartIndexForOffset = (\n  props: Props<any>,\n  offset: number,\n  instanceProps: any\n) => number;\ntype GetStopIndexForStartIndex = (\n  props: Props<any>,\n  startIndex: number,\n  scrollOffset: number,\n  instanceProps: any\n) => number;\ntype InitInstanceProps = (props: Props<any>, instance: any) => any;\ntype ValidateProps = (props: Props<any>) => void;\n\nconst IS_SCROLLING_DEBOUNCE_INTERVAL = 150;\n\nconst defaultItemKey = (index: number, data: any) => index;\n\n// In DEV mode, this Set helps us only log a warning once per component instance.\n// This avoids spamming the console every time a render happens.\nlet devWarningsDirection = null;\nlet devWarningsTagName = null;\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined' && typeof window.WeakSet !== 'undefined') {\n    devWarningsDirection = new WeakSet();\n    devWarningsTagName = new WeakSet();\n  }\n}\n\nexport default function createListComponent({\n  getItemOffset,\n  getEstimatedTotalSize,\n  getItemSize,\n  getOffsetForIndexAndAlignment,\n  getStartIndexForOffset,\n  getStopIndexForStartIndex,\n  initInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange,\n  validateProps,\n}: {|\n  getItemOffset: GetItemOffset,\n  getEstimatedTotalSize: GetEstimatedTotalSize,\n  getItemSize: GetItemSize,\n  getOffsetForIndexAndAlignment: GetOffsetForIndexAndAlignment,\n  getStartIndexForOffset: GetStartIndexForOffset,\n  getStopIndexForStartIndex: GetStopIndexForStartIndex,\n  initInstanceProps: InitInstanceProps,\n  shouldResetStyleCacheOnItemSizeChange: boolean,\n  validateProps: ValidateProps,\n|}) {\n  return class List<T> extends PureComponent<Props<T>, State> {\n    _instanceProps: any = initInstanceProps(this.props, this);\n    _outerRef: ?HTMLDivElement;\n    _resetIsScrollingTimeoutId: TimeoutID | null = null;\n\n    static defaultProps = {\n      direction: 'ltr',\n      itemData: undefined,\n      layout: 'vertical',\n      overscanCount: 2,\n      useIsScrolling: false,\n    };\n\n    state: State = {\n      instance: this,\n      isScrolling: false,\n      scrollDirection: 'forward',\n      scrollOffset:\n        typeof this.props.initialScrollOffset === 'number'\n          ? this.props.initialScrollOffset\n          : 0,\n      scrollUpdateWasRequested: false,\n    };\n\n    // Always use explicit constructor for React components.\n    // It produces less code after transpilation. (#26)\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props: Props<T>) {\n      super(props);\n    }\n\n    static getDerivedStateFromProps(\n      nextProps: Props<T>,\n      prevState: State\n    ): $Shape<State> | null {\n      validateSharedProps(nextProps, prevState);\n      validateProps(nextProps);\n      return null;\n    }\n\n    scrollTo(scrollOffset: number): void {\n      scrollOffset = Math.max(0, scrollOffset);\n\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollOffset) {\n          return null;\n        }\n        return {\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset: scrollOffset,\n          scrollUpdateWasRequested: true,\n        };\n      }, this._resetIsScrollingDebounced);\n    }\n\n    scrollToItem(index: number, align: ScrollToAlign = 'auto'): void {\n      const { itemCount, layout } = this.props;\n      const { scrollOffset } = this.state;\n\n      index = Math.max(0, Math.min(index, itemCount - 1));\n\n      // The scrollbar size should be considered when scrolling an item into view, to ensure it's fully visible.\n      // But we only need to account for its size when it's actually visible.\n      // This is an edge case for lists; normally they only scroll in the dominant direction.\n      let scrollbarSize = 0;\n      if (this._outerRef) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        if (layout === 'vertical') {\n          scrollbarSize =\n            outerRef.scrollWidth > outerRef.clientWidth\n              ? getScrollbarSize()\n              : 0;\n        } else {\n          scrollbarSize =\n            outerRef.scrollHeight > outerRef.clientHeight\n              ? getScrollbarSize()\n              : 0;\n        }\n      }\n\n      this.scrollTo(\n        getOffsetForIndexAndAlignment(\n          this.props,\n          index,\n          align,\n          scrollOffset,\n          this._instanceProps,\n          scrollbarSize\n        )\n      );\n    }\n\n    componentDidMount() {\n      const { direction, initialScrollOffset, layout } = this.props;\n\n      if (typeof initialScrollOffset === 'number' && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          outerRef.scrollLeft = initialScrollOffset;\n        } else {\n          outerRef.scrollTop = initialScrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentDidUpdate() {\n      const { direction, layout } = this.props;\n      const { scrollOffset, scrollUpdateWasRequested } = this.state;\n\n      if (scrollUpdateWasRequested && this._outerRef != null) {\n        const outerRef = ((this._outerRef: any): HTMLElement);\n\n        // TODO Deprecate direction \"horizontal\"\n        if (direction === 'horizontal' || layout === 'horizontal') {\n          if (direction === 'rtl') {\n            // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n            // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n            // So we need to determine which browser behavior we're dealing with, and mimic it.\n            switch (getRTLOffsetType()) {\n              case 'negative':\n                outerRef.scrollLeft = -scrollOffset;\n                break;\n              case 'positive-ascending':\n                outerRef.scrollLeft = scrollOffset;\n                break;\n              default:\n                const { clientWidth, scrollWidth } = outerRef;\n                outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;\n                break;\n            }\n          } else {\n            outerRef.scrollLeft = scrollOffset;\n          }\n        } else {\n          outerRef.scrollTop = scrollOffset;\n        }\n      }\n\n      this._callPropsCallbacks();\n    }\n\n    componentWillUnmount() {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n    }\n\n    render() {\n      const {\n        children,\n        className,\n        direction,\n        height,\n        innerRef,\n        innerElementType,\n        innerTagName,\n        itemCount,\n        itemData,\n        itemKey = defaultItemKey,\n        layout,\n        outerElementType,\n        outerTagName,\n        style,\n        useIsScrolling,\n        width,\n      } = this.props;\n      const { isScrolling } = this.state;\n\n      // TODO Deprecate direction \"horizontal\"\n      const isHorizontal =\n        direction === 'horizontal' || layout === 'horizontal';\n\n      const onScroll = isHorizontal\n        ? this._onScrollHorizontal\n        : this._onScrollVertical;\n\n      const [startIndex, stopIndex] = this._getRangeToRender();\n\n      const items = [];\n      if (itemCount > 0) {\n        for (let index = startIndex; index <= stopIndex; index++) {\n          items.push(\n            createElement(children, {\n              data: itemData,\n              key: itemKey(index, itemData),\n              index,\n              isScrolling: useIsScrolling ? isScrolling : undefined,\n              style: this._getItemStyle(index),\n            })\n          );\n        }\n      }\n\n      // Read this value AFTER items have been created,\n      // So their actual sizes (if variable) are taken into consideration.\n      const estimatedTotalSize = getEstimatedTotalSize(\n        this.props,\n        this._instanceProps\n      );\n\n      return createElement(\n        outerElementType || outerTagName || 'div',\n        {\n          className,\n          onScroll,\n          ref: this._outerRefSetter,\n          style: {\n            position: 'relative',\n            height,\n            width,\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            willChange: 'transform',\n            direction,\n            ...style,\n          },\n        },\n        createElement(innerElementType || innerTagName || 'div', {\n          children: items,\n          ref: innerRef,\n          style: {\n            height: isHorizontal ? '100%' : estimatedTotalSize,\n            pointerEvents: isScrolling ? 'none' : undefined,\n            width: isHorizontal ? estimatedTotalSize : '100%',\n          },\n        })\n      );\n    }\n\n    _callOnItemsRendered: (\n      overscanStartIndex: number,\n      overscanStopIndex: number,\n      visibleStartIndex: number,\n      visibleStopIndex: number\n    ) => void;\n    _callOnItemsRendered = memoizeOne(\n      (\n        overscanStartIndex: number,\n        overscanStopIndex: number,\n        visibleStartIndex: number,\n        visibleStopIndex: number\n      ) =>\n        ((this.props.onItemsRendered: any): onItemsRenderedCallback)({\n          overscanStartIndex,\n          overscanStopIndex,\n          visibleStartIndex,\n          visibleStopIndex,\n        })\n    );\n\n    _callOnScroll: (\n      scrollDirection: ScrollDirection,\n      scrollOffset: number,\n      scrollUpdateWasRequested: boolean\n    ) => void;\n    _callOnScroll = memoizeOne(\n      (\n        scrollDirection: ScrollDirection,\n        scrollOffset: number,\n        scrollUpdateWasRequested: boolean\n      ) =>\n        ((this.props.onScroll: any): onScrollCallback)({\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        })\n    );\n\n    _callPropsCallbacks() {\n      if (typeof this.props.onItemsRendered === 'function') {\n        const { itemCount } = this.props;\n        if (itemCount > 0) {\n          const [\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex,\n          ] = this._getRangeToRender();\n          this._callOnItemsRendered(\n            overscanStartIndex,\n            overscanStopIndex,\n            visibleStartIndex,\n            visibleStopIndex\n          );\n        }\n      }\n\n      if (typeof this.props.onScroll === 'function') {\n        const {\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested,\n        } = this.state;\n        this._callOnScroll(\n          scrollDirection,\n          scrollOffset,\n          scrollUpdateWasRequested\n        );\n      }\n    }\n\n    // Lazily create and cache item styles while scrolling,\n    // So that pure component sCU will prevent re-renders.\n    // We maintain this cache, and pass a style prop rather than index,\n    // So that List can clear cached styles and force item re-render if necessary.\n    _getItemStyle: (index: number) => Object;\n    _getItemStyle = (index: number): Object => {\n      const { direction, itemSize, layout } = this.props;\n\n      const itemStyleCache = this._getItemStyleCache(\n        shouldResetStyleCacheOnItemSizeChange && itemSize,\n        shouldResetStyleCacheOnItemSizeChange && layout,\n        shouldResetStyleCacheOnItemSizeChange && direction\n      );\n\n      let style;\n      if (itemStyleCache.hasOwnProperty(index)) {\n        style = itemStyleCache[index];\n      } else {\n        const offset = getItemOffset(this.props, index, this._instanceProps);\n        const size = getItemSize(this.props, index, this._instanceProps);\n\n        // TODO Deprecate direction \"horizontal\"\n        const isHorizontal =\n          direction === 'horizontal' || layout === 'horizontal';\n\n        const isRtl = direction === 'rtl';\n        const offsetHorizontal = isHorizontal ? offset : 0;\n        itemStyleCache[index] = style = {\n          position: 'absolute',\n          left: isRtl ? undefined : offsetHorizontal,\n          right: isRtl ? offsetHorizontal : undefined,\n          top: !isHorizontal ? offset : 0,\n          height: !isHorizontal ? size : '100%',\n          width: isHorizontal ? size : '100%',\n        };\n      }\n\n      return style;\n    };\n\n    _getItemStyleCache: (_: any, __: any, ___: any) => ItemStyleCache;\n    _getItemStyleCache = memoizeOne((_: any, __: any, ___: any) => ({}));\n\n    _getRangeToRender(): [number, number, number, number] {\n      const { itemCount, overscanCount } = this.props;\n      const { isScrolling, scrollDirection, scrollOffset } = this.state;\n\n      if (itemCount === 0) {\n        return [0, 0, 0, 0];\n      }\n\n      const startIndex = getStartIndexForOffset(\n        this.props,\n        scrollOffset,\n        this._instanceProps\n      );\n      const stopIndex = getStopIndexForStartIndex(\n        this.props,\n        startIndex,\n        scrollOffset,\n        this._instanceProps\n      );\n\n      // Overscan by one item in each direction so that tab/focus works.\n      // If there isn't at least one extra item, tab loops back around.\n      const overscanBackward =\n        !isScrolling || scrollDirection === 'backward'\n          ? Math.max(1, overscanCount)\n          : 1;\n      const overscanForward =\n        !isScrolling || scrollDirection === 'forward'\n          ? Math.max(1, overscanCount)\n          : 1;\n\n      return [\n        Math.max(0, startIndex - overscanBackward),\n        Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)),\n        startIndex,\n        stopIndex,\n      ];\n    }\n\n    _onScrollHorizontal = (event: ScrollEvent): void => {\n      const { clientWidth, scrollLeft, scrollWidth } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollLeft) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        const { direction } = this.props;\n\n        let scrollOffset = scrollLeft;\n        if (direction === 'rtl') {\n          // TRICKY According to the spec, scrollLeft should be negative for RTL aligned elements.\n          // This is not the case for all browsers though (e.g. Chrome reports values as positive, measured relative to the left).\n          // It's also easier for this component if we convert offsets to the same format as they would be in for ltr.\n          // So the simplest solution is to determine which browser behavior we're dealing with, and convert based on it.\n          switch (getRTLOffsetType()) {\n            case 'negative':\n              scrollOffset = -scrollLeft;\n              break;\n            case 'positive-descending':\n              scrollOffset = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        scrollOffset = Math.max(\n          0,\n          Math.min(scrollOffset, scrollWidth - clientWidth)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollLeft ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _onScrollVertical = (event: ScrollEvent): void => {\n      const { clientHeight, scrollHeight, scrollTop } = event.currentTarget;\n      this.setState(prevState => {\n        if (prevState.scrollOffset === scrollTop) {\n          // Scroll position may have been updated by cDM/cDU,\n          // In which case we don't need to trigger another render,\n          // And we don't want to update state.isScrolling.\n          return null;\n        }\n\n        // Prevent Safari's elastic scrolling from causing visual shaking when scrolling past bounds.\n        const scrollOffset = Math.max(\n          0,\n          Math.min(scrollTop, scrollHeight - clientHeight)\n        );\n\n        return {\n          isScrolling: true,\n          scrollDirection:\n            prevState.scrollOffset < scrollOffset ? 'forward' : 'backward',\n          scrollOffset,\n          scrollUpdateWasRequested: false,\n        };\n      }, this._resetIsScrollingDebounced);\n    };\n\n    _outerRefSetter = (ref: any): void => {\n      const { outerRef } = this.props;\n\n      this._outerRef = ((ref: any): HTMLDivElement);\n\n      if (typeof outerRef === 'function') {\n        outerRef(ref);\n      } else if (\n        outerRef != null &&\n        typeof outerRef === 'object' &&\n        outerRef.hasOwnProperty('current')\n      ) {\n        outerRef.current = ref;\n      }\n    };\n\n    _resetIsScrollingDebounced = () => {\n      if (this._resetIsScrollingTimeoutId !== null) {\n        cancelTimeout(this._resetIsScrollingTimeoutId);\n      }\n\n      this._resetIsScrollingTimeoutId = requestTimeout(\n        this._resetIsScrolling,\n        IS_SCROLLING_DEBOUNCE_INTERVAL\n      );\n    };\n\n    _resetIsScrolling = () => {\n      this._resetIsScrollingTimeoutId = null;\n\n      this.setState({ isScrolling: false }, () => {\n        // Clear style cache after state update has been committed.\n        // This way we don't break pure sCU for items that don't use isScrolling param.\n        this._getItemStyleCache(-1, null);\n      });\n    };\n  };\n}\n\n// NOTE: I considered further wrapping individual items with a pure ListItem component.\n// This would avoid ever calling the render function for the same index more than once,\n// But it would also add the overhead of a lot of components/fibers.\n// I assume people already do this (render function returning a class component),\n// So my doing it would just unnecessarily double the wrappers.\n\nconst validateSharedProps = (\n  {\n    children,\n    direction,\n    height,\n    layout,\n    innerTagName,\n    outerTagName,\n    width,\n  }: Props<any>,\n  { instance }: State\n): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (innerTagName != null || outerTagName != null) {\n      if (devWarningsTagName && !devWarningsTagName.has(instance)) {\n        devWarningsTagName.add(instance);\n        console.warn(\n          'The innerTagName and outerTagName props have been deprecated. ' +\n            'Please use the innerElementType and outerElementType props instead.'\n        );\n      }\n    }\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n\n    switch (direction) {\n      case 'horizontal':\n      case 'vertical':\n        if (devWarningsDirection && !devWarningsDirection.has(instance)) {\n          devWarningsDirection.add(instance);\n          console.warn(\n            'The direction prop should be either \"ltr\" (default) or \"rtl\". ' +\n              'Please use the layout prop to specify \"vertical\" (default) or \"horizontal\" orientation.'\n          );\n        }\n        break;\n      case 'ltr':\n      case 'rtl':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"direction\" prop has been specified. ' +\n            'Value should be either \"ltr\" or \"rtl\". ' +\n            `\"${direction}\" was specified.`\n        );\n    }\n\n    switch (layout) {\n      case 'horizontal':\n      case 'vertical':\n        // Valid values\n        break;\n      default:\n        throw Error(\n          'An invalid \"layout\" prop has been specified. ' +\n            'Value should be either \"horizontal\" or \"vertical\". ' +\n            `\"${layout}\" was specified.`\n        );\n    }\n\n    if (children == null) {\n      throw Error(\n        'An invalid \"children\" prop has been specified. ' +\n          'Value should be a React component. ' +\n          `\"${children === null ? 'null' : typeof children}\" was specified.`\n      );\n    }\n\n    if (isHorizontal && typeof width !== 'number') {\n      throw Error(\n        'An invalid \"width\" prop has been specified. ' +\n          'Horizontal lists must specify a number for width. ' +\n          `\"${width === null ? 'null' : typeof width}\" was specified.`\n      );\n    } else if (!isHorizontal && typeof height !== 'number') {\n      throw Error(\n        'An invalid \"height\" prop has been specified. ' +\n          'Vertical lists must specify a number for height. ' +\n          `\"${height === null ? 'null' : typeof height}\" was specified.`\n      );\n    }\n  }\n};\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\nconst DEFAULT_ESTIMATED_ITEM_SIZE = 50;\n\ntype VariableSizeProps = {|\n  estimatedItemSize: number,\n  ...Props<any>,\n|};\n\ntype itemSizeGetter = (index: number) => number;\n\ntype ItemMetadata = {|\n  offset: number,\n  size: number,\n|};\ntype InstanceProps = {|\n  itemMetadataMap: { [index: number]: ItemMetadata },\n  estimatedItemSize: number,\n  lastMeasuredIndex: number,\n|};\n\nconst getItemMetadata = (\n  props: Props<any>,\n  index: number,\n  instanceProps: InstanceProps\n): ItemMetadata => {\n  const { itemSize } = ((props: any): VariableSizeProps);\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  if (index > lastMeasuredIndex) {\n    let offset = 0;\n    if (lastMeasuredIndex >= 0) {\n      const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n      offset = itemMetadata.offset + itemMetadata.size;\n    }\n\n    for (let i = lastMeasuredIndex + 1; i <= index; i++) {\n      let size = ((itemSize: any): itemSizeGetter)(i);\n\n      itemMetadataMap[i] = {\n        offset,\n        size,\n      };\n\n      offset += size;\n    }\n\n    instanceProps.lastMeasuredIndex = index;\n  }\n\n  return itemMetadataMap[index];\n};\n\nconst findNearestItem = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  offset: number\n) => {\n  const { itemMetadataMap, lastMeasuredIndex } = instanceProps;\n\n  const lastMeasuredItemOffset =\n    lastMeasuredIndex > 0 ? itemMetadataMap[lastMeasuredIndex].offset : 0;\n\n  if (lastMeasuredItemOffset >= offset) {\n    // If we've already measured items within this range just use a binary search as it's faster.\n    return findNearestItemBinarySearch(\n      props,\n      instanceProps,\n      lastMeasuredIndex,\n      0,\n      offset\n    );\n  } else {\n    // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n    // The exponential search avoids pre-computing sizes for the full set of items as a binary search would.\n    // The overall complexity for this approach is O(log n).\n    return findNearestItemExponentialSearch(\n      props,\n      instanceProps,\n      Math.max(0, lastMeasuredIndex),\n      offset\n    );\n  }\n};\n\nconst findNearestItemBinarySearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  high: number,\n  low: number,\n  offset: number\n): number => {\n  while (low <= high) {\n    const middle = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemMetadata(props, middle, instanceProps).offset;\n\n    if (currentOffset === offset) {\n      return middle;\n    } else if (currentOffset < offset) {\n      low = middle + 1;\n    } else if (currentOffset > offset) {\n      high = middle - 1;\n    }\n  }\n\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\n\nconst findNearestItemExponentialSearch = (\n  props: Props<any>,\n  instanceProps: InstanceProps,\n  index: number,\n  offset: number\n): number => {\n  const { itemCount } = props;\n  let interval = 1;\n\n  while (\n    index < itemCount &&\n    getItemMetadata(props, index, instanceProps).offset < offset\n  ) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return findNearestItemBinarySearch(\n    props,\n    instanceProps,\n    Math.min(index, itemCount - 1),\n    Math.floor(index / 2),\n    offset\n  );\n};\n\nconst getEstimatedTotalSize = (\n  { itemCount }: Props<any>,\n  { itemMetadataMap, estimatedItemSize, lastMeasuredIndex }: InstanceProps\n) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  // Edge case check for when the number of items decreases while a scroll is in progress.\n  // https://github.com/bvaughn/react-window/pull/138\n  if (lastMeasuredIndex >= itemCount) {\n    lastMeasuredIndex = itemCount - 1;\n  }\n\n  if (lastMeasuredIndex >= 0) {\n    const itemMetadata = itemMetadataMap[lastMeasuredIndex];\n    totalSizeOfMeasuredItems = itemMetadata.offset + itemMetadata.size;\n  }\n\n  const numUnmeasuredItems = itemCount - lastMeasuredIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst VariableSizeList = createListComponent({\n  getItemOffset: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => getItemMetadata(props, index, instanceProps).offset,\n\n  getItemSize: (\n    props: Props<any>,\n    index: number,\n    instanceProps: InstanceProps\n  ): number => instanceProps.itemMetadataMap[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffsetForIndexAndAlignment: (\n    props: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number => {\n    const { direction, height, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, index, instanceProps);\n\n    // Get estimated total size after ItemMetadata is computed,\n    // To ensure it reflects actual measurements instead of just estimates.\n    const estimatedTotalSize = getEstimatedTotalSize(props, instanceProps);\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, itemMetadata.offset)\n    );\n    const minOffset = Math.max(\n      0,\n      itemMetadata.offset - size + itemMetadata.size + scrollbarSize\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        return Math.round(minOffset + (maxOffset - minOffset) / 2);\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    props: Props<any>,\n    offset: number,\n    instanceProps: InstanceProps\n  ): number => findNearestItem(props, instanceProps, offset),\n\n  getStopIndexForStartIndex: (\n    props: Props<any>,\n    startIndex: number,\n    scrollOffset: number,\n    instanceProps: InstanceProps\n  ): number => {\n    const { direction, height, itemCount, layout, width } = props;\n\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const itemMetadata = getItemMetadata(props, startIndex, instanceProps);\n    const maxOffset = scrollOffset + size;\n\n    let offset = itemMetadata.offset + itemMetadata.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < itemCount - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemMetadata(props, stopIndex, instanceProps).size;\n    }\n\n    return stopIndex;\n  },\n\n  initInstanceProps(props: Props<any>, instance: any): InstanceProps {\n    const { estimatedItemSize } = ((props: any): VariableSizeProps);\n\n    const instanceProps = {\n      itemMetadataMap: {},\n      estimatedItemSize: estimatedItemSize || DEFAULT_ESTIMATED_ITEM_SIZE,\n      lastMeasuredIndex: -1,\n    };\n\n    instance.resetAfterIndex = (\n      index: number,\n      shouldForceUpdate?: boolean = true\n    ) => {\n      instanceProps.lastMeasuredIndex = Math.min(\n        instanceProps.lastMeasuredIndex,\n        index - 1\n      );\n\n      // We could potentially optimize further by only evicting styles after this index,\n      // But since styles are only cached while scrolling is in progress-\n      // It seems an unnecessary optimization.\n      // It's unlikely that resetAfterIndex() will be called while a user is scrolling.\n      instance._getItemStyleCache(-1);\n\n      if (shouldForceUpdate) {\n        instance.forceUpdate();\n      }\n    };\n\n    return instanceProps;\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: false,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a function. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default VariableSizeList;\n","// @flow\n\nimport createGridComponent from './createGridComponent';\n\nimport type { Props, ScrollToAlign } from './createGridComponent';\n\nconst FixedSizeGrid = createGridComponent({\n  getColumnOffset: ({ columnWidth }: Props<any>, index: number): number =>\n    index * ((columnWidth: any): number),\n\n  getColumnWidth: ({ columnWidth }: Props<any>, index: number): number =>\n    ((columnWidth: any): number),\n\n  getRowOffset: ({ rowHeight }: Props<any>, index: number): number =>\n    index * ((rowHeight: any): number),\n\n  getRowHeight: ({ rowHeight }: Props<any>, index: number): number =>\n    ((rowHeight: any): number),\n\n  getEstimatedTotalHeight: ({ rowCount, rowHeight }: Props<any>) =>\n    ((rowHeight: any): number) * rowCount,\n\n  getEstimatedTotalWidth: ({ columnCount, columnWidth }: Props<any>) =>\n    ((columnWidth: any): number) * columnCount,\n\n  getOffsetForColumnAndAlignment: (\n    { columnCount, columnWidth, width }: Props<any>,\n    columnIndex: number,\n    align: ScrollToAlign,\n    scrollLeft: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastColumnOffset = Math.max(\n      0,\n      columnCount * ((columnWidth: any): number) - width\n    );\n    const maxOffset = Math.min(\n      lastColumnOffset,\n      columnIndex * ((columnWidth: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      columnIndex * ((columnWidth: any): number) -\n        width +\n        scrollbarSize +\n        ((columnWidth: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(width / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {\n          return lastColumnOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {\n          return scrollLeft;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollLeft < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getOffsetForRowAndAlignment: (\n    { rowHeight, height, rowCount }: Props<any>,\n    rowIndex: number,\n    align: ScrollToAlign,\n    scrollTop: number,\n    instanceProps: typeof undefined,\n    scrollbarSize: number\n  ): number => {\n    const lastRowOffset = Math.max(\n      0,\n      rowCount * ((rowHeight: any): number) - height\n    );\n    const maxOffset = Math.min(\n      lastRowOffset,\n      rowIndex * ((rowHeight: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      rowIndex * ((rowHeight: any): number) -\n        height +\n        scrollbarSize +\n        ((rowHeight: any): number)\n    );\n\n    if (align === 'smart') {\n      if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center':\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(height / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {\n          return lastRowOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      case 'auto':\n      default:\n        if (scrollTop >= minOffset && scrollTop <= maxOffset) {\n          return scrollTop;\n        } else if (minOffset > maxOffset) {\n          // Because we only take into account the scrollbar size when calculating minOffset\n          // this value can be larger than maxOffset when at the end of the list\n          return minOffset;\n        } else if (scrollTop < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getColumnStartIndexForOffset: (\n    { columnWidth, columnCount }: Props<any>,\n    scrollLeft: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        Math.floor(scrollLeft / ((columnWidth: any): number))\n      )\n    ),\n\n  getColumnStopIndexForStartIndex: (\n    { columnWidth, columnCount, width }: Props<any>,\n    startIndex: number,\n    scrollLeft: number\n  ): number => {\n    const left = startIndex * ((columnWidth: any): number);\n    const numVisibleColumns = Math.ceil(\n      (width + scrollLeft - left) / ((columnWidth: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        columnCount - 1,\n        startIndex + numVisibleColumns - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  getRowStartIndexForOffset: (\n    { rowHeight, rowCount }: Props<any>,\n    scrollTop: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(rowCount - 1, Math.floor(scrollTop / ((rowHeight: any): number)))\n    ),\n\n  getRowStopIndexForStartIndex: (\n    { rowHeight, rowCount, height }: Props<any>,\n    startIndex: number,\n    scrollTop: number\n  ): number => {\n    const top = startIndex * ((rowHeight: any): number);\n    const numVisibleRows = Math.ceil(\n      (height + scrollTop - top) / ((rowHeight: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        rowCount - 1,\n        startIndex + numVisibleRows - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ columnWidth, rowHeight }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof columnWidth !== 'number') {\n        throw Error(\n          'An invalid \"columnWidth\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${\n              columnWidth === null ? 'null' : typeof columnWidth\n            }\" was specified.`\n        );\n      }\n\n      if (typeof rowHeight !== 'number') {\n        throw Error(\n          'An invalid \"rowHeight\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${rowHeight === null ? 'null' : typeof rowHeight}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeGrid;\n","// @flow\n\nimport createListComponent from './createListComponent';\n\nimport type { Props, ScrollToAlign } from './createListComponent';\n\ntype InstanceProps = any;\n\nconst FixedSizeList = createListComponent({\n  getItemOffset: ({ itemSize }: Props<any>, index: number): number =>\n    index * ((itemSize: any): number),\n\n  getItemSize: ({ itemSize }: Props<any>, index: number): number =>\n    ((itemSize: any): number),\n\n  getEstimatedTotalSize: ({ itemCount, itemSize }: Props<any>) =>\n    ((itemSize: any): number) * itemCount,\n\n  getOffsetForIndexAndAlignment: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    index: number,\n    align: ScrollToAlign,\n    scrollOffset: number,\n    instanceProps: InstanceProps,\n    scrollbarSize: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const size = (((isHorizontal ? width : height): any): number);\n    const lastItemOffset = Math.max(\n      0,\n      itemCount * ((itemSize: any): number) - size\n    );\n    const maxOffset = Math.min(\n      lastItemOffset,\n      index * ((itemSize: any): number)\n    );\n    const minOffset = Math.max(\n      0,\n      index * ((itemSize: any): number) -\n        size +\n        ((itemSize: any): number) +\n        scrollbarSize\n    );\n\n    if (align === 'smart') {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        align = 'auto';\n      } else {\n        align = 'center';\n      }\n    }\n\n    switch (align) {\n      case 'start':\n        return maxOffset;\n      case 'end':\n        return minOffset;\n      case 'center': {\n        // \"Centered\" offset is usually the average of the min and max.\n        // But near the edges of the list, this doesn't hold true.\n        const middleOffset = Math.round(\n          minOffset + (maxOffset - minOffset) / 2\n        );\n        if (middleOffset < Math.ceil(size / 2)) {\n          return 0; // near the beginning\n        } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {\n          return lastItemOffset; // near the end\n        } else {\n          return middleOffset;\n        }\n      }\n      case 'auto':\n      default:\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset;\n        } else if (scrollOffset < minOffset) {\n          return minOffset;\n        } else {\n          return maxOffset;\n        }\n    }\n  },\n\n  getStartIndexForOffset: (\n    { itemCount, itemSize }: Props<any>,\n    offset: number\n  ): number =>\n    Math.max(\n      0,\n      Math.min(itemCount - 1, Math.floor(offset / ((itemSize: any): number)))\n    ),\n\n  getStopIndexForStartIndex: (\n    { direction, height, itemCount, itemSize, layout, width }: Props<any>,\n    startIndex: number,\n    scrollOffset: number\n  ): number => {\n    // TODO Deprecate direction \"horizontal\"\n    const isHorizontal = direction === 'horizontal' || layout === 'horizontal';\n    const offset = startIndex * ((itemSize: any): number);\n    const size = (((isHorizontal ? width : height): any): number);\n    const numVisibleItems = Math.ceil(\n      (size + scrollOffset - offset) / ((itemSize: any): number)\n    );\n    return Math.max(\n      0,\n      Math.min(\n        itemCount - 1,\n        startIndex + numVisibleItems - 1 // -1 is because stop index is inclusive\n      )\n    );\n  },\n\n  initInstanceProps(props: Props<any>): any {\n    // Noop\n  },\n\n  shouldResetStyleCacheOnItemSizeChange: true,\n\n  validateProps: ({ itemSize }: Props<any>): void => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'number') {\n        throw Error(\n          'An invalid \"itemSize\" prop has been specified. ' +\n            'Value should be a number. ' +\n            `\"${itemSize === null ? 'null' : typeof itemSize}\" was specified.`\n        );\n      }\n    }\n  },\n});\n\nexport default FixedSizeList;\n","// @flow\n\n// Pulled from react-compat\n// https://github.com/developit/preact-compat/blob/7c5de00e7c85e2ffd011bf3af02899b63f699d3a/src/index.js#L349\nexport default function shallowDiffers(prev: Object, next: Object): boolean {\n  for (let attribute in prev) {\n    if (!(attribute in next)) {\n      return true;\n    }\n  }\n  for (let attribute in next) {\n    if (prev[attribute] !== next[attribute]) {\n      return true;\n    }\n  }\n  return false;\n}\n","// @flow\n\nimport shallowDiffers from './shallowDiffers';\n\n// Custom comparison function for React.memo().\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-api.html#reactmemo\nexport default function areEqual(\n  prevProps: Object,\n  nextProps: Object\n): boolean {\n  const { style: prevStyle, ...prevRest } = prevProps;\n  const { style: nextStyle, ...nextRest } = nextProps;\n\n  return (\n    !shallowDiffers(prevStyle, nextStyle) && !shallowDiffers(prevRest, nextRest)\n  );\n}\n","// @flow\n\nimport areEqual from './areEqual';\nimport shallowDiffers from './shallowDiffers';\n\n// Custom shouldComponentUpdate for class components.\n// It knows to compare individual style props and ignore the wrapper object.\n// See https://reactjs.org/docs/react-component.html#shouldcomponentupdate\nexport default function shouldComponentUpdate(\n  nextProps: Object,\n  nextState: Object\n): boolean {\n  return (\n    !areEqual(this.props, nextProps) || shallowDiffers(this.state, nextState)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}