{"ast":null,"code":"import { getAttributeValueByBreakpoint, stringSnakeToCamel, getObjectPropertyValueByKey, EventHandlerUtil, throttle } from '../_utils/index';\nexport class SwapperStore {\n  static set(instanceId, drawerComponentObj) {\n    if (SwapperStore.has(instanceId)) {\n      return;\n    }\n\n    SwapperStore.store.set(instanceId, drawerComponentObj);\n  }\n\n  static get(instanceId) {\n    if (!SwapperStore.has(instanceId)) {\n      return;\n    }\n\n    return SwapperStore.store.get(instanceId);\n  }\n\n  static remove(instanceId) {\n    if (!SwapperStore.has(instanceId)) {\n      return;\n    }\n\n    SwapperStore.store.delete(instanceId);\n  }\n\n  static has(instanceId) {\n    return SwapperStore.store.has(instanceId);\n  }\n\n  static getAllInstances() {\n    return SwapperStore.store;\n  }\n\n}\nSwapperStore.store = new Map();\nconst defaultSwapperOptions = {\n  mode: 'append'\n};\nconst defaultSwapperQueires = {\n  componentName: 'swapper',\n  instanseQuery: '[data-kt-swapper=\"true\"]',\n  attrQuery: 'data-kt-swapper-'\n};\n\nclass SwapperComponent {\n  constructor(_element, _options, _queries) {\n    this.element = void 0;\n    this.options = void 0;\n    this.queries = void 0;\n\n    this.update = () => {\n      var _this$getOption;\n\n      const parentSelector = (_this$getOption = this.getOption('parent')) === null || _this$getOption === void 0 ? void 0 : _this$getOption.toString();\n      const mode = this.getOption('mode');\n      const parentElement = parentSelector ? document.querySelector(parentSelector) : null;\n\n      if (parentElement && this.element.parentNode !== parentElement) {\n        if (mode === 'prepend') {\n          parentElement.prepend(this.element);\n        } else if (mode === 'append') {\n          parentElement.append(this.element);\n        }\n      }\n    };\n\n    this.on = (name, handler) => {\n      return EventHandlerUtil.on(this.element, name, handler);\n    };\n\n    this.one = (name, handler) => {\n      return EventHandlerUtil.one(this.element, name, handler);\n    };\n\n    this.off = name => {\n      return EventHandlerUtil.off(this.element, name);\n    };\n\n    this.trigger = (name, event) => {\n      return EventHandlerUtil.trigger(this.element, name, event);\n    };\n\n    this.element = _element;\n    this.options = Object.assign(defaultSwapperOptions, _options);\n    this.queries = _queries; // Initial update\n\n    this.update();\n    SwapperStore.set(this.element.id, this);\n  }\n\n  getOption(name) {\n    const attr = this.element.getAttribute(`${this.queries.attrQuery}${name}`);\n\n    if (attr) {\n      let value = getAttributeValueByBreakpoint(attr);\n\n      if (attr != null && String(value) === 'true') {\n        return true;\n      } else if (value !== null && String(value) === 'false') {\n        return false;\n      }\n\n      return value;\n    } else {\n      const optionName = stringSnakeToCamel(name);\n      const option = getObjectPropertyValueByKey(this.options, optionName);\n\n      if (option) {\n        return getAttributeValueByBreakpoint(option);\n      } else {\n        return null;\n      }\n    }\n  } ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n\n} // Window resize handler\n\n\nSwapperComponent.getInstance = function (el) {\n  let componentName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultSwapperQueires.componentName;\n  const place = SwapperStore.get(el.id);\n\n  if (place) {\n    return place;\n  }\n\n  return null;\n};\n\nSwapperComponent.createInstances = function () {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSwapperQueires.instanseQuery;\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultSwapperOptions;\n  let queries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSwapperQueires;\n  const elements = document.body.querySelectorAll(selector);\n  elements.forEach(el => {\n    const item = el;\n    let place = SwapperComponent.getInstance(item);\n\n    if (!place) {\n      place = new SwapperComponent(item, options, queries);\n    }\n  });\n};\n\nSwapperComponent.createInsance = function () {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSwapperQueires.instanseQuery;\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultSwapperOptions;\n  let queries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSwapperQueires;\n  const element = document.body.querySelector(selector);\n\n  if (!element) {\n    return;\n  }\n\n  const item = element;\n  let place = SwapperComponent.getInstance(item);\n\n  if (!place) {\n    place = new SwapperComponent(item, options, queries);\n  }\n\n  return place;\n};\n\nSwapperComponent.bootstrap = function () {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSwapperQueires.instanseQuery;\n  SwapperComponent.createInstances(selector);\n};\n\nSwapperComponent.reinitialization = function () {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSwapperQueires.instanseQuery;\n  SwapperComponent.createInstances(selector);\n};\n\nwindow.addEventListener('resize', function () {\n  let timer;\n  throttle(timer, () => {\n    // Locate and update Offcanvas instances on window resize\n    const elements = document.querySelectorAll(defaultSwapperQueires.instanseQuery);\n    elements.forEach(el => {\n      const place = SwapperComponent.getInstance(el);\n\n      if (place) {\n        place.update();\n      }\n    });\n  }, 200);\n});\nexport { SwapperComponent, defaultSwapperOptions, defaultSwapperQueires };","map":{"version":3,"names":["getAttributeValueByBreakpoint","stringSnakeToCamel","getObjectPropertyValueByKey","EventHandlerUtil","throttle","SwapperStore","set","instanceId","drawerComponentObj","has","store","get","remove","delete","getAllInstances","Map","defaultSwapperOptions","mode","defaultSwapperQueires","componentName","instanseQuery","attrQuery","SwapperComponent","constructor","_element","_options","_queries","element","options","queries","update","parentSelector","getOption","toString","parentElement","document","querySelector","parentNode","prepend","append","on","name","handler","one","off","trigger","event","Object","assign","id","attr","getAttribute","value","String","optionName","option","getInstance","el","place","createInstances","selector","elements","body","querySelectorAll","forEach","item","createInsance","bootstrap","reinitialization","window","addEventListener","timer"],"sources":["C:/Users/KT2/Desktop/ssc.fe.cheatview-main/src/_metronic/assets/ts/components/_SwapperComponent.ts"],"sourcesContent":["import {\n  getAttributeValueByBreakpoint,\n  stringSnakeToCamel,\n  getObjectPropertyValueByKey,\n  EventHandlerUtil,\n  throttle,\n} from '../_utils/index'\n\nexport class SwapperStore {\n  static store: Map<string, SwapperComponent> = new Map()\n\n  public static set(instanceId: string, drawerComponentObj: SwapperComponent): void {\n    if (SwapperStore.has(instanceId)) {\n      return\n    }\n\n    SwapperStore.store.set(instanceId, drawerComponentObj)\n  }\n\n  public static get(instanceId: string): SwapperComponent | undefined {\n    if (!SwapperStore.has(instanceId)) {\n      return\n    }\n    return SwapperStore.store.get(instanceId)\n  }\n\n  public static remove(instanceId: string): void {\n    if (!SwapperStore.has(instanceId)) {\n      return\n    }\n\n    SwapperStore.store.delete(instanceId)\n  }\n\n  public static has(instanceId: string): boolean {\n    return SwapperStore.store.has(instanceId)\n  }\n\n  public static getAllInstances() {\n    return SwapperStore.store\n  }\n}\n\nexport interface ISwapperOptions {\n  mode: string\n}\n\nexport interface ISwapperQueries {\n  componentName: string\n  instanseQuery: string\n  attrQuery: string\n}\n\nconst defaultSwapperOptions: ISwapperOptions = {\n  mode: 'append',\n}\n\nconst defaultSwapperQueires: ISwapperQueries = {\n  componentName: 'swapper',\n  instanseQuery: '[data-kt-swapper=\"true\"]',\n  attrQuery: 'data-kt-swapper-',\n}\n\nclass SwapperComponent {\n  element: HTMLElement\n  options: ISwapperOptions\n  queries: ISwapperQueries\n\n  constructor(_element: HTMLElement, _options: ISwapperOptions, _queries: ISwapperQueries) {\n    this.element = _element\n    this.options = Object.assign(defaultSwapperOptions, _options)\n    this.queries = _queries\n\n    // Initial update\n    this.update()\n\n    SwapperStore.set(this.element.id, this)\n  }\n\n  private getOption(name: string) {\n    const attr = this.element.getAttribute(`${this.queries.attrQuery}${name}`)\n    if (attr) {\n      let value = getAttributeValueByBreakpoint(attr)\n      if (attr != null && String(value) === 'true') {\n        return true\n      } else if (value !== null && String(value) === 'false') {\n        return false\n      }\n      return value\n    } else {\n      const optionName = stringSnakeToCamel(name)\n      const option = getObjectPropertyValueByKey(this.options, optionName)\n      if (option) {\n        return getAttributeValueByBreakpoint(option)\n      } else {\n        return null\n      }\n    }\n  }\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n  public update = () => {\n    const parentSelector = this.getOption('parent')?.toString()\n    const mode = this.getOption('mode')\n    const parentElement = parentSelector ? document.querySelector(parentSelector) : null\n\n    if (parentElement && this.element.parentNode !== parentElement) {\n      if (mode === 'prepend') {\n        parentElement.prepend(this.element)\n      } else if (mode === 'append') {\n        parentElement.append(this.element)\n      }\n    }\n  }\n\n  // Event API\n  public on = (name: string, handler: Function) => {\n    return EventHandlerUtil.on(this.element, name, handler)\n  }\n\n  public one = (name: string, handler: Function) => {\n    return EventHandlerUtil.one(this.element, name, handler)\n  }\n\n  public off = (name: string) => {\n    return EventHandlerUtil.off(this.element, name)\n  }\n\n  public trigger = (name: string, event: Event) => {\n    return EventHandlerUtil.trigger(this.element, name, event)\n  }\n\n  // Static methods\n  public static getInstance = (\n    el: HTMLElement,\n    componentName: string = defaultSwapperQueires.componentName\n  ): SwapperComponent | null => {\n    const place = SwapperStore.get(el.id)\n    if (place) {\n      return place as SwapperComponent\n    }\n\n    return null\n  }\n\n  public static createInstances = (\n    selector: string = defaultSwapperQueires.instanseQuery,\n    options: ISwapperOptions = defaultSwapperOptions,\n    queries: ISwapperQueries = defaultSwapperQueires\n  ) => {\n    const elements = document.body.querySelectorAll(selector)\n    elements.forEach((el) => {\n      const item = el as HTMLElement\n      let place = SwapperComponent.getInstance(item)\n      if (!place) {\n        place = new SwapperComponent(item, options, queries)\n      }\n    })\n  }\n\n  public static createInsance = (\n    selector: string = defaultSwapperQueires.instanseQuery,\n    options: ISwapperOptions = defaultSwapperOptions,\n    queries: ISwapperQueries = defaultSwapperQueires\n  ): SwapperComponent | undefined => {\n    const element = document.body.querySelector(selector)\n    if (!element) {\n      return\n    }\n    const item = element as HTMLElement\n    let place = SwapperComponent.getInstance(item)\n    if (!place) {\n      place = new SwapperComponent(item, options, queries)\n    }\n    return place\n  }\n\n  public static bootstrap = (selector: string = defaultSwapperQueires.instanseQuery) => {\n    SwapperComponent.createInstances(selector)\n  }\n\n  public static reinitialization = (selector: string = defaultSwapperQueires.instanseQuery) => {\n    SwapperComponent.createInstances(selector)\n  }\n}\n\n// Window resize handler\nwindow.addEventListener('resize', function () {\n  let timer\n  throttle(\n    timer,\n    () => {\n      // Locate and update Offcanvas instances on window resize\n      const elements = document.querySelectorAll(defaultSwapperQueires.instanseQuery)\n      elements.forEach((el) => {\n        const place = SwapperComponent.getInstance(el as HTMLElement)\n        if (place) {\n          place.update()\n        }\n      })\n    },\n    200\n  )\n})\n\nexport {SwapperComponent, defaultSwapperOptions, defaultSwapperQueires}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}