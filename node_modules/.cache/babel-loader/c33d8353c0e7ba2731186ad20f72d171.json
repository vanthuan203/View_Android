{"ast":null,"code":"import { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { getListAccount, updateAccount } from './AccountCRUD';\nexport const actionTypes = {\n  RequestAccount: '[Accounts] Requested',\n  AccountsLoadedSuccess: '[Accounts] Loaded succcess',\n  AccountsLoadedFail: '[Accounts] load fail',\n  ShowCurrentAccount: '[Accounts] Show Account',\n  RequestUpdate: '[Accounts] Requested Update',\n  UpdateSuccess: '[Accounts] Update Success',\n  UpdateFail: '[Accounts] Update Fail',\n  ClearSelected: '[Accounts] Clear selected account'\n};\nconst initialAccountState = {\n  accounts: [],\n  loading: false,\n  currentAccount: undefined\n};\nexport const reducer = persistReducer({\n  storage,\n  key: 'v1-accounts',\n  whitelist: []\n}, function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialAccountState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.RequestAccount:\n      {\n        return { ...state,\n          accounts: [],\n          loading: true\n        };\n      }\n\n    case actionTypes.AccountsLoadedSuccess:\n      {\n        var _action$payload;\n\n        return { ...state,\n          accounts: ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.accounts) || [],\n          loading: false\n        };\n      }\n\n    case actionTypes.AccountsLoadedFail:\n      {\n        return { ...state,\n          accounts: [],\n          loading: false\n        };\n      }\n\n    case actionTypes.RequestUpdate:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    case actionTypes.UpdateSuccess:\n      {\n        const remapAccounts = state.accounts.map(item => {\n          var _action$payload2, _action$payload2$curr;\n\n          if (item.id === ((_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : (_action$payload2$curr = _action$payload2.currentAccount) === null || _action$payload2$curr === void 0 ? void 0 : _action$payload2$curr.id)) {\n            var _action$payload3;\n\n            return (_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.currentAccount;\n          } else {\n            return item;\n          }\n        });\n        return { ...state,\n          accounts: remapAccounts,\n          loading: false,\n          currentAccount: undefined\n        };\n      }\n\n    case actionTypes.UpdateFail:\n      {\n        return { ...state,\n          loading: false\n        };\n      }\n\n    case actionTypes.ShowCurrentAccount:\n      {\n        var _action$payload4;\n\n        return { ...state,\n          currentAccount: (_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : _action$payload4.currentAccount\n        };\n      }\n\n    case actionTypes.ClearSelected:\n      {\n        var _action$payload5;\n\n        return { ...state,\n          currentAccount: (_action$payload5 = action.payload) === null || _action$payload5 === void 0 ? void 0 : _action$payload5.currentAccount\n        };\n      }\n\n    default:\n      return state;\n  }\n});\nexport const actions = {\n  requestAccounts: us => ({\n    type: actionTypes.RequestAccount\n  }),\n  fulfillAccounts: accounts => ({\n    type: actionTypes.AccountsLoadedSuccess,\n    payload: {\n      accounts\n    }\n  }),\n  loadAccountsFail: message => ({\n    type: actionTypes.AccountsLoadedFail,\n    payload: {\n      message\n    }\n  }),\n  requestUpdate: account => ({\n    type: actionTypes.RequestUpdate,\n    payload: {\n      account\n    }\n  }),\n  updateSuccess: currentAccount => ({\n    type: actionTypes.UpdateSuccess,\n    payload: {\n      currentAccount\n    }\n  }),\n  updateFail: message => ({\n    type: actionTypes.UpdateFail,\n    payload: {\n      message\n    }\n  }),\n  showCurrentAccount: currentAccount => ({\n    type: actionTypes.ShowCurrentAccount,\n    payload: {\n      currentAccount\n    }\n  }),\n  clearCurrentAccount: () => ({\n    type: actionTypes.ClearSelected\n  })\n};\nexport function* saga() {\n  yield takeLatest(actionTypes.RequestAccount, function* userRequested(param) {\n    const {\n      data: accounts\n    } = yield getListAccount();\n    yield put(actions.fulfillAccounts(accounts.accounts));\n  });\n  yield takeLatest(actionTypes.RequestUpdate, function* updateUserRequested(param) {\n    //console.log(\"------update account param-----\",param.payload.account)\n    const {\n      data: account\n    } = yield updateAccount(param.payload.account); //console.log(\"------update account res-----\",account.account)\n\n    yield put(actions.updateSuccess(account.account));\n  });\n}","map":{"version":3,"names":["persistReducer","storage","put","takeLatest","getListAccount","updateAccount","actionTypes","RequestAccount","AccountsLoadedSuccess","AccountsLoadedFail","ShowCurrentAccount","RequestUpdate","UpdateSuccess","UpdateFail","ClearSelected","initialAccountState","accounts","loading","currentAccount","undefined","reducer","key","whitelist","state","action","type","payload","remapAccounts","map","item","id","actions","requestAccounts","us","fulfillAccounts","loadAccountsFail","message","requestUpdate","account","updateSuccess","updateFail","showCurrentAccount","clearCurrentAccount","saga","userRequested","param","data","updateUserRequested"],"sources":["C:/Users/KT2/Desktop/ssc.fe.cheatview-main/src/app/modules/accounts/redux/AccountRedux.ts"],"sourcesContent":["import { Action } from '@reduxjs/toolkit'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { put, takeLatest } from 'redux-saga/effects'\nimport { AccountModel } from '../models/Account'\nimport { getListAccount,updateAccount } from './AccountCRUD'\nexport interface ActionWithPayload<T> extends Action {\n  payload?: T\n}\n\nexport const actionTypes = {\n  RequestAccount: '[Accounts] Requested',\n  AccountsLoadedSuccess: '[Accounts] Loaded succcess',\n  AccountsLoadedFail: '[Accounts] load fail',\n  ShowCurrentAccount: '[Accounts] Show Account',\n  RequestUpdate: '[Accounts] Requested Update',\n  UpdateSuccess: '[Accounts] Update Success',\n  UpdateFail: '[Accounts] Update Fail',\n  ClearSelected:'[Accounts] Clear selected account',\n}\n\nconst initialAccountState: IAccountState = {\n  accounts: [],\n  loading: false,\n  currentAccount:undefined\n}\n\nexport interface IAccountState {\n  accounts: AccountModel[]\n  loading: boolean\n  currentAccount?:AccountModel\n}\n\nexport const reducer = persistReducer(\n  { storage, key: 'v1-accounts', whitelist: [] },\n  (state: IAccountState = initialAccountState, action: ActionWithPayload<IAccountState>) => {\n    switch (action.type) {\n      case actionTypes.RequestAccount: {\n        return {\n          ...state,\n          accounts: [],\n          loading: true\n        }\n      }\n      case actionTypes.AccountsLoadedSuccess: {\n        return {\n          ...state,\n          accounts: action.payload?.accounts || [],\n          loading: false\n        }\n      }\n      case actionTypes.AccountsLoadedFail: {\n        return {\n          ...state,\n          accounts: [],\n          loading: false\n        }\n      }\n      case actionTypes.RequestUpdate: {\n        return {\n          ...state,\n          loading: true\n        }\n      }\n      case actionTypes.UpdateSuccess: {\n        const remapAccounts = state.accounts.map((item:AccountModel)=>{\n          if(item.id===action.payload?.currentAccount?.id){\n            return action.payload?.currentAccount\n          }else {\n            return item\n          }\n        })\n        return {\n          ...state,\n          accounts:remapAccounts,\n          loading: false,\n          currentAccount: undefined\n        }\n      }\n      case actionTypes.UpdateFail: {\n        return {\n          ...state,\n          loading: false\n        }\n      }\n      case actionTypes.ShowCurrentAccount: {\n        return {\n          ...state,\n          currentAccount: action.payload?.currentAccount\n        }\n      }\n      case actionTypes.ClearSelected: {\n        return {\n          ...state,\n          currentAccount: action.payload?.currentAccount\n        }\n      }\n      default:\n        return state\n    }\n  }\n)\n\nexport const actions = {\n  requestAccounts: (us) => ({ type: actionTypes.RequestAccount }),\n  fulfillAccounts: (accounts: AccountModel[]) => ({ type: actionTypes.AccountsLoadedSuccess, payload: { accounts } }),\n  loadAccountsFail: (message: string) => ({ type: actionTypes.AccountsLoadedFail, payload: { message } }),\n  requestUpdate: (account: AccountModel) => ({ type: actionTypes.RequestUpdate, payload: { account } }),\n  updateSuccess: (currentAccount: AccountModel) => ({ type: actionTypes.UpdateSuccess, payload: { currentAccount } }),\n  updateFail: (message: string) => ({ type: actionTypes.UpdateFail, payload: { message } }),\n  showCurrentAccount: (currentAccount: AccountModel) => ({ type: actionTypes.ShowCurrentAccount, payload: { currentAccount } }),\n  clearCurrentAccount: () => ({ type: actionTypes.ClearSelected}),\n}\n\nexport function* saga() {\n  yield takeLatest(actionTypes.RequestAccount, function* userRequested(param: any) {\n    const {data: accounts} = yield getListAccount()\n    yield put(actions.fulfillAccounts(accounts.accounts))\n  })\n  yield takeLatest(actionTypes.RequestUpdate, function* updateUserRequested(param: any) {\n    //console.log(\"------update account param-----\",param.payload.account)\n    const {data: account} = yield updateAccount(param.payload.account)\n    //console.log(\"------update account res-----\",account.account)\n    yield put(actions.updateSuccess(account.account))\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}