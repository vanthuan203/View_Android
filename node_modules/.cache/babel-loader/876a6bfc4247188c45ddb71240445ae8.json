{"ast":null,"code":"import { DataUtil, getUniqueIdWithPrefix, EventHandlerUtil } from '../_utils/index'; // Helpers\n\nimport { CookieComponent } from './_CookieComponent';\nconst defaultToggleOptions = {\n  saveState: false\n};\n\nclass ToggleComponent {\n  constructor(_element, options) {\n    this.element = void 0;\n    this.instanceUid = void 0;\n    this.options = void 0;\n    this.state = '';\n    this.target = null;\n    this.attribute = '';\n\n    this._handlers = () => {\n      this.element.addEventListener('click', e => {\n        e.preventDefault();\n\n        this._toggle();\n      });\n    };\n\n    this._toggle = () => {\n      // Trigger \"after.toggle\" event\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.change');\n\n      if (this._isEnabled()) {\n        this._disable();\n      } else {\n        this._enable();\n      } // Trigger \"before.toggle\" event\n\n\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.changed');\n      return this;\n    };\n\n    this._enable = () => {\n      var _this$target;\n\n      if (this._isEnabled()) {\n        return;\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.enable');\n      (_this$target = this.target) === null || _this$target === void 0 ? void 0 : _this$target.setAttribute(this.attribute, 'on');\n\n      if (this.state.length > 0) {\n        this.element.classList.add(this.state);\n      }\n\n      if (this.options.saveState) {\n        CookieComponent.set(this.attribute, 'on', {});\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.enabled');\n      return this;\n    };\n\n    this._disable = () => {\n      var _this$target2;\n\n      if (!this._isEnabled()) {\n        return false;\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.disable');\n      (_this$target2 = this.target) === null || _this$target2 === void 0 ? void 0 : _this$target2.removeAttribute(this.attribute);\n\n      if (this.state.length > 0) {\n        this.element.classList.remove(this.state);\n      }\n\n      if (this.options.saveState) {\n        CookieComponent.delete(this.attribute);\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.toggle.disabled');\n      return this;\n    };\n\n    this._isEnabled = () => {\n      if (!this.target) {\n        return false;\n      }\n\n      return String(this.target.getAttribute(this.attribute)).toLowerCase() === 'on';\n    };\n\n    this.toggle = () => {\n      return this._toggle();\n    };\n\n    this.enable = () => {\n      return this._enable();\n    };\n\n    this.disable = () => {\n      return this._disable();\n    };\n\n    this.isEnabled = () => {\n      return this._isEnabled();\n    };\n\n    this.goElement = () => {\n      return this.element;\n    };\n\n    this.on = (name, handler) => {\n      return EventHandlerUtil.on(this.element, name, handler);\n    };\n\n    this.one = (name, handler) => {\n      return EventHandlerUtil.one(this.element, name, handler);\n    };\n\n    this.off = name => {\n      return EventHandlerUtil.off(this.element, name);\n    };\n\n    this.trigger = (name, event) => {\n      return EventHandlerUtil.trigger(this.element, name, event);\n    };\n\n    this.options = Object.assign(defaultToggleOptions, options);\n    this.instanceUid = getUniqueIdWithPrefix('toggle');\n    this.element = _element;\n    const elementTargetAttr = this.element.getAttribute('data-kt-toggle-target');\n\n    if (elementTargetAttr) {\n      this.target = document.querySelector(elementTargetAttr);\n    }\n\n    const elementToggleAttr = this.element.getAttribute('data-kt-toggle-state');\n    this.state = elementToggleAttr || '';\n    this.attribute = 'data-kt-' + this.element.getAttribute('data-kt-toggle-name'); // Event Handlers\n\n    this._handlers(); // Update Instance\n    // Bind Instance\n\n\n    DataUtil.set(this.element, 'toggle', this);\n  }\n\n}\n\nToggleComponent.getInstance = el => {\n  const toggleElement = DataUtil.get(el, 'toggle');\n\n  if (toggleElement) {\n    return toggleElement;\n  }\n\n  return null;\n};\n\nToggleComponent.createInstances = selector => {\n  const elements = document.body.querySelectorAll(selector);\n  elements.forEach(el => {\n    const item = el;\n    let toggleElement = ToggleComponent.getInstance(item);\n\n    if (!toggleElement) {\n      toggleElement = new ToggleComponent(item, defaultToggleOptions);\n    }\n  });\n};\n\nToggleComponent.createInsance = function (selector) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultToggleOptions;\n  const element = document.body.querySelector(selector);\n\n  if (!element) {\n    return;\n  }\n\n  const item = element;\n  let toggle = ToggleComponent.getInstance(item);\n\n  if (!toggle) {\n    toggle = new ToggleComponent(item, options);\n  }\n\n  return toggle;\n};\n\nToggleComponent.reinitialization = () => {\n  ToggleComponent.createInstances('[data-kt-toggle]');\n};\n\nToggleComponent.bootstrap = () => {\n  ToggleComponent.createInstances('[data-kt-toggle]');\n};\n\nexport { ToggleComponent, defaultToggleOptions };","map":{"version":3,"names":["DataUtil","getUniqueIdWithPrefix","EventHandlerUtil","CookieComponent","defaultToggleOptions","saveState","ToggleComponent","constructor","_element","options","element","instanceUid","state","target","attribute","_handlers","addEventListener","e","preventDefault","_toggle","trigger","_isEnabled","_disable","_enable","setAttribute","length","classList","add","set","removeAttribute","remove","delete","String","getAttribute","toLowerCase","toggle","enable","disable","isEnabled","goElement","on","name","handler","one","off","event","Object","assign","elementTargetAttr","document","querySelector","elementToggleAttr","getInstance","el","toggleElement","get","createInstances","selector","elements","body","querySelectorAll","forEach","item","createInsance","reinitialization","bootstrap"],"sources":["C:/Users/KT2/OneDrive/Documents/Buffh/ssc.fe.cheatview-main/src/_metronic/assets/ts/components/_ToggleComponent.ts"],"sourcesContent":["import {DataUtil, getUniqueIdWithPrefix, EventHandlerUtil} from '../_utils/index'\n// Helpers\nimport {CookieComponent} from './_CookieComponent'\n\nexport interface ToggleOptions {\n  saveState: boolean\n  targetState?: string\n  toggleState?: string\n  targetToggleMode?: string\n}\n\nconst defaultToggleOptions: ToggleOptions = {\n  saveState: false,\n}\n\nclass ToggleComponent {\n  element: HTMLElement\n  instanceUid: string\n  options: ToggleOptions\n  state: string = ''\n  target: HTMLElement | null = null\n  attribute: string = ''\n\n  constructor(_element: HTMLElement, options: ToggleOptions) {\n    this.options = Object.assign(defaultToggleOptions, options)\n    this.instanceUid = getUniqueIdWithPrefix('toggle')\n    this.element = _element\n\n    const elementTargetAttr = this.element.getAttribute('data-kt-toggle-target')\n    if (elementTargetAttr) {\n      this.target = document.querySelector(elementTargetAttr)\n    }\n    const elementToggleAttr = this.element.getAttribute('data-kt-toggle-state')\n    this.state = elementToggleAttr || ''\n    this.attribute = 'data-kt-' + this.element.getAttribute('data-kt-toggle-name')\n\n    // Event Handlers\n    this._handlers()\n\n    // Update Instance\n    // Bind Instance\n    DataUtil.set(this.element, 'toggle', this)\n  }\n\n  private _handlers = () => {\n    this.element.addEventListener('click', (e: Event) => {\n      e.preventDefault()\n      this._toggle()\n    })\n  }\n\n  // Event handlers\n  private _toggle = () => {\n    // Trigger \"after.toggle\" event\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.change')\n\n    if (this._isEnabled()) {\n      this._disable()\n    } else {\n      this._enable()\n    }\n\n    // Trigger \"before.toggle\" event\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.changed')\n    return this\n  }\n\n  private _enable = () => {\n    if (this._isEnabled()) {\n      return\n    }\n\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.enable')\n    this.target?.setAttribute(this.attribute, 'on')\n    if (this.state.length > 0) {\n      this.element.classList.add(this.state)\n    }\n\n    if (this.options.saveState) {\n      CookieComponent.set(this.attribute, 'on', {})\n    }\n\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.enabled')\n    return this\n  }\n\n  private _disable = () => {\n    if (!this._isEnabled()) {\n      return false\n    }\n\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.disable')\n    this.target?.removeAttribute(this.attribute)\n\n    if (this.state.length > 0) {\n      this.element.classList.remove(this.state)\n    }\n\n    if (this.options.saveState) {\n      CookieComponent.delete(this.attribute)\n    }\n\n    EventHandlerUtil.trigger(this.element, 'kt.toggle.disabled')\n    return this\n  }\n\n  private _isEnabled = () => {\n    if (!this.target) {\n      return false\n    }\n\n    return String(this.target.getAttribute(this.attribute)).toLowerCase() === 'on'\n  }\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Plugin API\n  // Plugin API\n  public toggle = () => {\n    return this._toggle()\n  }\n\n  public enable = () => {\n    return this._enable()\n  }\n\n  public disable = () => {\n    return this._disable()\n  }\n\n  public isEnabled = () => {\n    return this._isEnabled()\n  }\n\n  public goElement = () => {\n    return this.element\n  }\n\n  // Event API\n  public on = (name: string, handler: Function) => {\n    return EventHandlerUtil.on(this.element, name, handler)\n  }\n\n  public one = (name: string, handler: Function) => {\n    return EventHandlerUtil.one(this.element, name, handler)\n  }\n\n  public off = (name: string) => {\n    return EventHandlerUtil.off(this.element, name)\n  }\n\n  public trigger = (name: string, event?: Event) => {\n    return EventHandlerUtil.trigger(this.element, name, event)\n  }\n\n  // Static methods\n  public static getInstance = (el: HTMLElement) => {\n    const toggleElement = DataUtil.get(el, 'toggle')\n    if (toggleElement) {\n      return toggleElement\n    }\n\n    return null\n  }\n\n  public static createInstances = (selector: string) => {\n    const elements = document.body.querySelectorAll(selector)\n    elements.forEach((el) => {\n      const item = el as HTMLElement\n      let toggleElement = ToggleComponent.getInstance(item)\n      if (!toggleElement) {\n        toggleElement = new ToggleComponent(item, defaultToggleOptions)\n      }\n    })\n  }\n\n  public static createInsance = (\n    selector: string,\n    options: ToggleOptions = defaultToggleOptions\n  ): ToggleComponent | undefined => {\n    const element = document.body.querySelector(selector)\n    if (!element) {\n      return\n    }\n    const item = element as HTMLElement\n    let toggle = ToggleComponent.getInstance(item)\n    if (!toggle) {\n      toggle = new ToggleComponent(item, options)\n    }\n    return toggle\n  }\n\n  public static reinitialization = () => {\n    ToggleComponent.createInstances('[data-kt-toggle]')\n  }\n\n  public static bootstrap = () => {\n    ToggleComponent.createInstances('[data-kt-toggle]')\n  }\n}\n\nexport {ToggleComponent, defaultToggleOptions}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}