{"ast":null,"code":"import { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { getListOrder, getOrderFilter, updateOrder, addOrder, addGroup, addOrderManual, deleteChannel } from './OrdersCRUD';\n\nconst sleep = milliseconds => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds));\n};\n\nexport const actionTypes = {\n  ShowOrdersFilter: '[Balance] Filter',\n  RequestOrders: '[Balance] Requested',\n  OrdersLoadedSuccess: '[Balance] Loaded succcess',\n  OrdersLoadedFail: '[Balance] load fail',\n  AddOrderRequest: '[Balance] Add Order Request',\n  AddOrderManualRequest: '[Balance] Add Order Manual Request',\n  AddOrderSuccess: '[Balance] Add Order Success',\n  AddOrdersSuccess: '[Balance] Add Orders Success',\n  AddOrderFail: '[Balance] Add Order Fail',\n  ShowcurrentOrder: '[Balance] Show Order',\n  RequestUpdate: '[Balance] Requested Update',\n  UpdateMultiOrderRequest: '[Balance] Update Multi Order Request',\n  UpdateSuccess: '[Balance] Update Success',\n  UpdateMultiSuccess: '[Balance] Update Multi Success',\n  UpdateFail: '[Balance] Update Fail',\n  ClearSelected: '[Balance] Clear selected account',\n  GroupLoadedRequest: '[Balance] Group Loaded Request',\n  GroupLoadedSuccess: '[Balance] Group Loaded Success',\n  GroupLoadedFail: '[Balance] Group Loaded Fail',\n  GroupAddRequest: '[Balance] GroupAddRequest',\n  GroupAddSuccess: '[Balance] Group Add Success',\n  GroupAddFail: '[Balance] Group Add Fail',\n  GroupDeleteRequest: '[Balance] Group Delete Request',\n  GroupDeleteSuccess: '[Balance] Group Delete Success',\n  SelectGroup: '[Balance] Select Group',\n  DeleteOrderRequest: '[Balance] Delete Order Request',\n  DeleteOrderSuccess: '[Balance] Delete Order Success',\n  CheckedChange: '[Balance] Checked Change',\n  CheckedAllChange: '[Balance] Checked All Change'\n};\nconst initialorderstate = {\n  orders: [],\n  loading: false,\n  adding: false,\n  groups: [],\n  currentOrder: undefined,\n  currentGroup: undefined,\n  channel_prior: 0\n};\nexport const reducer = persistReducer({\n  storage,\n  key: 'v1-orders',\n  whitelist: []\n}, function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialorderstate;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.RequestOrders:\n      {\n        return { ...state,\n          orders: [],\n          loading: true\n        };\n      }\n\n    case actionTypes.ShowOrdersFilter:\n      {\n        return { ...state,\n          orders: [],\n          loading: true\n        };\n      }\n\n    case actionTypes.OrdersLoadedSuccess:\n      {\n        var _action$payload;\n\n        return { ...state,\n          orders: ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.orders) || [],\n          loading: false\n        };\n      }\n\n    case actionTypes.GroupLoadedSuccess:\n      {\n        var _action$payload2;\n\n        return { ...state,\n          groups: (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.groups\n        };\n      }\n\n    case actionTypes.SelectGroup:\n      {\n        var _action$payload3;\n\n        return { ...state,\n          currentGroup: (_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.group\n        };\n      }\n\n    case actionTypes.GroupDeleteSuccess:\n      {\n        return { ...state,\n          currentGroup: undefined,\n          groups: state.groups.filter(item => {\n            var _action$payload4;\n\n            if (item.id === ((_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : _action$payload4.id)) {\n              return false;\n            }\n\n            return true;\n          })\n        };\n      }\n\n    case actionTypes.DeleteOrderSuccess:\n      {\n        return { ...state,\n          orders: state.orders.filter(item => {\n            var _action$payload5;\n\n            if (item.id === ((_action$payload5 = action.payload) === null || _action$payload5 === void 0 ? void 0 : _action$payload5.id)) {\n              return false;\n            }\n\n            return true;\n          })\n        };\n      }\n\n    case actionTypes.OrdersLoadedFail:\n      {\n        return { ...state,\n          orders: [],\n          loading: false\n        };\n      }\n\n    case actionTypes.RequestUpdate:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    case actionTypes.UpdateMultiOrderRequest:\n      {\n        return { ...state,\n          adding: true\n        };\n      }\n\n    case actionTypes.UpdateSuccess:\n      {\n        const remaporders = state.orders.map(item => {\n          var _action$payload6, _action$payload6$vide;\n\n          if (item.id === ((_action$payload6 = action.payload) === null || _action$payload6 === void 0 ? void 0 : (_action$payload6$vide = _action$payload6.videobuff) === null || _action$payload6$vide === void 0 ? void 0 : _action$payload6$vide.id)) {\n            var _action$payload7;\n\n            return (_action$payload7 = action.payload) === null || _action$payload7 === void 0 ? void 0 : _action$payload7.videobuff;\n          } else {\n            return item;\n          }\n        });\n        return { ...state,\n          orders: remaporders,\n          loading: true,\n          currentOrder: undefined\n        };\n      }\n\n    case actionTypes.UpdateMultiSuccess:\n      {\n        const remaporders = state.orders.map(item => {\n          var _action$payload8;\n\n          const findItem = (_action$payload8 = action.payload) === null || _action$payload8 === void 0 ? void 0 : _action$payload8.videobuff.find(_item => {\n            if (_item.id === item.id) {\n              return true;\n            }\n\n            return false;\n          });\n\n          if (findItem) {\n            return findItem;\n          }\n\n          return item;\n        });\n        return { ...state,\n          orders: remaporders,\n          loading: false,\n          adding: false,\n          currentOrder: undefined\n        };\n      }\n\n    case actionTypes.UpdateFail:\n      {\n        return { ...state,\n          loading: false\n        };\n      }\n\n    case actionTypes.AddOrderRequest:\n      {\n        return { ...state,\n          adding: true\n        };\n      }\n\n    case actionTypes.AddOrderManualRequest:\n      {\n        return { ...state,\n          adding: true\n        };\n      }\n\n    case actionTypes.GroupAddSuccess:\n      {\n        var _action$payload9;\n\n        return { ...state,\n          groups: state.groups.concat((_action$payload9 = action.payload) === null || _action$payload9 === void 0 ? void 0 : _action$payload9.group)\n        };\n      }\n\n    case actionTypes.AddOrderSuccess:\n      {\n        var _action$payload10;\n\n        return { ...state,\n          adding: false,\n          orders: state.orders.concat((_action$payload10 = action.payload) === null || _action$payload10 === void 0 ? void 0 : _action$payload10.order)\n        };\n      }\n\n    case actionTypes.AddOrdersSuccess:\n      {\n        var _action$payload11;\n\n        return { ...state,\n          adding: false,\n          orders: state.orders.concat((_action$payload11 = action.payload) === null || _action$payload11 === void 0 ? void 0 : _action$payload11.orders)\n        };\n      }\n\n    case actionTypes.AddOrderFail:\n      {\n        var _action$payload12;\n\n        return { ...state,\n          adding: false,\n          message: (_action$payload12 = action.payload) === null || _action$payload12 === void 0 ? void 0 : _action$payload12.message\n        };\n      }\n\n    case actionTypes.ShowcurrentOrder:\n      {\n        var _action$payload13;\n\n        return { ...state,\n          currentOrder: (_action$payload13 = action.payload) === null || _action$payload13 === void 0 ? void 0 : _action$payload13.currentOrder\n        };\n      }\n\n    case actionTypes.ClearSelected:\n      {\n        var _action$payload14;\n\n        return { ...state,\n          currentOrder: (_action$payload14 = action.payload) === null || _action$payload14 === void 0 ? void 0 : _action$payload14.currentOrder\n        };\n      }\n\n    case actionTypes.CheckedChange:\n      {\n        return { ...state,\n          orders: state.orders.map(item => {\n            var _action$payload15, _action$payload15$dat;\n\n            if (item.id === ((_action$payload15 = action.payload) === null || _action$payload15 === void 0 ? void 0 : (_action$payload15$dat = _action$payload15.data) === null || _action$payload15$dat === void 0 ? void 0 : _action$payload15$dat.id)) {\n              var _action$payload16, _action$payload16$dat;\n\n              return { ...item,\n                checked: action === null || action === void 0 ? void 0 : (_action$payload16 = action.payload) === null || _action$payload16 === void 0 ? void 0 : (_action$payload16$dat = _action$payload16.data) === null || _action$payload16$dat === void 0 ? void 0 : _action$payload16$dat.checked\n              };\n            }\n\n            return item;\n          })\n        };\n      }\n\n    case actionTypes.CheckedAllChange:\n      {\n        return { ...state,\n          orders: state.orders.map(item => {\n            var _action$payload17;\n\n            return { ...item,\n              checked: action === null || action === void 0 ? void 0 : (_action$payload17 = action.payload) === null || _action$payload17 === void 0 ? void 0 : _action$payload17.checked\n            };\n          })\n        };\n      }\n\n    default:\n      return state;\n  }\n});\nexport const actions = {\n  requestOrders: user => ({\n    type: actionTypes.RequestOrders,\n    payload: {\n      user\n    }\n  }),\n  showordersfilter: (key, user) => ({\n    type: actionTypes.ShowOrdersFilter,\n    payload: {\n      key,\n      user\n    }\n  }),\n  fulfillorders: orders => ({\n    type: actionTypes.OrdersLoadedSuccess,\n    payload: {\n      orders\n    }\n  }),\n  loadordersFail: message => ({\n    type: actionTypes.OrdersLoadedFail,\n    payload: {\n      message\n    }\n  }),\n  addOrderRequest: data => ({\n    type: actionTypes.AddOrderRequest,\n    payload: {\n      data\n    }\n  }),\n  addOrderManualRequest: data => ({\n    type: actionTypes.AddOrderManualRequest,\n    payload: {\n      data\n    }\n  }),\n  editMultiOrderRequest: data => ({\n    type: actionTypes.UpdateMultiOrderRequest,\n    payload: {\n      data\n    }\n  }),\n  addOrderSuccess: order => ({\n    type: actionTypes.AddOrderSuccess,\n    payload: {\n      order\n    }\n  }),\n  addOrdersSuccess: orders => ({\n    type: actionTypes.AddOrdersSuccess,\n    payload: {\n      orders\n    }\n  }),\n  addOrderFail: message => ({\n    type: actionTypes.AddOrderFail,\n    payload: {\n      message\n    }\n  }),\n  requestUpdate: videobuff => ({\n    type: actionTypes.RequestUpdate,\n    payload: {\n      videobuff\n    }\n  }),\n  updateSuccess: videobuff => ({\n    type: actionTypes.UpdateSuccess,\n    payload: {\n      videobuff\n    }\n  }),\n  updateMultiSuccess: videobuff => ({\n    type: actionTypes.UpdateMultiSuccess,\n    payload: {\n      videobuff\n    }\n  }),\n  updateFail: message => ({\n    type: actionTypes.UpdateFail,\n    payload: {\n      message\n    }\n  }),\n  showcurrentOrder: currentOrder => ({\n    type: actionTypes.ShowcurrentOrder,\n    payload: {\n      currentOrder\n    }\n  }),\n  clearcurrentOrder: () => ({\n    type: actionTypes.ClearSelected\n  }),\n  requestGroups: () => ({\n    type: actionTypes.GroupLoadedRequest\n  }),\n  fulfillGroups: groups => ({\n    type: actionTypes.GroupLoadedSuccess,\n    payload: {\n      groups\n    }\n  }),\n  addGroupRequest: groupName => ({\n    type: actionTypes.GroupAddRequest,\n    payload: {\n      groupName\n    }\n  }),\n  addGroupSuccess: group => ({\n    type: actionTypes.GroupAddSuccess,\n    payload: {\n      group\n    }\n  }),\n  deleteGroupRequest: id => ({\n    type: actionTypes.GroupDeleteRequest,\n    payload: {\n      id\n    }\n  }),\n  deleteGroupSuccess: id => ({\n    type: actionTypes.GroupDeleteSuccess,\n    payload: {\n      id\n    }\n  }),\n  selectGroup: group => ({\n    type: actionTypes.SelectGroup,\n    payload: {\n      group\n    }\n  }),\n  deleteOrderRequest: videoid => ({\n    type: actionTypes.DeleteOrderRequest,\n    payload: {\n      videoid\n    }\n  }),\n  deleteOrderSuccess: videoid => ({\n    type: actionTypes.DeleteOrderSuccess,\n    payload: {\n      videoid\n    }\n  }),\n  checkedChange: data => ({\n    type: actionTypes.CheckedChange,\n    payload: {\n      data\n    }\n  }),\n  checkedAllChange: checked => ({\n    type: actionTypes.CheckedAllChange,\n    payload: {\n      checked\n    }\n  })\n};\nexport function* saga() {\n  yield takeLatest(actionTypes.RequestOrders, function* userRequested(param) {\n    const payload = param.payload.user;\n    const {\n      data: orders\n    } = yield getListOrder(payload);\n    yield put(actions.fulfillorders(orders.videobuff));\n  });\n  yield takeLatest(actionTypes.ShowOrdersFilter, function* userRequestedd(param) {\n    const payload = param.payload;\n    const {\n      data: orders\n    } = yield getOrderFilter(payload.key, payload.user);\n    yield put(actions.fulfillorders(orders.videobuff));\n  });\n\n  http: //localhost:8080/Fitnees/\n  yield takeLatest(actionTypes.RequestUpdate, function* updateUserRequested(param) {\n    const {\n      data: result\n    } = yield updateOrder(param.payload.videobuff);\n\n    if (result && result.videobuff) {\n      yield put(actions.updateMultiSuccess(result.videobuff));\n    } else {\n      yield put(actions.addOrderFail(result.message));\n    }\n  });\n\n  yield takeLatest(actionTypes.AddOrderManualRequest, function* addOrderRequest(param) {\n    const payload = param.payload.data;\n\n    try {\n      const {\n        data: result\n      } = yield addOrderManual(payload);\n\n      if (result && result.videobuff) {\n        yield put(actions.addOrderSuccess(result.videobuff));\n      } else {\n        yield put(actions.addOrderFail(result.message));\n      }\n    } catch (error) {\n      yield put(actions.addOrderFail(\"\"));\n    }\n  });\n  yield takeLatest(actionTypes.AddOrderRequest, function* addOrderRequest(param) {\n    const payload = param.payload.data;\n\n    try {\n      const {\n        data: result\n      } = yield addOrder(payload);\n\n      if (result && (result.channel || result.channels)) {\n        if (payload.channel_id.includes(\"\\n\")) {\n          console.log(\"------channels------\", result.channels);\n          yield put(actions.addOrdersSuccess(result.channels));\n        } else {\n          yield put(actions.addOrderSuccess(result.channel));\n        }\n      } else {\n        yield put(actions.addOrderFail(result.message));\n      }\n    } catch (error) {\n      yield put(actions.addOrderFail(\"\"));\n    }\n  });\n  yield takeLatest(actionTypes.UpdateMultiOrderRequest, function* addOrderRequest(param) {\n    const payload = param.payload.data;\n\n    try {\n      const {\n        data: result\n      } = yield updateOrder(payload);\n\n      if (result && result.videobuff) {\n        yield put(actions.updateMultiSuccess(result.videobuff));\n      } else {\n        yield put(actions.addOrderFail(result.message));\n      }\n    } catch (error) {\n      yield put(actions.addOrderFail(\"\"));\n    }\n  });\n  yield takeLatest(actionTypes.GroupAddRequest, function* addOrderRequest(param) {\n    try {\n      const payload = param.payload.groupName;\n      const {\n        data: result\n      } = yield addGroup(payload);\n\n      if (result && result.group) {\n        yield put(actions.addGroupSuccess(result.group));\n      } else {}\n    } catch (error) {\n      yield put(actions.addOrderFail(\"\"));\n    }\n  });\n  yield takeLatest(actionTypes.DeleteOrderRequest, function* DeleteOrderRequest(param) {\n    try {\n      const payload = param.payload.videoid;\n      const {\n        data: result\n      } = yield deleteChannel(payload);\n\n      if (result && result.videobuffh !== null) {\n        yield put(actions.deleteOrderSuccess(payload));\n      } else {}\n    } catch (error) {}\n  });\n}","map":{"version":3,"names":["persistReducer","storage","put","takeLatest","getListOrder","getOrderFilter","updateOrder","addOrder","addGroup","addOrderManual","deleteChannel","sleep","milliseconds","Promise","resolve","setTimeout","actionTypes","ShowOrdersFilter","RequestOrders","OrdersLoadedSuccess","OrdersLoadedFail","AddOrderRequest","AddOrderManualRequest","AddOrderSuccess","AddOrdersSuccess","AddOrderFail","ShowcurrentOrder","RequestUpdate","UpdateMultiOrderRequest","UpdateSuccess","UpdateMultiSuccess","UpdateFail","ClearSelected","GroupLoadedRequest","GroupLoadedSuccess","GroupLoadedFail","GroupAddRequest","GroupAddSuccess","GroupAddFail","GroupDeleteRequest","GroupDeleteSuccess","SelectGroup","DeleteOrderRequest","DeleteOrderSuccess","CheckedChange","CheckedAllChange","initialorderstate","orders","loading","adding","groups","currentOrder","undefined","currentGroup","channel_prior","reducer","key","whitelist","state","action","type","payload","group","filter","item","id","remaporders","map","videobuff","findItem","find","_item","concat","order","message","data","checked","actions","requestOrders","user","showordersfilter","fulfillorders","loadordersFail","addOrderRequest","addOrderManualRequest","editMultiOrderRequest","addOrderSuccess","addOrdersSuccess","addOrderFail","requestUpdate","updateSuccess","updateMultiSuccess","updateFail","showcurrentOrder","clearcurrentOrder","requestGroups","fulfillGroups","addGroupRequest","groupName","addGroupSuccess","deleteGroupRequest","deleteGroupSuccess","selectGroup","deleteOrderRequest","videoid","deleteOrderSuccess","checkedChange","checkedAllChange","saga","userRequested","param","userRequestedd","http","updateUserRequested","result","error","channel","channels","channel_id","includes","console","log","videobuffh"],"sources":["C:/Users/KT2/OneDrive/Documents/Buffh/ssc.fe.cheatview-main/src/app/modules/balance/redux/OrdersRedux.ts"],"sourcesContent":["import { Action } from '@reduxjs/toolkit'\nimport { App } from 'app/App'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { put, takeLatest } from 'redux-saga/effects'\nimport { OrderModel, OrderPost,OrderFormManual, OrderForm, Group, OrderUpdateForm } from '../models/Order'\nimport { getListOrder,getOrderFilter, updateOrder, addOrder, addGroup,addOrderManual, updateSetting, deleteChannel, addOrderMulti } from './OrdersCRUD'\nconst sleep = (milliseconds: number) => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\nexport interface ActionWithPayload<T> extends Action {\n  payload?: T\n}\n\nexport const actionTypes = {\n  ShowOrdersFilter:'[Balance] Filter',\n  RequestOrders: '[Balance] Requested',\n  OrdersLoadedSuccess: '[Balance] Loaded succcess',\n  OrdersLoadedFail: '[Balance] load fail',\n  AddOrderRequest: '[Balance] Add Order Request',\n  AddOrderManualRequest: '[Balance] Add Order Manual Request',\n  AddOrderSuccess: '[Balance] Add Order Success',\n  AddOrdersSuccess: '[Balance] Add Orders Success',\n  AddOrderFail: '[Balance] Add Order Fail',\n  ShowcurrentOrder: '[Balance] Show Order',\n  RequestUpdate: '[Balance] Requested Update',\n  UpdateMultiOrderRequest: '[Balance] Update Multi Order Request',\n  UpdateSuccess: '[Balance] Update Success',\n  UpdateMultiSuccess: '[Balance] Update Multi Success',\n  UpdateFail: '[Balance] Update Fail',\n  ClearSelected: '[Balance] Clear selected account',\n  GroupLoadedRequest: '[Balance] Group Loaded Request',\n  GroupLoadedSuccess: '[Balance] Group Loaded Success',\n  GroupLoadedFail: '[Balance] Group Loaded Fail',\n  GroupAddRequest: '[Balance] GroupAddRequest',\n  GroupAddSuccess: '[Balance] Group Add Success',\n  GroupAddFail: '[Balance] Group Add Fail',\n  GroupDeleteRequest: '[Balance] Group Delete Request',\n  GroupDeleteSuccess: '[Balance] Group Delete Success',\n  SelectGroup: '[Balance] Select Group',\n  DeleteOrderRequest: '[Balance] Delete Order Request',\n  DeleteOrderSuccess: '[Balance] Delete Order Success',\n  CheckedChange: '[Balance] Checked Change',\n  CheckedAllChange: '[Balance] Checked All Change',\n}\n\nconst initialorderstate: Iorderstate = {\n  orders: [],\n  loading: false,\n  adding: false,\n  groups: [],\n  currentOrder: undefined,\n  currentGroup: undefined,\n  channel_prior: 0,\n  \n}\n\nexport interface Iorderstate {\n  orders: OrderModel[]\n  loading: boolean\n  adding: boolean\n  currentOrder?: OrderModel\n  groups: Group[]\n  currentGroup?: Group\n  channel_prior: number\n}\n\nexport const reducer = persistReducer(\n  { storage, key: 'v1-orders', whitelist: [] },\n  (state: Iorderstate = initialorderstate, action: ActionWithPayload<any>) => {\n    switch (action.type) {\n      case actionTypes.RequestOrders: {\n        return {\n          ...state,\n          orders: [],\n          loading: true\n        }\n      }\n      case actionTypes.ShowOrdersFilter: {\n        return {\n          ...state,\n          orders: [],\n          loading: true\n        }\n      }\n\n      case actionTypes.OrdersLoadedSuccess: {\n        return {\n          ...state,\n          orders: action.payload?.orders || [],\n          loading: false\n        }\n      }\n      case actionTypes.GroupLoadedSuccess: {\n        return {\n          ...state,\n          groups: action.payload?.groups\n        }\n      }\n      case actionTypes.SelectGroup: {\n        return {\n          ...state,\n          currentGroup: action.payload?.group\n        }\n      }\n      case actionTypes.GroupDeleteSuccess: {\n        return {\n          ...state,\n          currentGroup: undefined,\n          groups: state.groups.filter((item: Group) => {\n            if (item.id === action.payload?.id) {\n              return false\n            }\n            return true\n          })\n        }\n      }\n      case actionTypes.DeleteOrderSuccess: {\n        return {\n          ...state,\n          orders: state.orders.filter((item: OrderModel) => {\n            if (item.id === action.payload?.id) {\n              return false\n            }\n            return true\n          })\n        }\n      }\n      case actionTypes.OrdersLoadedFail: {\n        return {\n          ...state,\n          orders: [],\n          loading: false\n        }\n      }\n      case actionTypes.RequestUpdate: {\n        return {\n          ...state,\n          loading: true\n        }\n      }\n      case actionTypes.UpdateMultiOrderRequest: {\n        return {\n          ...state,\n          adding: true\n        }\n      }\n      case actionTypes.UpdateSuccess: {\n        const remaporders = state.orders.map((item: OrderModel) => {\n          if (item.id === action.payload?.videobuff?.id) {\n            return action.payload?.videobuff\n          } else {\n            return item\n          }\n        })\n        return {\n          ...state,\n          orders: remaporders,\n          loading: true,\n          currentOrder: undefined\n        }\n      }\n      case actionTypes.UpdateMultiSuccess: {\n        const remaporders = state.orders.map((item: OrderModel) => {\n          const findItem = action.payload?.videobuff.find((_item:OrderModel)=>{\n            if(_item.id===item.id){\n              return true\n            }\n            return false\n          })\n          if(findItem){\n            return findItem\n          }\n          return item\n        })\n        return {\n          ...state,\n          orders: remaporders,\n          loading: false,\n          adding: false,\n          currentOrder: undefined\n        }\n      }\n      case actionTypes.UpdateFail: {\n        return {\n          ...state,\n          loading: false\n        }\n      }\n      case actionTypes.AddOrderRequest: {\n        return {\n          ...state,\n          adding: true\n        }\n      }\n      case actionTypes.AddOrderManualRequest: {\n        return {\n          ...state,\n          adding: true\n        }\n      }\n      case actionTypes.GroupAddSuccess: {\n        return {\n          ...state,\n          groups: state.groups.concat(action.payload?.group)\n        }\n      }\n      case actionTypes.AddOrderSuccess: {\n        return {\n          ...state,\n          adding: false,\n          orders: state.orders.concat(action.payload?.order)\n        }\n      }\n      case actionTypes.AddOrdersSuccess: {\n        return {\n          ...state,\n          adding: false,\n          orders: state.orders.concat(action.payload?.orders)\n        }\n      }\n      case actionTypes.AddOrderFail: {\n        return {\n          ...state,\n          adding: false,\n          message: action.payload?.message\n        }\n      }\n      case actionTypes.ShowcurrentOrder: {\n        return {\n          ...state,\n          currentOrder: action.payload?.currentOrder\n        }\n      }\n      case actionTypes.ClearSelected: {\n        return {\n          ...state,\n          currentOrder: action.payload?.currentOrder\n        }\n      }\n      case actionTypes.CheckedChange: {\n        return {\n          ...state,\n          orders:  state.orders.map(item=>{\n            if(item.id===action.payload?.data?.id){\n              return {\n                ...item,\n                checked:action?.payload?.data?.checked\n              }\n            }\n            return item\n          })\n        }\n      }\n      case actionTypes.CheckedAllChange: {\n        return {\n          ...state,\n          orders:  state.orders.map(item=>{\n            return {\n              ...item,\n              checked:action?.payload?.checked\n            }\n          })\n        }\n      }\n      \n      \n\n      default:\n        return state\n    }\n  }\n)\n\nexport const actions = {\n  requestOrders: (user:string) => ({ type: actionTypes.RequestOrders ,payload:{user}}),\n  showordersfilter: (key: string,user:string) => ({ type: actionTypes.ShowOrdersFilter ,payload: { key,user }} ),\n  fulfillorders: (orders: OrderModel[]) => ({ type: actionTypes.OrdersLoadedSuccess, payload: { orders } }),\n  loadordersFail: (message: string) => ({ type: actionTypes.OrdersLoadedFail, payload: { message } }),\n  addOrderRequest: (data: OrderForm) => ({ type: actionTypes.AddOrderRequest, payload: { data } }),\n  addOrderManualRequest: (data: OrderFormManual) => ({ type: actionTypes.AddOrderManualRequest, payload: { data } }),\n  editMultiOrderRequest: (data: OrderForm) => ({ type: actionTypes.UpdateMultiOrderRequest, payload: { data } }),\n  addOrderSuccess: (order: OrderModel) => ({ type: actionTypes.AddOrderSuccess, payload: { order } }),\n  addOrdersSuccess: (orders: OrderModel[]) => ({ type: actionTypes.AddOrdersSuccess, payload: { orders } }),\n  addOrderFail: (message: string) => ({ type: actionTypes.AddOrderFail, payload: { message } }),\n  requestUpdate: (videobuff: OrderUpdateForm) => ({ type: actionTypes.RequestUpdate, payload: { videobuff } }),\n  updateSuccess: (videobuff: OrderModel[]) => ({ type: actionTypes.UpdateSuccess, payload: { videobuff } }),\n  updateMultiSuccess: (videobuff: OrderModel[]) => ({ type: actionTypes.UpdateMultiSuccess, payload: { videobuff } }),\n  updateFail: (message: string) => ({ type: actionTypes.UpdateFail, payload: { message } }),\n  showcurrentOrder: (currentOrder: OrderModel) => ({ type: actionTypes.ShowcurrentOrder, payload: { currentOrder } }),\n  clearcurrentOrder: () => ({ type: actionTypes.ClearSelected }),\n  requestGroups: () => ({ type: actionTypes.GroupLoadedRequest }),\n  fulfillGroups: (groups: Group[]) => ({ type: actionTypes.GroupLoadedSuccess, payload: { groups } }),\n  addGroupRequest: (groupName: string) => ({ type: actionTypes.GroupAddRequest, payload: { groupName } }),\n  addGroupSuccess: (group: Group) => ({ type: actionTypes.GroupAddSuccess, payload: { group } }),\n  deleteGroupRequest: (id: number) => ({ type: actionTypes.GroupDeleteRequest, payload: { id } }),\n  deleteGroupSuccess: (id: number) => ({ type: actionTypes.GroupDeleteSuccess, payload: { id } }),\n  selectGroup: (group: Group) => ({ type: actionTypes.SelectGroup, payload: { group } }),\n  deleteOrderRequest: (videoid: string) => ({ type: actionTypes.DeleteOrderRequest, payload: { videoid } }),\n  deleteOrderSuccess: (videoid: string) => ({ type: actionTypes.DeleteOrderSuccess, payload: { videoid } }),\n  checkedChange: (data:{videoid:string,checked:boolean}) => ({ type: actionTypes.CheckedChange, payload: { data } }),\n  checkedAllChange: (checked:boolean) => ({ type: actionTypes.CheckedAllChange, payload: { checked } }),\n}\n\nexport function* saga() {\n  yield takeLatest(actionTypes.RequestOrders, function* userRequested(param: any) {\n    const payload = param.payload.user\n    const { data: orders } = yield getListOrder(payload)\n    yield put(actions.fulfillorders(orders.videobuff))\n  })\n  yield takeLatest(actionTypes.ShowOrdersFilter, function* userRequestedd(param: any) {\n    const payload = param.payload\n    const { data: orders } = yield getOrderFilter(payload.key,payload.user)\n    yield put(actions.fulfillorders(orders.videobuff))\n  })\n\n  http://localhost:8080/Fitnees/\n\n  yield takeLatest(actionTypes.RequestUpdate, function* updateUserRequested(param: any) {\n    const { data: result } = yield updateOrder(param.payload.videobuff)\n    if (result && result.videobuff) {\n      yield put(actions.updateMultiSuccess(result.videobuff))\n    } else {\n      yield put(actions.addOrderFail(result.message))\n    }\n\n  })\n  \n  yield takeLatest(actionTypes.AddOrderManualRequest, function* addOrderRequest(param: any) {\n    const payload = param.payload.data\n    try {\n        const { data: result } = yield addOrderManual(payload)\n        if (result && (result.videobuff)) {\n            yield put(actions.addOrderSuccess(result.videobuff))\n        } else {\n          yield put(actions.addOrderFail(result.message))\n        }\n      \n    } catch (error) {\n      yield put(actions.addOrderFail(\"\"))\n    }\n  })\n  yield takeLatest(actionTypes.AddOrderRequest, function* addOrderRequest(param: any) {\n    const payload = param.payload.data\n    try {\n        const { data: result } = yield addOrder(payload)\n        if (result && (result.channel||result.channels)) {\n          if(payload.channel_id.includes(\"\\n\")){\n            console.log(\"------channels------\",result.channels)\n            yield put(actions.addOrdersSuccess(result.channels))\n          }else{\n            yield put(actions.addOrderSuccess(result.channel))\n          }\n        } else {\n          yield put(actions.addOrderFail(result.message))\n        }\n      \n    } catch (error) {\n      yield put(actions.addOrderFail(\"\"))\n    }\n  })\n\n  yield takeLatest(actionTypes.UpdateMultiOrderRequest, function* addOrderRequest(param: any) {\n    const payload = param.payload.data\n    try {\n        const { data: result } = yield updateOrder(payload)\n        if (result && result.videobuff) {\n          yield put(actions.updateMultiSuccess(result.videobuff))\n        } else {\n          yield put(actions.addOrderFail(result.message))\n        } \n    } catch (error) {\n      yield put(actions.addOrderFail(\"\"))\n    }\n  })\n\n  yield takeLatest(actionTypes.GroupAddRequest, function* addOrderRequest(param: any) {\n    try {\n      const payload = param.payload.groupName\n      const { data: result } = yield addGroup(payload)\n      if (result && result.group) {\n        yield put(actions.addGroupSuccess(result.group))\n      } else {\n\n      }\n    } catch (error) {\n      yield put(actions.addOrderFail(\"\"))\n    }\n  })\n\n  yield takeLatest(actionTypes.DeleteOrderRequest, function* DeleteOrderRequest(param: any) {\n    try {\n      const payload = param.payload.videoid\n      const { data: result } = yield deleteChannel(payload)\n      if (result&&result.videobuffh!==null) {\n        yield put(actions.deleteOrderSuccess(payload))\n      } else {\n\n      }\n    } catch (error) {\n\n    }\n  })\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}