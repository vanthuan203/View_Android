{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport getOffsetParent from './getOffsetParent';\nimport getOffset from './getOffset';\nimport getStyle from './getStyle';\nimport scrollTop from './scrollTop';\nimport scrollLeft from './scrollLeft';\nimport nodeName from './nodeName';\n/**\n * Get the position of a DOM element\n * @param node  The DOM element\n * @param offsetParent  The offset parent of the DOM element\n * @param calcMargin  Whether to calculate the margin\n * @returns  The position of the DOM element\n */\n\nexport default function getPosition(node, offsetParent, calcMargin) {\n  if (calcMargin === void 0) {\n    calcMargin = true;\n  }\n\n  var parentOffset = {\n    top: 0,\n    left: 0\n  };\n  var offset = null; // Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n  // because it is its only offset parent\n\n  if (getStyle(node, 'position') === 'fixed') {\n    offset = node.getBoundingClientRect();\n  } else {\n    offsetParent = offsetParent || getOffsetParent(node);\n    offset = getOffset(node);\n\n    if (nodeName(offsetParent) !== 'html') {\n      var nextParentOffset = getOffset(offsetParent);\n\n      if (nextParentOffset) {\n        parentOffset.top = nextParentOffset.top;\n        parentOffset.left = nextParentOffset.left;\n      }\n    }\n\n    parentOffset.top += parseInt(getStyle(offsetParent, 'borderTopWidth'), 10) - scrollTop(offsetParent) || 0;\n    parentOffset.left += parseInt(getStyle(offsetParent, 'borderLeftWidth'), 10) - scrollLeft(offsetParent) || 0;\n  } // Subtract parent offsets and node margins\n\n\n  if (offset) {\n    var marginTop = calcMargin ? parseInt(getStyle(node, 'marginTop'), 10) || 0 : 0;\n    var marginLeft = calcMargin ? parseInt(getStyle(node, 'marginLeft'), 10) || 0 : 0;\n    return _extends({}, offset, {\n      top: offset.top - parentOffset.top - marginTop,\n      left: offset.left - parentOffset.left - marginLeft\n    });\n  }\n\n  return null;\n}","map":{"version":3,"names":["_extends","getOffsetParent","getOffset","getStyle","scrollTop","scrollLeft","nodeName","getPosition","node","offsetParent","calcMargin","parentOffset","top","left","offset","getBoundingClientRect","nextParentOffset","parseInt","marginTop","marginLeft"],"sources":["C:/Users/KT2/OneDrive/Documents/Buffh/ssc.fe.cheatview-main/node_modules/dom-lib/esm/getPosition.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport getOffsetParent from './getOffsetParent';\nimport getOffset from './getOffset';\nimport getStyle from './getStyle';\nimport scrollTop from './scrollTop';\nimport scrollLeft from './scrollLeft';\nimport nodeName from './nodeName';\n/**\n * Get the position of a DOM element\n * @param node  The DOM element\n * @param offsetParent  The offset parent of the DOM element\n * @param calcMargin  Whether to calculate the margin\n * @returns  The position of the DOM element\n */\n\nexport default function getPosition(node, offsetParent, calcMargin) {\n  if (calcMargin === void 0) {\n    calcMargin = true;\n  }\n\n  var parentOffset = {\n    top: 0,\n    left: 0\n  };\n  var offset = null; // Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n  // because it is its only offset parent\n\n  if (getStyle(node, 'position') === 'fixed') {\n    offset = node.getBoundingClientRect();\n  } else {\n    offsetParent = offsetParent || getOffsetParent(node);\n    offset = getOffset(node);\n\n    if (nodeName(offsetParent) !== 'html') {\n      var nextParentOffset = getOffset(offsetParent);\n\n      if (nextParentOffset) {\n        parentOffset.top = nextParentOffset.top;\n        parentOffset.left = nextParentOffset.left;\n      }\n    }\n\n    parentOffset.top += parseInt(getStyle(offsetParent, 'borderTopWidth'), 10) - scrollTop(offsetParent) || 0;\n    parentOffset.left += parseInt(getStyle(offsetParent, 'borderLeftWidth'), 10) - scrollLeft(offsetParent) || 0;\n  } // Subtract parent offsets and node margins\n\n\n  if (offset) {\n    var marginTop = calcMargin ? parseInt(getStyle(node, 'marginTop'), 10) || 0 : 0;\n    var marginLeft = calcMargin ? parseInt(getStyle(node, 'marginLeft'), 10) || 0 : 0;\n    return _extends({}, offset, {\n      top: offset.top - parentOffset.top - marginTop,\n      left: offset.left - parentOffset.left - marginLeft\n    });\n  }\n\n  return null;\n}"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,YAA3B,EAAyCC,UAAzC,EAAqD;EAClE,IAAIA,UAAU,KAAK,KAAK,CAAxB,EAA2B;IACzBA,UAAU,GAAG,IAAb;EACD;;EAED,IAAIC,YAAY,GAAG;IACjBC,GAAG,EAAE,CADY;IAEjBC,IAAI,EAAE;EAFW,CAAnB;EAIA,IAAIC,MAAM,GAAG,IAAb,CATkE,CAS/C;EACnB;;EAEA,IAAIX,QAAQ,CAACK,IAAD,EAAO,UAAP,CAAR,KAA+B,OAAnC,EAA4C;IAC1CM,MAAM,GAAGN,IAAI,CAACO,qBAAL,EAAT;EACD,CAFD,MAEO;IACLN,YAAY,GAAGA,YAAY,IAAIR,eAAe,CAACO,IAAD,CAA9C;IACAM,MAAM,GAAGZ,SAAS,CAACM,IAAD,CAAlB;;IAEA,IAAIF,QAAQ,CAACG,YAAD,CAAR,KAA2B,MAA/B,EAAuC;MACrC,IAAIO,gBAAgB,GAAGd,SAAS,CAACO,YAAD,CAAhC;;MAEA,IAAIO,gBAAJ,EAAsB;QACpBL,YAAY,CAACC,GAAb,GAAmBI,gBAAgB,CAACJ,GAApC;QACAD,YAAY,CAACE,IAAb,GAAoBG,gBAAgB,CAACH,IAArC;MACD;IACF;;IAEDF,YAAY,CAACC,GAAb,IAAoBK,QAAQ,CAACd,QAAQ,CAACM,YAAD,EAAe,gBAAf,CAAT,EAA2C,EAA3C,CAAR,GAAyDL,SAAS,CAACK,YAAD,CAAlE,IAAoF,CAAxG;IACAE,YAAY,CAACE,IAAb,IAAqBI,QAAQ,CAACd,QAAQ,CAACM,YAAD,EAAe,iBAAf,CAAT,EAA4C,EAA5C,CAAR,GAA0DJ,UAAU,CAACI,YAAD,CAApE,IAAsF,CAA3G;EACD,CA7BiE,CA6BhE;;;EAGF,IAAIK,MAAJ,EAAY;IACV,IAAII,SAAS,GAAGR,UAAU,GAAGO,QAAQ,CAACd,QAAQ,CAACK,IAAD,EAAO,WAAP,CAAT,EAA8B,EAA9B,CAAR,IAA6C,CAAhD,GAAoD,CAA9E;IACA,IAAIW,UAAU,GAAGT,UAAU,GAAGO,QAAQ,CAACd,QAAQ,CAACK,IAAD,EAAO,YAAP,CAAT,EAA+B,EAA/B,CAAR,IAA8C,CAAjD,GAAqD,CAAhF;IACA,OAAOR,QAAQ,CAAC,EAAD,EAAKc,MAAL,EAAa;MAC1BF,GAAG,EAAEE,MAAM,CAACF,GAAP,GAAaD,YAAY,CAACC,GAA1B,GAAgCM,SADX;MAE1BL,IAAI,EAAEC,MAAM,CAACD,IAAP,GAAcF,YAAY,CAACE,IAA3B,GAAkCM;IAFd,CAAb,CAAf;EAID;;EAED,OAAO,IAAP;AACD"},"metadata":{},"sourceType":"module"}