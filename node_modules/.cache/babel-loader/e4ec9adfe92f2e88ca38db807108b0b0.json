{"ast":null,"code":"import { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { getListAccount, updateAccount, deleteVps } from './AccountCRUD';\nexport const actionTypes = {\n  RequestAccount: '[Accounts] Requested',\n  AccountsLoadedSuccess: '[Accounts] Loaded succcess',\n  AccountsLoadedFail: '[Accounts] load fail',\n  ShowCurrentAccount: '[Accounts] Show Account',\n  RequestUpdate: '[Accounts] Requested Update',\n  UpdateSuccess: '[Accounts] Update Success',\n  UpdateFail: '[Accounts] Update Fail',\n  ClearSelected: '[Accounts] Clear selected account',\n  DeleteVpsRequest: '[Accounts] Delete Account Request',\n  DeleteVpsSuccess: '[Accounts] Delete Account Success',\n  CheckedAllChange: '[accounts] Checked All Change'\n};\nconst initialAccountState = {\n  accounts: [],\n  loading: false,\n  adding: false,\n  currentAccount: undefined\n};\nexport const reducer = persistReducer({\n  storage,\n  key: 'v1-accounts',\n  whitelist: []\n}, function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialAccountState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.RequestAccount:\n      {\n        return { ...state,\n          accounts: [],\n          loading: true\n        };\n      }\n\n    case actionTypes.AccountsLoadedSuccess:\n      {\n        var _action$payload;\n\n        return { ...state,\n          accounts: ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.accounts) || [],\n          loading: false\n        };\n      }\n\n    case actionTypes.AccountsLoadedFail:\n      {\n        return { ...state,\n          accounts: [],\n          loading: false\n        };\n      }\n\n    case actionTypes.RequestUpdate:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    case actionTypes.UpdateSuccess:\n      {\n        const remapAccounts = state.accounts.map(item => {\n          var _action$payload2, _action$payload2$curr;\n\n          if (item.id === ((_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : (_action$payload2$curr = _action$payload2.currentAccount) === null || _action$payload2$curr === void 0 ? void 0 : _action$payload2$curr.id)) {\n            var _action$payload3;\n\n            return (_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.currentAccount;\n          } else {\n            return item;\n          }\n        });\n        return { ...state,\n          accounts: remapAccounts,\n          loading: false,\n          currentAccount: undefined\n        };\n      }\n\n    case actionTypes.DeleteVpsSuccess:\n      {\n        return { ...state,\n          orders: state.accounts.filter(item => {\n            var _action$payload4, _action$payload4$curr;\n\n            if (item.id === ((_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : (_action$payload4$curr = _action$payload4.currentAccount) === null || _action$payload4$curr === void 0 ? void 0 : _action$payload4$curr.id)) {\n              return false;\n            }\n\n            return true;\n          })\n        };\n      }\n\n    case actionTypes.UpdateFail:\n      {\n        return { ...state,\n          loading: false\n        };\n      }\n\n    case actionTypes.ShowCurrentAccount:\n      {\n        var _action$payload5;\n\n        return { ...state,\n          currentAccount: (_action$payload5 = action.payload) === null || _action$payload5 === void 0 ? void 0 : _action$payload5.currentAccount\n        };\n      }\n\n    case actionTypes.ClearSelected:\n      {\n        var _action$payload6;\n\n        return { ...state,\n          currentAccount: (_action$payload6 = action.payload) === null || _action$payload6 === void 0 ? void 0 : _action$payload6.currentAccount\n        };\n      }\n\n    case actionTypes.CheckedAllChange:\n      {\n        return { ...state,\n          accounts: state.accounts.map(item => {\n            var _action$payload7, _action$payload7$curr;\n\n            return { ...item,\n              checked: action === null || action === void 0 ? void 0 : (_action$payload7 = action.payload) === null || _action$payload7 === void 0 ? void 0 : (_action$payload7$curr = _action$payload7.currentAccount) === null || _action$payload7$curr === void 0 ? void 0 : _action$payload7$curr.checked\n            };\n          })\n        };\n      }\n\n    default:\n      return state;\n  }\n});\nexport const actions = {\n  requestAccounts: user_id => ({\n    type: actionTypes.RequestAccount,\n    payload: {\n      user_id\n    }\n  }),\n  fulfillAccounts: accounts => ({\n    type: actionTypes.AccountsLoadedSuccess,\n    payload: {\n      accounts\n    }\n  }),\n  loadAccountsFail: message => ({\n    type: actionTypes.AccountsLoadedFail,\n    payload: {\n      message\n    }\n  }),\n  requestUpdate: account => ({\n    type: actionTypes.RequestUpdate,\n    payload: {\n      account\n    }\n  }),\n  updateSuccess: currentAccount => ({\n    type: actionTypes.UpdateSuccess,\n    payload: {\n      currentAccount\n    }\n  }),\n  updateFail: message => ({\n    type: actionTypes.UpdateFail,\n    payload: {\n      message\n    }\n  }),\n  showCurrentAccount: currentAccount => ({\n    type: actionTypes.ShowCurrentAccount,\n    payload: {\n      currentAccount\n    }\n  }),\n  clearCurrentAccount: () => ({\n    type: actionTypes.ClearSelected\n  }),\n  deleteVpsRequest: vps => ({\n    type: actionTypes.DeleteVpsRequest,\n    payload: {\n      vps\n    }\n  }),\n  deleteVpsSuccess: vps => ({\n    type: actionTypes.DeleteVpsSuccess,\n    payload: {\n      vps\n    }\n  }),\n  checkedAllChange: checked => ({\n    type: actionTypes.CheckedAllChange,\n    payload: {\n      checked\n    }\n  })\n};\nexport function* saga() {\n  yield takeLatest(actionTypes.RequestAccount, function* userRequested(param) {\n    const {\n      data: accounts\n    } = yield getListAccount();\n    yield put(actions.fulfillAccounts(accounts.accounts));\n  });\n  yield takeLatest(actionTypes.RequestUpdate, function* updateUserRequested(param) {\n    //console.log(\"------update account param-----\",param.payload.account)\n    const {\n      data: account\n    } = yield updateAccount(param.payload.account); //console.log(\"------update account res-----\",account.account)\n\n    yield put(actions.updateSuccess(account.account));\n  });\n  yield takeLatest(actionTypes.DeleteVpsRequest, function* DeleteVpsRequest(param) {\n    try {\n      const payload = param.payload.vps;\n      const {\n        data: result\n      } = yield deleteVps(payload);\n\n      if (result && result.vps !== null) {\n        yield put(actions.deleteVpsSuccess(payload));\n      } else {}\n    } catch (error) {}\n  });\n}","map":{"version":3,"names":["persistReducer","storage","put","takeLatest","getListAccount","updateAccount","deleteVps","actionTypes","RequestAccount","AccountsLoadedSuccess","AccountsLoadedFail","ShowCurrentAccount","RequestUpdate","UpdateSuccess","UpdateFail","ClearSelected","DeleteVpsRequest","DeleteVpsSuccess","CheckedAllChange","initialAccountState","accounts","loading","adding","currentAccount","undefined","reducer","key","whitelist","state","action","type","payload","remapAccounts","map","item","id","orders","filter","checked","actions","requestAccounts","user_id","fulfillAccounts","loadAccountsFail","message","requestUpdate","account","updateSuccess","updateFail","showCurrentAccount","clearCurrentAccount","deleteVpsRequest","vps","deleteVpsSuccess","checkedAllChange","saga","userRequested","param","data","updateUserRequested","result","error"],"sources":["C:/Users/KT2/Desktop/ssc.fe.cheatview-main/src/app/modules/accounts/redux/AccountRedux.ts"],"sourcesContent":["import { Action } from '@reduxjs/toolkit'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { put, takeLatest } from 'redux-saga/effects'\nimport { AccountModel } from '../models/Account'\nimport { getListAccount,updateAccount,deleteVps } from './AccountCRUD'\nimport {OrderModel} from \"../../orders/models/Order\";\nimport {deleteChannel} from \"../../orders/redux/OrdersCRUD\";\nexport interface ActionWithPayload<T> extends Action {\n  payload?: T\n}\n\nexport const actionTypes = {\n  RequestAccount: '[Accounts] Requested',\n  AccountsLoadedSuccess: '[Accounts] Loaded succcess',\n  AccountsLoadedFail: '[Accounts] load fail',\n  ShowCurrentAccount: '[Accounts] Show Account',\n  RequestUpdate: '[Accounts] Requested Update',\n  UpdateSuccess: '[Accounts] Update Success',\n  UpdateFail: '[Accounts] Update Fail',\n  ClearSelected:'[Accounts] Clear selected account',\n  DeleteVpsRequest: '[Accounts] Delete Account Request',\n  DeleteVpsSuccess: '[Accounts] Delete Account Success',\n  CheckedAllChange: '[accounts] Checked All Change'\n}\n\nconst initialAccountState: IAccountState = {\n  accounts: [],\n  loading: false,\n  adding: false,\n  currentAccount:undefined\n}\n\nexport interface IAccountState {\n  accounts: AccountModel[]\n  loading: boolean\n  adding: boolean\n  currentAccount?:AccountModel\n}\n\nexport const reducer = persistReducer(\n  { storage, key: 'v1-accounts', whitelist: [] },\n  (state: IAccountState = initialAccountState, action: ActionWithPayload<IAccountState>) => {\n    switch (action.type) {\n      case actionTypes.RequestAccount: {\n        return {\n          ...state,\n          accounts: [],\n          loading: true\n        }\n      }\n      case actionTypes.AccountsLoadedSuccess: {\n        return {\n          ...state,\n          accounts: action.payload?.accounts || [],\n          loading: false\n        }\n      }\n      case actionTypes.AccountsLoadedFail: {\n        return {\n          ...state,\n          accounts: [],\n          loading: false\n        }\n      }\n      case actionTypes.RequestUpdate: {\n        return {\n          ...state,\n          loading: true\n        }\n      }\n      case actionTypes.UpdateSuccess: {\n        const remapAccounts = state.accounts.map((item:AccountModel)=>{\n          if(item.id===action.payload?.currentAccount?.id){\n            return action.payload?.currentAccount\n          }else {\n            return item\n          }\n        })\n        return {\n          ...state,\n          accounts:remapAccounts,\n          loading: false,\n          currentAccount: undefined\n        }\n      }\n      case actionTypes.DeleteVpsSuccess: {\n        return {\n          ...state,\n          orders: state.accounts.filter((item: AccountModel) => {\n            if (item.id === action.payload?.currentAccount?.id) {\n              return false\n            }\n            return true\n          })\n        }\n      }\n      case actionTypes.UpdateFail: {\n        return {\n          ...state,\n          loading: false\n        }\n      }\n      case actionTypes.ShowCurrentAccount: {\n        return {\n          ...state,\n          currentAccount: action.payload?.currentAccount\n        }\n      }\n      case actionTypes.ClearSelected: {\n        return {\n          ...state,\n          currentAccount: action.payload?.currentAccount\n        }\n      }\n      case actionTypes.CheckedAllChange: {\n        return {\n          ...state,\n          accounts:  state.accounts.map(item=>{\n            return {\n              ...item,\n              checked:action?.payload?.currentAccount?.checked\n            }\n          })\n        }\n      }\n      default:\n        return state\n    }\n  }\n)\n\nexport const actions = {\n  requestAccounts: (user_id: number) => ({ type: actionTypes.RequestAccount, payload: { user_id }  }),\n  fulfillAccounts: (accounts: AccountModel[]) => ({ type: actionTypes.AccountsLoadedSuccess, payload: { accounts } }),\n  loadAccountsFail: (message: string) => ({ type: actionTypes.AccountsLoadedFail, payload: { message } }),\n  requestUpdate: (account: AccountModel) => ({ type: actionTypes.RequestUpdate, payload: { account } }),\n  updateSuccess: (currentAccount: AccountModel) => ({ type: actionTypes.UpdateSuccess, payload: { currentAccount } }),\n  updateFail: (message: string) => ({ type: actionTypes.UpdateFail, payload: { message } }),\n  showCurrentAccount: (currentAccount: AccountModel) => ({ type: actionTypes.ShowCurrentAccount, payload: { currentAccount } }),\n  clearCurrentAccount: () => ({ type: actionTypes.ClearSelected}),\n  deleteVpsRequest: (vps: string) => ({ type: actionTypes.DeleteVpsRequest, payload: { vps } }),\n  deleteVpsSuccess: (vps: string) => ({ type: actionTypes.DeleteVpsSuccess, payload: { vps } }),\n  checkedAllChange: (checked:boolean) => ({ type: actionTypes.CheckedAllChange, payload: { checked } }),\n}\n\nexport function* saga() {\n  yield takeLatest(actionTypes.RequestAccount, function* userRequested(param: any) {\n    const {data: accounts} = yield getListAccount()\n    yield put(actions.fulfillAccounts(accounts.accounts))\n  })\n  yield takeLatest(actionTypes.RequestUpdate, function* updateUserRequested(param: any) {\n    //console.log(\"------update account param-----\",param.payload.account)\n    const {data: account} = yield updateAccount(param.payload.account)\n    //console.log(\"------update account res-----\",account.account)\n    yield put(actions.updateSuccess(account.account))\n  })\n  yield takeLatest(actionTypes.DeleteVpsRequest, function* DeleteVpsRequest(param: any) {\n    try {\n      const payload = param.payload.vps\n      const { data: result } = yield deleteVps(payload)\n      if (result&&result.vps!==null) {\n        yield put(actions.deleteVpsSuccess(payload))\n      } else {\n\n      }\n    } catch (error) {\n\n    }\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}