{"ast":null,"code":"import { getScrollTop, getAttributeValueByBreakpoint, throttle, getObjectPropertyValueByKey, stringSnakeToCamel, getUniqueIdWithPrefix, DataUtil, ElementAnimateUtil } from '../_utils/index';\nconst defaultScrollTopOptions = {\n  offset: 200,\n  speed: 600\n};\n\nclass ScrollTopComponent {\n  constructor(_element, options) {\n    this.element = void 0;\n    this.options = void 0;\n    this.instanceUid = void 0;\n\n    this._handlers = () => {\n      let timer;\n      window.addEventListener('scroll', () => {\n        throttle(timer, () => {\n          this._scroll();\n        });\n      });\n      this.element.addEventListener('click', e => {\n        e.preventDefault();\n\n        this._go();\n      });\n    };\n\n    this._scroll = () => {\n      const offset = parseInt(this._getOption('offset'));\n      const pos = getScrollTop(); // current vertical position\n\n      if (pos > offset) {\n        if (!document.body.hasAttribute('data-kt-scrolltop')) {\n          document.body.setAttribute('data-kt-scrolltop', 'on');\n        }\n      } else {\n        if (document.body.hasAttribute('data-kt-scrolltop')) {\n          document.body.removeAttribute('data-kt-scrolltop');\n        }\n      }\n    };\n\n    this._go = () => {\n      const speed = parseInt(this._getOption('speed'));\n      ElementAnimateUtil.scrollTop(0, speed);\n    };\n\n    this._getOption = name => {\n      const attr = this.element.getAttribute(`data-kt-scrolltop-${name}`);\n\n      if (attr) {\n        const value = getAttributeValueByBreakpoint(attr);\n        return value !== null && String(value) === 'true';\n      }\n\n      const optionName = stringSnakeToCamel(name);\n      const option = getObjectPropertyValueByKey(this.options, optionName);\n\n      if (option) {\n        return getAttributeValueByBreakpoint(option);\n      }\n\n      return null;\n    };\n\n    this.go = () => {\n      return this._go();\n    };\n\n    this.getElement = () => {\n      return this.element;\n    };\n\n    this.element = _element;\n    this.options = Object.assign(defaultScrollTopOptions, options);\n    this.instanceUid = getUniqueIdWithPrefix('scrolltop'); // Event Handlers\n\n    this._handlers(); // Bind Instance\n\n\n    DataUtil.set(this.element, 'scrolltop', this);\n  }\n\n}\n\nScrollTopComponent.getInstance = el => {\n  const scrollTop = DataUtil.get(el, 'scrolltop');\n\n  if (scrollTop) {\n    return scrollTop;\n  }\n\n  return null;\n};\n\nScrollTopComponent.createInstances = selector => {\n  const elements = document.body.querySelectorAll(selector);\n  elements.forEach(el => {\n    const item = el;\n    let scrollTop = ScrollTopComponent.getInstance(item);\n\n    if (!scrollTop) {\n      scrollTop = new ScrollTopComponent(item, defaultScrollTopOptions);\n    }\n  });\n};\n\nScrollTopComponent.createInsance = function (selector) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultScrollTopOptions;\n  const element = document.body.querySelector(selector);\n\n  if (!element) {\n    return;\n  }\n\n  const item = element;\n  let scrollTop = ScrollTopComponent.getInstance(item);\n\n  if (!scrollTop) {\n    scrollTop = new ScrollTopComponent(item, options);\n  }\n\n  return scrollTop;\n};\n\nScrollTopComponent.bootstrap = () => {\n  ScrollTopComponent.createInstances('[data-kt-scrolltop=\"true\"]');\n};\n\nScrollTopComponent.reinitialization = () => {\n  ScrollTopComponent.createInstances('[data-kt-scrolltop=\"true\"]');\n};\n\nScrollTopComponent.goTop = () => {\n  ElementAnimateUtil.scrollTop(0, defaultScrollTopOptions.speed);\n};\n\nexport { ScrollTopComponent, defaultScrollTopOptions };","map":{"version":3,"names":["getScrollTop","getAttributeValueByBreakpoint","throttle","getObjectPropertyValueByKey","stringSnakeToCamel","getUniqueIdWithPrefix","DataUtil","ElementAnimateUtil","defaultScrollTopOptions","offset","speed","ScrollTopComponent","constructor","_element","options","element","instanceUid","_handlers","timer","window","addEventListener","_scroll","e","preventDefault","_go","parseInt","_getOption","pos","document","body","hasAttribute","setAttribute","removeAttribute","scrollTop","name","attr","getAttribute","value","String","optionName","option","go","getElement","Object","assign","set","getInstance","el","get","createInstances","selector","elements","querySelectorAll","forEach","item","createInsance","querySelector","bootstrap","reinitialization","goTop"],"sources":["C:/Users/KT2/OneDrive/Documents/Buffh/ssc.fe.cheatview-main/src/_metronic/assets/ts/components/_ScrollTopComponent.ts"],"sourcesContent":["import {\n  getScrollTop,\n  getAttributeValueByBreakpoint,\n  throttle,\n  getObjectPropertyValueByKey,\n  stringSnakeToCamel,\n  getUniqueIdWithPrefix,\n  DataUtil,\n  ElementAnimateUtil,\n} from '../_utils/index'\n\nexport interface IScrollTopOptions {\n  offset: number\n  speed: number\n}\n\nconst defaultScrollTopOptions: IScrollTopOptions = {\n  offset: 200,\n  speed: 600,\n}\n\nclass ScrollTopComponent {\n  element: HTMLElement\n  options: IScrollTopOptions\n  instanceUid: string\n\n  constructor(_element: HTMLElement, options: IScrollTopOptions) {\n    this.element = _element\n    this.options = Object.assign(defaultScrollTopOptions, options)\n    this.instanceUid = getUniqueIdWithPrefix('scrolltop')\n\n    // Event Handlers\n    this._handlers()\n\n    // Bind Instance\n    DataUtil.set(this.element, 'scrolltop', this)\n  }\n\n  private _handlers = () => {\n    let timer: number\n    window.addEventListener('scroll', () => {\n      throttle(timer, () => {\n        this._scroll()\n      })\n    })\n\n    this.element.addEventListener('click', (e: Event) => {\n      e.preventDefault()\n      this._go()\n    })\n  }\n\n  private _scroll = () => {\n    const offset = parseInt(this._getOption('offset') as string)\n    const pos = getScrollTop() // current vertical position\n    if (pos > offset) {\n      if (!document.body.hasAttribute('data-kt-scrolltop')) {\n        document.body.setAttribute('data-kt-scrolltop', 'on')\n      }\n    } else {\n      if (document.body.hasAttribute('data-kt-scrolltop')) {\n        document.body.removeAttribute('data-kt-scrolltop')\n      }\n    }\n  }\n\n  private _go = () => {\n    const speed = parseInt(this._getOption('speed') as string)\n    ElementAnimateUtil.scrollTop(0, speed)\n  }\n\n  private _getOption = (name: string) => {\n    const attr = this.element.getAttribute(`data-kt-scrolltop-${name}`)\n    if (attr) {\n      const value = getAttributeValueByBreakpoint(attr)\n      return value !== null && String(value) === 'true'\n    }\n\n    const optionName = stringSnakeToCamel(name)\n    const option = getObjectPropertyValueByKey(this.options, optionName)\n    if (option) {\n      return getAttributeValueByBreakpoint(option)\n    }\n\n    return null\n  }\n\n  ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n  // Plugin API\n  public go = () => {\n    return this._go()\n  }\n\n  public getElement = () => {\n    return this.element\n  }\n\n  // Static methods\n  public static getInstance = (el: HTMLElement) => {\n    const scrollTop = DataUtil.get(el, 'scrolltop')\n    if (scrollTop) {\n      return scrollTop\n    }\n\n    return null\n  }\n\n  public static createInstances = (selector: string) => {\n    const elements = document.body.querySelectorAll(selector)\n    elements.forEach((el) => {\n      const item = el as HTMLElement\n      let scrollTop = ScrollTopComponent.getInstance(item)\n      if (!scrollTop) {\n        scrollTop = new ScrollTopComponent(item, defaultScrollTopOptions)\n      }\n    })\n  }\n\n  public static createInsance = (\n    selector: string,\n    options: IScrollTopOptions = defaultScrollTopOptions\n  ): ScrollTopComponent | undefined => {\n    const element = document.body.querySelector(selector)\n    if (!element) {\n      return\n    }\n    const item = element as HTMLElement\n    let scrollTop = ScrollTopComponent.getInstance(item)\n    if (!scrollTop) {\n      scrollTop = new ScrollTopComponent(item, options)\n    }\n    return scrollTop\n  }\n\n  public static bootstrap = () => {\n    ScrollTopComponent.createInstances('[data-kt-scrolltop=\"true\"]')\n  }\n\n  public static reinitialization = () => {\n    ScrollTopComponent.createInstances('[data-kt-scrolltop=\"true\"]')\n  }\n\n  public static goTop = () => {\n    ElementAnimateUtil.scrollTop(0, defaultScrollTopOptions.speed)\n  }\n}\nexport {ScrollTopComponent, defaultScrollTopOptions}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}