{"ast":null,"code":"import { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { getList, getComputer, getStatics } from './AccountCRUD';\nexport const actionTypes = {\n  RequestHistories: '[Histories] Requested',\n  HistoryLoadedSuccess: '[Histories] Loaded succcess',\n  HistoryLoadedFail: '[Histories] load fail',\n  RequestComputers: '[Computers] Requested',\n  ComputersLoadedSuccess: '[Computers] Loaded succcess',\n  RequestStatic: '[Static] Requested',\n  StaticLoadedSuccess: '[Static] Loaded succcess'\n};\nconst initialAccountState = {\n  histories: [],\n  loading: false,\n  computers: [],\n  statics: []\n};\nexport const reducer = persistReducer({\n  storage,\n  key: 'v1-histories',\n  whitelist: []\n}, function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialAccountState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.RequestHistories:\n      {\n        return { ...state,\n          histories: [],\n          loading: true\n        };\n      }\n\n    case actionTypes.RequestComputers:\n      {\n        return { ...state,\n          computers: []\n        };\n      }\n\n    case actionTypes.ComputersLoadedSuccess:\n      {\n        var _action$payload;\n\n        return { ...state,\n          computers: ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.computers) || []\n        };\n      }\n\n    case actionTypes.RequestStatic:\n      {\n        return { ...state,\n          statics: []\n        };\n      }\n\n    case actionTypes.StaticLoadedSuccess:\n      {\n        var _action$payload2;\n\n        return { ...state,\n          statics: ((_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.statics) || []\n        };\n      }\n\n    case actionTypes.HistoryLoadedSuccess:\n      {\n        var _action$payload3;\n\n        return { ...state,\n          histories: ((_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.histories) || [],\n          loading: false\n        };\n      }\n\n    case actionTypes.HistoryLoadedFail:\n      {\n        return { ...state,\n          histories: [],\n          loading: false\n        };\n      }\n\n    default:\n      return state;\n  }\n});\nexport const actions = {\n  requestHistories: user_id => ({\n    type: actionTypes.RequestHistories,\n    payload: {\n      user_id\n    }\n  }),\n  fulfillHistories: histories => ({\n    type: actionTypes.HistoryLoadedSuccess,\n    payload: {\n      histories\n    }\n  }),\n  loadAccountsFail: message => ({\n    type: actionTypes.HistoryLoadedFail,\n    payload: {\n      message\n    }\n  }),\n  requestComputers: () => ({\n    type: actionTypes.RequestComputers\n  }),\n  fulfillComputers: computers => ({\n    type: actionTypes.ComputersLoadedSuccess,\n    payload: {\n      computers\n    }\n  }),\n  requestStatics: user => ({\n    type: actionTypes.RequestStatic,\n    payload: {\n      user\n    }\n  }),\n  fulfillStatics: statics => ({\n    type: actionTypes.StaticLoadedSuccess,\n    payload: {\n      statics\n    }\n  })\n};\nexport function* saga() {\n  yield takeLatest(actionTypes.RequestHistories, function* userRequested(param) {\n    const {\n      data: resutl\n    } = yield getList();\n    console.log(resutl);\n    yield put(actions.fulfillHistories(resutl.histories));\n  });\n  yield takeLatest(actionTypes.RequestComputers, function* userRequested(param) {\n    const {\n      data: resutl\n    } = yield getComputer();\n    console.log(resutl);\n    yield put(actions.fulfillComputers(resutl.computers));\n  });\n  yield takeLatest(actionTypes.RequestStatic, function* userRequested(param) {\n    const payload = param.payload.user;\n    const {\n      data: resutl\n    } = yield getStatics(payload);\n    console.log(resutl);\n    yield put(actions.fulfillStatics(resutl.time7day));\n  });\n}","map":{"version":3,"names":["persistReducer","storage","put","takeLatest","getList","getComputer","getStatics","actionTypes","RequestHistories","HistoryLoadedSuccess","HistoryLoadedFail","RequestComputers","ComputersLoadedSuccess","RequestStatic","StaticLoadedSuccess","initialAccountState","histories","loading","computers","statics","reducer","key","whitelist","state","action","type","payload","actions","requestHistories","user_id","fulfillHistories","loadAccountsFail","message","requestComputers","fulfillComputers","requestStatics","user","fulfillStatics","saga","userRequested","param","data","resutl","console","log","time7day"],"sources":["C:/Users/KT2/OneDrive/Documents/Buffh/ssc.fe.cheatview-main/src/app/modules/history/redux/AccountRedux.ts"],"sourcesContent":["import { Action } from '@reduxjs/toolkit'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { put, takeLatest } from 'redux-saga/effects'\nimport { ComputerModel, HistoryModel ,ChannelStaticModel} from '../models/Account'\nimport { getList,getComputer,getStatics} from './AccountCRUD'\nexport interface ActionWithPayload<T> extends Action {\n  payload?: T\n}\n\nexport const actionTypes = {\n  RequestHistories: '[Histories] Requested',\n  HistoryLoadedSuccess: '[Histories] Loaded succcess',\n  HistoryLoadedFail: '[Histories] load fail',\n  RequestComputers: '[Computers] Requested',\n  ComputersLoadedSuccess: '[Computers] Loaded succcess',\n  RequestStatic: '[Static] Requested',\n  StaticLoadedSuccess: '[Static] Loaded succcess',\n}\n\n\nconst initialAccountState: IAccountState = {\n  histories: [],\n  loading: false,\n  computers:[],\n  statics:[]\n}\n\nexport interface IAccountState {\n  histories: HistoryModel[]\n  loading: boolean\n  computers : ComputerModel[],\n  statics : ChannelStaticModel[]\n}\n\nexport const reducer = persistReducer(\n  { storage, key: 'v1-histories', whitelist: [] },\n  (state: IAccountState = initialAccountState, action: ActionWithPayload<IAccountState>) => {\n    switch (action.type) {\n      case actionTypes.RequestHistories: {\n        return {\n          ...state,\n          histories: [],\n          loading: true\n        }\n      }\n      case actionTypes.RequestComputers: {\n        return {\n          ...state,\n          computers: []\n        }\n      }\n      case actionTypes.ComputersLoadedSuccess: {\n        return {\n          ...state,\n          computers: action.payload?.computers || [],\n        }\n      }\n      case actionTypes.RequestStatic: {\n        return {\n          ...state,\n          statics: []\n        }\n      }\n      case actionTypes.StaticLoadedSuccess: {\n        return {\n          ...state,\n          statics: action.payload?.statics || [],\n        }\n      }\n      case actionTypes.HistoryLoadedSuccess: {\n        return {\n          ...state,\n          histories: action.payload?.histories || [],\n          loading: false\n        }\n      }\n      case actionTypes.HistoryLoadedFail: {\n        return {\n          ...state,\n          histories: [],\n          loading: false\n        }\n      }\n      default:\n        return state\n    }\n  }\n)\n\nexport const actions = {\n  requestHistories: (user_id: number) => ({ type: actionTypes.RequestHistories, payload: { user_id } }),\n  fulfillHistories: (histories: HistoryModel[]) => ({ type: actionTypes.HistoryLoadedSuccess, payload: { histories } }),\n  loadAccountsFail: (message: string) => ({ type: actionTypes.HistoryLoadedFail, payload: { message } }),\n  requestComputers: () => ({ type: actionTypes.RequestComputers}),\n  fulfillComputers: (computers: ComputerModel[]) => ({ type: actionTypes.ComputersLoadedSuccess, payload: { computers } }),\n  requestStatics: (user:string) => ({ type: actionTypes.RequestStatic,payload:{user}}),\n  fulfillStatics: (statics: ChannelStaticModel[]) => ({ type: actionTypes.StaticLoadedSuccess, payload: { statics } }),\n}\n\nexport function* saga() {\n  yield takeLatest(actionTypes.RequestHistories, function* userRequested(param: any) {\n    const {data: resutl} = yield getList()\n    console.log(resutl)\n    yield put(actions.fulfillHistories(resutl.histories))\n  })\n  yield takeLatest(actionTypes.RequestComputers, function* userRequested(param: any) {\n    const {data: resutl} = yield getComputer()\n    console.log(resutl)\n    yield put(actions.fulfillComputers(resutl.computers))\n  })\n  yield takeLatest(actionTypes.RequestStatic, function* userRequested(param: any) {\n    const payload = param.payload.user\n    const {data: resutl} = yield getStatics(payload)\n    console.log(resutl)\n    yield put(actions.fulfillStatics(resutl.time7day))\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}