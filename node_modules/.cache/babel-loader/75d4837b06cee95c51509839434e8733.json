{"ast":null,"code":"import { useState, useMemo } from 'react';\nimport slice from 'lodash/slice';\nimport { shallowEqual, useUpdateEffect } from '../utils';\nimport { findNodeOfTree } from '../utils/treeUtils';\nimport { attachParent } from '../utils/attachParent';\nexport function getColumnsAndPaths(data, value, options) {\n  var childrenKey = options.childrenKey,\n      valueKey = options.valueKey,\n      isAttachChildren = options.isAttachChildren;\n  var columns = [];\n  var paths = [];\n\n  var findNode = function findNode(items) {\n    var _loop = function _loop(i) {\n      var children = items[i][childrenKey];\n\n      if (shallowEqual(items[i][valueKey], value)) {\n        return {\n          v: {\n            items: items,\n            active: items[i]\n          }\n        };\n      } else if (children) {\n        var node = findNode(children);\n\n        if (node) {\n          columns.push(children.map(function (item) {\n            return attachParent(item, items[i]);\n          }));\n          paths.push(node.active);\n          return {\n            v: {\n              items: items,\n              active: items[i]\n            }\n          };\n        }\n      }\n    };\n\n    for (var i = 0; i < items.length; i += 1) {\n      var _ret = _loop(i);\n\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n\n    return null;\n  };\n\n  var selectedNode = findNode(data);\n  columns.push(data);\n\n  if (selectedNode) {\n    paths.push(selectedNode.active);\n  }\n\n  if (isAttachChildren) {\n    var valueToNode = findNodeOfTree(data, function (item) {\n      return item[valueKey] === value;\n    });\n\n    if (valueToNode !== null && valueToNode !== void 0 && valueToNode[childrenKey]) {\n      columns.unshift(valueToNode[childrenKey]);\n    }\n  }\n\n  columns.reverse();\n  paths.reverse();\n  return {\n    columns: columns,\n    paths: paths\n  };\n}\nexport function usePaths(params) {\n  var data = params.data,\n      valueKey = params.valueKey,\n      childrenKey = params.childrenKey,\n      value = params.value;\n\n  var _useMemo = useMemo(function () {\n    return getColumnsAndPaths(data, value, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n  }, [data, value, valueKey, childrenKey]),\n      columns = _useMemo.columns,\n      paths = _useMemo.paths; // The columns displayed in the cascading panel.\n\n\n  var _useState = useState(columns),\n      columnData = _useState[0],\n      setColumnData = _useState[1]; // The path after cascading data selection.\n\n\n  var _useState2 = useState(paths),\n      selectedPaths = _useState2[0],\n      setSelectedPaths = _useState2[1]; // The path corresponding to the selected value.\n\n\n  var _useState3 = useState(paths),\n      valueToPaths = _useState3[0],\n      setValueToPaths = _useState3[1];\n  /**\n   * Add a list of options to the cascading panel. Used for lazy loading options.\n   * @param column\n   * @param index The index of the current column.\n   */\n\n\n  function addColumn(column, index) {\n    setColumnData([].concat(slice(columnData, 0, index), [column]));\n  }\n  /**\n   * Remove subsequent columns of the specified column\n   * @param index\n   */\n\n\n  function romoveColumnByIndex(index) {\n    setColumnData([].concat(slice(columnData, 0, index)));\n  }\n  /**\n   * Enforce update of columns and paths.\n   * @param nextValue  Selected value\n   * @param isAttachChildren  Whether to attach the children of the selected node.\n   */\n\n\n  function enforceUpdate(nextValue, isAttachChildren) {\n    var _getColumnsAndPaths = getColumnsAndPaths(data, nextValue, {\n      valueKey: valueKey,\n      childrenKey: childrenKey,\n      isAttachChildren: isAttachChildren\n    }),\n        columns = _getColumnsAndPaths.columns,\n        paths = _getColumnsAndPaths.paths;\n\n    setColumnData(columns);\n    setSelectedPaths(paths);\n  }\n\n  useUpdateEffect(function () {\n    // Update paths when value is updated, then update valueToPaths.\n    setValueToPaths(paths);\n  }, [paths]);\n  useUpdateEffect(function () {\n    enforceUpdate(value);\n  }, [data]);\n  return {\n    enforceUpdate: enforceUpdate,\n    columnData: columnData,\n    valueToPaths: valueToPaths,\n    selectedPaths: selectedPaths,\n    setValueToPaths: setValueToPaths,\n    setColumnData: setColumnData,\n    setSelectedPaths: setSelectedPaths,\n    addColumn: addColumn,\n    romoveColumnByIndex: romoveColumnByIndex\n  };\n}","map":{"version":3,"names":["useState","useMemo","slice","shallowEqual","useUpdateEffect","findNodeOfTree","attachParent","getColumnsAndPaths","data","value","options","childrenKey","valueKey","isAttachChildren","columns","paths","findNode","items","_loop","i","children","v","active","node","push","map","item","length","_ret","selectedNode","valueToNode","unshift","reverse","usePaths","params","_useMemo","_useState","columnData","setColumnData","_useState2","selectedPaths","setSelectedPaths","_useState3","valueToPaths","setValueToPaths","addColumn","column","index","concat","romoveColumnByIndex","enforceUpdate","nextValue","_getColumnsAndPaths"],"sources":["C:/Users/KT2/OneDrive/Documents/Buffh/ssc.fe.cheatview-main/node_modules/rsuite/esm/Cascader/utils.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport slice from 'lodash/slice';\nimport { shallowEqual, useUpdateEffect } from '../utils';\nimport { findNodeOfTree } from '../utils/treeUtils';\nimport { attachParent } from '../utils/attachParent';\nexport function getColumnsAndPaths(data, value, options) {\n  var childrenKey = options.childrenKey,\n      valueKey = options.valueKey,\n      isAttachChildren = options.isAttachChildren;\n  var columns = [];\n  var paths = [];\n\n  var findNode = function findNode(items) {\n    var _loop = function _loop(i) {\n      var children = items[i][childrenKey];\n\n      if (shallowEqual(items[i][valueKey], value)) {\n        return {\n          v: {\n            items: items,\n            active: items[i]\n          }\n        };\n      } else if (children) {\n        var node = findNode(children);\n\n        if (node) {\n          columns.push(children.map(function (item) {\n            return attachParent(item, items[i]);\n          }));\n          paths.push(node.active);\n          return {\n            v: {\n              items: items,\n              active: items[i]\n            }\n          };\n        }\n      }\n    };\n\n    for (var i = 0; i < items.length; i += 1) {\n      var _ret = _loop(i);\n\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n\n    return null;\n  };\n\n  var selectedNode = findNode(data);\n  columns.push(data);\n\n  if (selectedNode) {\n    paths.push(selectedNode.active);\n  }\n\n  if (isAttachChildren) {\n    var valueToNode = findNodeOfTree(data, function (item) {\n      return item[valueKey] === value;\n    });\n\n    if (valueToNode !== null && valueToNode !== void 0 && valueToNode[childrenKey]) {\n      columns.unshift(valueToNode[childrenKey]);\n    }\n  }\n\n  columns.reverse();\n  paths.reverse();\n  return {\n    columns: columns,\n    paths: paths\n  };\n}\nexport function usePaths(params) {\n  var data = params.data,\n      valueKey = params.valueKey,\n      childrenKey = params.childrenKey,\n      value = params.value;\n\n  var _useMemo = useMemo(function () {\n    return getColumnsAndPaths(data, value, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n  }, [data, value, valueKey, childrenKey]),\n      columns = _useMemo.columns,\n      paths = _useMemo.paths; // The columns displayed in the cascading panel.\n\n\n  var _useState = useState(columns),\n      columnData = _useState[0],\n      setColumnData = _useState[1]; // The path after cascading data selection.\n\n\n  var _useState2 = useState(paths),\n      selectedPaths = _useState2[0],\n      setSelectedPaths = _useState2[1]; // The path corresponding to the selected value.\n\n\n  var _useState3 = useState(paths),\n      valueToPaths = _useState3[0],\n      setValueToPaths = _useState3[1];\n  /**\n   * Add a list of options to the cascading panel. Used for lazy loading options.\n   * @param column\n   * @param index The index of the current column.\n   */\n\n\n  function addColumn(column, index) {\n    setColumnData([].concat(slice(columnData, 0, index), [column]));\n  }\n  /**\n   * Remove subsequent columns of the specified column\n   * @param index\n   */\n\n\n  function romoveColumnByIndex(index) {\n    setColumnData([].concat(slice(columnData, 0, index)));\n  }\n  /**\n   * Enforce update of columns and paths.\n   * @param nextValue  Selected value\n   * @param isAttachChildren  Whether to attach the children of the selected node.\n   */\n\n\n  function enforceUpdate(nextValue, isAttachChildren) {\n    var _getColumnsAndPaths = getColumnsAndPaths(data, nextValue, {\n      valueKey: valueKey,\n      childrenKey: childrenKey,\n      isAttachChildren: isAttachChildren\n    }),\n        columns = _getColumnsAndPaths.columns,\n        paths = _getColumnsAndPaths.paths;\n\n    setColumnData(columns);\n    setSelectedPaths(paths);\n  }\n\n  useUpdateEffect(function () {\n    // Update paths when value is updated, then update valueToPaths.\n    setValueToPaths(paths);\n  }, [paths]);\n  useUpdateEffect(function () {\n    enforceUpdate(value);\n  }, [data]);\n  return {\n    enforceUpdate: enforceUpdate,\n    columnData: columnData,\n    valueToPaths: valueToPaths,\n    selectedPaths: selectedPaths,\n    setValueToPaths: setValueToPaths,\n    setColumnData: setColumnData,\n    setSelectedPaths: setSelectedPaths,\n    addColumn: addColumn,\n    romoveColumnByIndex: romoveColumnByIndex\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}