{"ast":null,"code":"var allowedVariants = ['normal', 'small-caps'];\n/**\n * Gets font CSS shorthand property given element.\n *\n * @param {HTMLElement} element Element to get font CSS shorthand property from\n */\n\nexport function getFontShorthand(element) {\n  if (!element) {\n    return '';\n  }\n\n  var style = window.getComputedStyle(element);\n\n  if (style.font) {\n    return style.font;\n  }\n\n  var isFontDefined = style.fontFamily !== '';\n\n  if (!isFontDefined) {\n    return '';\n  }\n\n  var fontVariant = allowedVariants.includes(style.fontVariant) ? style.fontVariant : 'normal';\n  return \"\".concat(style.fontStyle, \" \").concat(fontVariant, \" \").concat(style.fontWeight, \" \").concat(style.fontSize, \" / \").concat(style.lineHeight, \" \").concat(style.fontFamily);\n}\nvar cachedCanvas;\n/**\n * Measures text width given text and font CSS shorthand.\n *\n * @param {string} text Text to measure\n * @param {string} font Font to use when measuring the text\n */\n\nexport function measureText(text, font) {\n  var canvas = cachedCanvas || (cachedCanvas = document.createElement('canvas'));\n  var context = canvas.getContext('2d'); // Context type not supported\n\n  if (!context) {\n    return null;\n  }\n\n  context.font = font;\n  var width = context.measureText(text).width;\n  return Math.ceil(width);\n}\n/**\n * Updates input element width to fit its content given input element\n * @param {HTMLInputElement} element\n */\n\nexport function updateInputWidth(element) {\n  if (typeof document === 'undefined' || !element) {\n    return null;\n  }\n\n  var font = getFontShorthand(element);\n  var text = element.value || element.placeholder;\n  var width = measureText(text, font);\n\n  if (width === null) {\n    return null;\n  }\n\n  element.style.width = \"\".concat(width, \"px\");\n  return width;\n}\nexport default updateInputWidth;","map":{"version":3,"names":["allowedVariants","getFontShorthand","element","style","window","getComputedStyle","font","isFontDefined","fontFamily","fontVariant","includes","concat","fontStyle","fontWeight","fontSize","lineHeight","cachedCanvas","measureText","text","canvas","document","createElement","context","getContext","width","Math","ceil","updateInputWidth","value","placeholder"],"sources":["C:/Users/KT2/OneDrive/Documents/Buffh/ssc.fe.cheatview-main/node_modules/update-input-width/dist/esm/index.js"],"sourcesContent":["var allowedVariants = ['normal', 'small-caps'];\n/**\n * Gets font CSS shorthand property given element.\n *\n * @param {HTMLElement} element Element to get font CSS shorthand property from\n */\nexport function getFontShorthand(element) {\n    if (!element) {\n        return '';\n    }\n    var style = window.getComputedStyle(element);\n    if (style.font) {\n        return style.font;\n    }\n    var isFontDefined = style.fontFamily !== '';\n    if (!isFontDefined) {\n        return '';\n    }\n    var fontVariant = allowedVariants.includes(style.fontVariant) ? style.fontVariant : 'normal';\n    return \"\".concat(style.fontStyle, \" \").concat(fontVariant, \" \").concat(style.fontWeight, \" \").concat(style.fontSize, \" / \").concat(style.lineHeight, \" \").concat(style.fontFamily);\n}\nvar cachedCanvas;\n/**\n * Measures text width given text and font CSS shorthand.\n *\n * @param {string} text Text to measure\n * @param {string} font Font to use when measuring the text\n */\nexport function measureText(text, font) {\n    var canvas = cachedCanvas || (cachedCanvas = document.createElement('canvas'));\n    var context = canvas.getContext('2d');\n    // Context type not supported\n    if (!context) {\n        return null;\n    }\n    context.font = font;\n    var width = context.measureText(text).width;\n    return Math.ceil(width);\n}\n/**\n * Updates input element width to fit its content given input element\n * @param {HTMLInputElement} element\n */\nexport function updateInputWidth(element) {\n    if (typeof document === 'undefined' || !element) {\n        return null;\n    }\n    var font = getFontShorthand(element);\n    var text = element.value || element.placeholder;\n    var width = measureText(text, font);\n    if (width === null) {\n        return null;\n    }\n    element.style.width = \"\".concat(width, \"px\");\n    return width;\n}\nexport default updateInputWidth;\n"],"mappings":"AAAA,IAAIA,eAAe,GAAG,CAAC,QAAD,EAAW,YAAX,CAAtB;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;EACtC,IAAI,CAACA,OAAL,EAAc;IACV,OAAO,EAAP;EACH;;EACD,IAAIC,KAAK,GAAGC,MAAM,CAACC,gBAAP,CAAwBH,OAAxB,CAAZ;;EACA,IAAIC,KAAK,CAACG,IAAV,EAAgB;IACZ,OAAOH,KAAK,CAACG,IAAb;EACH;;EACD,IAAIC,aAAa,GAAGJ,KAAK,CAACK,UAAN,KAAqB,EAAzC;;EACA,IAAI,CAACD,aAAL,EAAoB;IAChB,OAAO,EAAP;EACH;;EACD,IAAIE,WAAW,GAAGT,eAAe,CAACU,QAAhB,CAAyBP,KAAK,CAACM,WAA/B,IAA8CN,KAAK,CAACM,WAApD,GAAkE,QAApF;EACA,OAAO,GAAGE,MAAH,CAAUR,KAAK,CAACS,SAAhB,EAA2B,GAA3B,EAAgCD,MAAhC,CAAuCF,WAAvC,EAAoD,GAApD,EAAyDE,MAAzD,CAAgER,KAAK,CAACU,UAAtE,EAAkF,GAAlF,EAAuFF,MAAvF,CAA8FR,KAAK,CAACW,QAApG,EAA8G,KAA9G,EAAqHH,MAArH,CAA4HR,KAAK,CAACY,UAAlI,EAA8I,GAA9I,EAAmJJ,MAAnJ,CAA0JR,KAAK,CAACK,UAAhK,CAAP;AACH;AACD,IAAIQ,YAAJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2BZ,IAA3B,EAAiC;EACpC,IAAIa,MAAM,GAAGH,YAAY,KAAKA,YAAY,GAAGI,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAApB,CAAzB;EACA,IAAIC,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAd,CAFoC,CAGpC;;EACA,IAAI,CAACD,OAAL,EAAc;IACV,OAAO,IAAP;EACH;;EACDA,OAAO,CAAChB,IAAR,GAAeA,IAAf;EACA,IAAIkB,KAAK,GAAGF,OAAO,CAACL,WAAR,CAAoBC,IAApB,EAA0BM,KAAtC;EACA,OAAOC,IAAI,CAACC,IAAL,CAAUF,KAAV,CAAP;AACH;AACD;AACA;AACA;AACA;;AACA,OAAO,SAASG,gBAAT,CAA0BzB,OAA1B,EAAmC;EACtC,IAAI,OAAOkB,QAAP,KAAoB,WAApB,IAAmC,CAAClB,OAAxC,EAAiD;IAC7C,OAAO,IAAP;EACH;;EACD,IAAII,IAAI,GAAGL,gBAAgB,CAACC,OAAD,CAA3B;EACA,IAAIgB,IAAI,GAAGhB,OAAO,CAAC0B,KAAR,IAAiB1B,OAAO,CAAC2B,WAApC;EACA,IAAIL,KAAK,GAAGP,WAAW,CAACC,IAAD,EAAOZ,IAAP,CAAvB;;EACA,IAAIkB,KAAK,KAAK,IAAd,EAAoB;IAChB,OAAO,IAAP;EACH;;EACDtB,OAAO,CAACC,KAAR,CAAcqB,KAAd,GAAsB,GAAGb,MAAH,CAAUa,KAAV,EAAiB,IAAjB,CAAtB;EACA,OAAOA,KAAP;AACH;AACD,eAAeG,gBAAf"},"metadata":{},"sourceType":"module"}