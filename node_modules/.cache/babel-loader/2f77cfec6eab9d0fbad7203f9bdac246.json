{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KT2\\\\Desktop\\\\ssc.fe.cheatview-main\\\\src\\\\app\\\\modules\\\\auth\\\\redux\\\\AuthInit.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState } from 'react';\nimport axios from 'utils/AxiosConfig';\nimport { shallowEqual, useSelector, connect, useDispatch } from 'react-redux';\nimport { LayoutSplashScreen } from '../../../../_metronic/layout/core';\nimport * as auth from './AuthRedux';\nimport { getUserByToken } from './AuthCRUD';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst mapState = state => ({\n  auth: state.auth\n});\n\nconst connector = connect(mapState, auth.actions);\n\nconst AuthInit = props => {\n  _s();\n\n  const didRequest = useRef(false);\n  const dispatch = useDispatch();\n  const [showSplashScreen, setShowSplashScreen] = useState(true);\n  const accessToken = useSelector(_ref => {\n    let {\n      auth\n    } = _ref;\n    return auth.accessToken;\n  }, shallowEqual); // We should request user by authToken before rendering the application\n\n  useEffect(() => {\n    const requestUser = async () => {\n      try {\n        if (!didRequest.current) {\n          axios.defaults.headers.common['Authorization'] = (await accessToken) || \"\";\n          const {\n            data\n          } = await getUserByToken();\n          dispatch(props.fulfillUser(data.user));\n        }\n      } catch (error) {\n        console.error(error);\n\n        if (!didRequest.current) {\n          dispatch(props.logout());\n        }\n      } finally {\n        setShowSplashScreen(false);\n      }\n\n      return () => didRequest.current = true;\n    };\n\n    if (accessToken) {\n      requestUser();\n    } else {\n      dispatch(props.logout());\n      setShowSplashScreen(false);\n    } // eslint-disable-next-line\n\n  }, []);\n  return showSplashScreen ? /*#__PURE__*/_jsxDEV(LayoutSplashScreen, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 29\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.children\n  }, void 0, false);\n};\n\n_s(AuthInit, \"QZZ6ZvjLpFInhk9rFw5xQoMZLJU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = AuthInit;\nexport default _c2 = connector(AuthInit);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AuthInit\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["useRef","useEffect","useState","axios","shallowEqual","useSelector","connect","useDispatch","LayoutSplashScreen","auth","getUserByToken","mapState","state","connector","actions","AuthInit","props","didRequest","dispatch","showSplashScreen","setShowSplashScreen","accessToken","requestUser","current","defaults","headers","common","data","fulfillUser","user","error","console","logout","children"],"sources":["C:/Users/KT2/Desktop/ssc.fe.cheatview-main/src/app/modules/auth/redux/AuthInit.tsx"],"sourcesContent":["import {FC, useRef, useEffect, useState} from 'react'\nimport axios from 'utils/AxiosConfig';\nimport {shallowEqual, useSelector, connect, useDispatch, ConnectedProps} from 'react-redux'\nimport {LayoutSplashScreen} from '../../../../_metronic/layout/core'\nimport * as auth from './AuthRedux'\nimport {getUserByToken} from './AuthCRUD'\nimport {RootState} from '../../../../setup'\n\n\nconst mapState = (state: RootState) => ({auth: state.auth})\nconst connector = connect(mapState, auth.actions)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nconst AuthInit: FC<PropsFromRedux> = (props) => {\n  const didRequest = useRef(false)\n  const dispatch = useDispatch()\n  const [showSplashScreen, setShowSplashScreen] = useState(true)\n  const accessToken = useSelector<RootState>(({auth}) => auth.accessToken, shallowEqual)\n  // We should request user by authToken before rendering the application\n  useEffect(() => {\n    const requestUser = async () => {\n      try {\n        if (!didRequest.current) {\n          axios.defaults.headers.common['Authorization'] = await accessToken || \"\";\n          const {data}:any = await getUserByToken()\n          dispatch(props.fulfillUser(data.user))\n        }\n      } catch (error) {\n        console.error(error)\n        if (!didRequest.current) {\n          dispatch(props.logout())\n        }\n      } finally {\n        setShowSplashScreen(false)\n      }\n\n      return () => (didRequest.current = true)\n    }\n\n    if (accessToken) {\n      requestUser()\n    } else {\n      dispatch(props.logout())\n      setShowSplashScreen(false)\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  return showSplashScreen ? <LayoutSplashScreen /> : <>{props.children}</>\n}\n\nexport default connector(AuthInit)\n"],"mappings":";;;AAAA,SAAYA,MAAZ,EAAoBC,SAApB,EAA+BC,QAA/B,QAA8C,OAA9C;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SAAQC,YAAR,EAAsBC,WAAtB,EAAmCC,OAAnC,EAA4CC,WAA5C,QAA8E,aAA9E;AACA,SAAQC,kBAAR,QAAiC,mCAAjC;AACA,OAAO,KAAKC,IAAZ,MAAsB,aAAtB;AACA,SAAQC,cAAR,QAA6B,YAA7B;;;;AAIA,MAAMC,QAAQ,GAAIC,KAAD,KAAuB;EAACH,IAAI,EAAEG,KAAK,CAACH;AAAb,CAAvB,CAAjB;;AACA,MAAMI,SAAS,GAAGP,OAAO,CAACK,QAAD,EAAWF,IAAI,CAACK,OAAhB,CAAzB;;AAGA,MAAMC,QAA4B,GAAIC,KAAD,IAAW;EAAA;;EAC9C,MAAMC,UAAU,GAAGjB,MAAM,CAAC,KAAD,CAAzB;EACA,MAAMkB,QAAQ,GAAGX,WAAW,EAA5B;EACA,MAAM,CAACY,gBAAD,EAAmBC,mBAAnB,IAA0ClB,QAAQ,CAAC,IAAD,CAAxD;EACA,MAAMmB,WAAW,GAAGhB,WAAW,CAAY;IAAA,IAAC;MAACI;IAAD,CAAD;IAAA,OAAYA,IAAI,CAACY,WAAjB;EAAA,CAAZ,EAA0CjB,YAA1C,CAA/B,CAJ8C,CAK9C;;EACAH,SAAS,CAAC,MAAM;IACd,MAAMqB,WAAW,GAAG,YAAY;MAC9B,IAAI;QACF,IAAI,CAACL,UAAU,CAACM,OAAhB,EAAyB;UACvBpB,KAAK,CAACqB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,OAAML,WAAN,KAAqB,EAAtE;UACA,MAAM;YAACM;UAAD,IAAa,MAAMjB,cAAc,EAAvC;UACAQ,QAAQ,CAACF,KAAK,CAACY,WAAN,CAAkBD,IAAI,CAACE,IAAvB,CAAD,CAAR;QACD;MACF,CAND,CAME,OAAOC,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;;QACA,IAAI,CAACb,UAAU,CAACM,OAAhB,EAAyB;UACvBL,QAAQ,CAACF,KAAK,CAACgB,MAAN,EAAD,CAAR;QACD;MACF,CAXD,SAWU;QACRZ,mBAAmB,CAAC,KAAD,CAAnB;MACD;;MAED,OAAO,MAAOH,UAAU,CAACM,OAAX,GAAqB,IAAnC;IACD,CAjBD;;IAmBA,IAAIF,WAAJ,EAAiB;MACfC,WAAW;IACZ,CAFD,MAEO;MACLJ,QAAQ,CAACF,KAAK,CAACgB,MAAN,EAAD,CAAR;MACAZ,mBAAmB,CAAC,KAAD,CAAnB;IACD,CAzBa,CA0Bd;;EACD,CA3BQ,EA2BN,EA3BM,CAAT;EA6BA,OAAOD,gBAAgB,gBAAG,QAAC,kBAAD;IAAA;IAAA;IAAA;EAAA,QAAH,gBAA4B;IAAA,UAAGH,KAAK,CAACiB;EAAT,iBAAnD;AACD,CApCD;;GAAMlB,Q;UAEaR,W,EAEGF,W;;;KAJhBU,Q;AAsCN,qBAAeF,SAAS,CAACE,QAAD,CAAxB"},"metadata":{},"sourceType":"module"}