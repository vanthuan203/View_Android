{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/KT2/Desktop/ssc.fe.cheatview-main/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _objectSpread from\"C:/Users/KT2/Desktop/ssc.fe.cheatview-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";var _marked=/*#__PURE__*/_regeneratorRuntime().mark(saga);import{persistReducer}from'redux-persist';import storage from'redux-persist/lib/storage';import{put,takeLatest}from'redux-saga/effects';import{getListAccount,updateAccount}from'./AccountCRUD';export var actionTypes={RequestAccount:'[Accounts] Requested',AccountsLoadedSuccess:'[Accounts] Loaded succcess',AccountsLoadedFail:'[Accounts] load fail',ShowCurrentAccount:'[Accounts] Show Account',RequestUpdate:'[Accounts] Requested Update',UpdateSuccess:'[Accounts] Update Success',UpdateFail:'[Accounts] Update Fail',ClearSelected:'[Accounts] Clear selected account'};var initialAccountState={accounts:[],loading:false,currentAccount:undefined};export var reducer=persistReducer({storage:storage,key:'v1-accounts',whitelist:[]},function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialAccountState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case actionTypes.RequestAccount:{return _objectSpread(_objectSpread({},state),{},{accounts:[],loading:true});}case actionTypes.AccountsLoadedSuccess:{var _action$payload;return _objectSpread(_objectSpread({},state),{},{accounts:((_action$payload=action.payload)===null||_action$payload===void 0?void 0:_action$payload.accounts)||[],loading:false});}case actionTypes.AccountsLoadedFail:{return _objectSpread(_objectSpread({},state),{},{accounts:[],loading:false});}case actionTypes.RequestUpdate:{return _objectSpread(_objectSpread({},state),{},{loading:true});}case actionTypes.UpdateSuccess:{var remapAccounts=state.accounts.map(function(item){var _action$payload2,_action$payload2$curr;if(item.id===((_action$payload2=action.payload)===null||_action$payload2===void 0?void 0:(_action$payload2$curr=_action$payload2.currentAccount)===null||_action$payload2$curr===void 0?void 0:_action$payload2$curr.id)){var _action$payload3;return(_action$payload3=action.payload)===null||_action$payload3===void 0?void 0:_action$payload3.currentAccount;}else{return item;}});return _objectSpread(_objectSpread({},state),{},{accounts:remapAccounts,loading:false,currentAccount:undefined});}case actionTypes.UpdateFail:{return _objectSpread(_objectSpread({},state),{},{loading:false});}case actionTypes.ShowCurrentAccount:{var _action$payload4;return _objectSpread(_objectSpread({},state),{},{currentAccount:(_action$payload4=action.payload)===null||_action$payload4===void 0?void 0:_action$payload4.currentAccount});}case actionTypes.ClearSelected:{var _action$payload5;return _objectSpread(_objectSpread({},state),{},{currentAccount:(_action$payload5=action.payload)===null||_action$payload5===void 0?void 0:_action$payload5.currentAccount});}default:return state;}});export var actions={requestAccounts:function requestAccounts(user_id){return{type:actionTypes.RequestAccount,payload:{user_id:user_id}};},fulfillAccounts:function fulfillAccounts(accounts){return{type:actionTypes.AccountsLoadedSuccess,payload:{accounts:accounts}};},loadAccountsFail:function loadAccountsFail(message){return{type:actionTypes.AccountsLoadedFail,payload:{message:message}};},requestUpdate:function requestUpdate(account){return{type:actionTypes.RequestUpdate,payload:{account:account}};},updateSuccess:function updateSuccess(currentAccount){return{type:actionTypes.UpdateSuccess,payload:{currentAccount:currentAccount}};},updateFail:function updateFail(message){return{type:actionTypes.UpdateFail,payload:{message:message}};},showCurrentAccount:function showCurrentAccount(currentAccount){return{type:actionTypes.ShowCurrentAccount,payload:{currentAccount:currentAccount}};},clearCurrentAccount:function clearCurrentAccount(){return{type:actionTypes.ClearSelected};}};export function saga(){return _regeneratorRuntime().wrap(function saga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return takeLatest(actionTypes.RequestAccount,/*#__PURE__*/_regeneratorRuntime().mark(function userRequested(param){var _yield$getListAccount,accounts;return _regeneratorRuntime().wrap(function userRequested$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getListAccount();case 2:_yield$getListAccount=_context.sent;accounts=_yield$getListAccount.data;_context.next=6;return put(actions.fulfillAccounts(accounts.accounts));case 6:case\"end\":return _context.stop();}}},userRequested);}));case 2:_context3.next=4;return takeLatest(actionTypes.RequestUpdate,/*#__PURE__*/_regeneratorRuntime().mark(function updateUserRequested(param){var _yield$updateAccount,account;return _regeneratorRuntime().wrap(function updateUserRequested$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return updateAccount(param.payload.account);case 2:_yield$updateAccount=_context2.sent;account=_yield$updateAccount.data;_context2.next=6;return put(actions.updateSuccess(account.account));case 6:case\"end\":return _context2.stop();}}},updateUserRequested);}));case 4:case\"end\":return _context3.stop();}}},_marked);}","map":{"version":3,"names":["saga","persistReducer","storage","put","takeLatest","getListAccount","updateAccount","actionTypes","RequestAccount","AccountsLoadedSuccess","AccountsLoadedFail","ShowCurrentAccount","RequestUpdate","UpdateSuccess","UpdateFail","ClearSelected","initialAccountState","accounts","loading","currentAccount","undefined","reducer","key","whitelist","state","action","type","payload","remapAccounts","map","item","id","actions","requestAccounts","user_id","fulfillAccounts","loadAccountsFail","message","requestUpdate","account","updateSuccess","updateFail","showCurrentAccount","clearCurrentAccount","userRequested","param","data","updateUserRequested"],"sources":["C:/Users/KT2/Desktop/ssc.fe.cheatview-main/src/app/modules/accounts/redux/AccountRedux.ts"],"sourcesContent":["import { Action } from '@reduxjs/toolkit'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport { put, takeLatest } from 'redux-saga/effects'\nimport { AccountModel } from '../models/Account'\nimport { getListAccount,updateAccount } from './AccountCRUD'\nexport interface ActionWithPayload<T> extends Action {\n  payload?: T\n}\n\nexport const actionTypes = {\n  RequestAccount: '[Accounts] Requested',\n  AccountsLoadedSuccess: '[Accounts] Loaded succcess',\n  AccountsLoadedFail: '[Accounts] load fail',\n  ShowCurrentAccount: '[Accounts] Show Account',\n  RequestUpdate: '[Accounts] Requested Update',\n  UpdateSuccess: '[Accounts] Update Success',\n  UpdateFail: '[Accounts] Update Fail',\n  ClearSelected:'[Accounts] Clear selected account',\n}\n\nconst initialAccountState: IAccountState = {\n  accounts: [],\n  loading: false,\n  currentAccount:undefined\n}\n\nexport interface IAccountState {\n  accounts: AccountModel[]\n  loading: boolean\n  currentAccount?:AccountModel\n}\n\nexport const reducer = persistReducer(\n  { storage, key: 'v1-accounts', whitelist: [] },\n  (state: IAccountState = initialAccountState, action: ActionWithPayload<IAccountState>) => {\n    switch (action.type) {\n      case actionTypes.RequestAccount: {\n        return {\n          ...state,\n          accounts: [],\n          loading: true\n        }\n      }\n      case actionTypes.AccountsLoadedSuccess: {\n        return {\n          ...state,\n          accounts: action.payload?.accounts || [],\n          loading: false\n        }\n      }\n      case actionTypes.AccountsLoadedFail: {\n        return {\n          ...state,\n          accounts: [],\n          loading: false\n        }\n      }\n      case actionTypes.RequestUpdate: {\n        return {\n          ...state,\n          loading: true\n        }\n      }\n      case actionTypes.UpdateSuccess: {\n        const remapAccounts = state.accounts.map((item:AccountModel)=>{\n          if(item.id===action.payload?.currentAccount?.id){\n            return action.payload?.currentAccount\n          }else {\n            return item\n          }\n        })\n        return {\n          ...state,\n          accounts:remapAccounts,\n          loading: false,\n          currentAccount: undefined\n        }\n      }\n      case actionTypes.UpdateFail: {\n        return {\n          ...state,\n          loading: false\n        }\n      }\n      case actionTypes.ShowCurrentAccount: {\n        return {\n          ...state,\n          currentAccount: action.payload?.currentAccount\n        }\n      }\n      case actionTypes.ClearSelected: {\n        return {\n          ...state,\n          currentAccount: action.payload?.currentAccount\n        }\n      }\n      default:\n        return state\n    }\n  }\n)\n\nexport const actions = {\n  requestAccounts: (user_id: number) => ({ type: actionTypes.RequestAccount, payload: { user_id } }),\n  fulfillAccounts: (accounts: AccountModel[]) => ({ type: actionTypes.AccountsLoadedSuccess, payload: { accounts } }),\n  loadAccountsFail: (message: string) => ({ type: actionTypes.AccountsLoadedFail, payload: { message } }),\n  requestUpdate: (account: AccountModel) => ({ type: actionTypes.RequestUpdate, payload: { account } }),\n  updateSuccess: (currentAccount: AccountModel) => ({ type: actionTypes.UpdateSuccess, payload: { currentAccount } }),\n  updateFail: (message: string) => ({ type: actionTypes.UpdateFail, payload: { message } }),\n  showCurrentAccount: (currentAccount: AccountModel) => ({ type: actionTypes.ShowCurrentAccount, payload: { currentAccount } }),\n  clearCurrentAccount: () => ({ type: actionTypes.ClearSelected}),\n}\n\nexport function* saga() {\n  yield takeLatest(actionTypes.RequestAccount, function* userRequested(param: any) {\n    const {data: accounts} = yield getListAccount()\n    yield put(actions.fulfillAccounts(accounts.accounts))\n  })\n  yield takeLatest(actionTypes.RequestUpdate, function* updateUserRequested(param: any) {\n    //console.log(\"------update account param-----\",param.payload.account)\n    const {data: account} = yield updateAccount(param.payload.account)\n    //console.log(\"------update account res-----\",account.account)\n    yield put(actions.updateSuccess(account.account))\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}